---
"/product_families/{product_family_id}/coupons.json":
  parameters:
  - schema:
      type: integer
    name: product_family_id
    in: path
    required: true
    description: The Chargify id of the product family to which the coupon belongs
  post:
    summary: Create Coupon
    tags:
    - Coupons
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  "$ref": "#/components/schemas/Coupon"
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - Expiration Date cannot be in the past
    operationId: createCoupon
    description: |-
      ## Coupons Documentation

      Coupons can be administered in the Chargify application or created via API. Please view our section on [creating coupons](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404742830733) for more information.

      Additionally, for documentation on how to apply a coupon to a subscription within the Chargify UI, please see our documentation [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404761012877).

      ## Create Coupon

      This request will create a coupon, based on the provided information.

      When creating a coupon, you must specify a product family using the `product_family_id`. If no `product_family_id` is passed, the first product family available is used. You will also need to formulate your URL to cite the Product Family ID in your request.

      You can restrict a coupon to only apply to specific products / components by optionally passing in hashes of `restricted_products` and/or `restricted_components` in the format:
      `{ "<product/component_id>": boolean_value }`
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Create-or-Update-Coupon"
          examples:
            Percentage Coupon Example:
              value:
                coupon:
                  name: 15% off
                  code: 15OFF
                  description: 15% off for life
                  percentage: '15'
                  allow_negative_balance: 'false'
                  recurring: 'false'
                  end_date: '2012-08-29T12:00:00-04:00'
                  product_family_id: '2'
                  stackable: 'true'
                  compounding_strategy: compound
                restricted_products:
                  '1': true
                restricted_components:
                  '1': true
                  '2': false
            Flat Amount Coupon Example:
              value:
                coupon:
                  name: "$10 off"
                  code: 10OFF
                  description: "$10 off for life"
                  amount_in_cents: 1000
                  allow_negative_balance: 'false'
                  recurring: 'false'
                  end_date: '2012-08-29T12:00:00-04:00'
                  product_family_id: '2'
                  stackable: 'true'
                  compounding_strategy: compound
                restricted_products:
                  '1': true
                restricted_components:
                  '1': true
                  '2': false
      description: ''
  get:
    summary: List Coupons for Product Family
    tags:
    - Coupons
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Coupon"
            examples:
              Example:
                value:
                - coupon:
                    id: 999999
                    name: 50% coupon
                    code: 50PERCENT
                    description: 50 PERCENT OFF
                    amount_in_cents:
                    product_family_id: 527890
                    created_at: '2016-10-21T17:02:08-04:00'
                    updated_at: '2016-10-21T17:06:11-04:00'
                    start_date: '2016-10-21T17:02:08-04:00'
                    end_date:
                    percentage: 50
                    recurring: true
                    duration_period_count:
                    duration_interval: 1
                    duration_interval_unit: day
                    allow_negative_balance: true
                    archived_at:
                    conversion_limit: 100
                    stackable: false
                    compounding_strategy: compound
                    coupon_restrictions: []
                    use_site_exchange_rate: true
                - coupon:
                    id: 123456
                    name: 100% coupon
                    code: 100PERCENT
                    description: 100 PERCENT OFF
                    amount_in_cents:
                    product_family_id: 527890
                    created_at: '2016-10-21T17:02:08-04:00'
                    updated_at: '2016-10-21T17:06:11-04:00'
                    start_date: '2016-10-21T17:02:08-04:00'
                    end_date:
                    percentage: 50
                    recurring: true
                    duration_period_count:
                    duration_interval: 1
                    duration_interval_unit: day
                    allow_negative_balance: true
                    archived_at:
                    conversion_limit: 100
                    stackable: false
                    compounding_strategy: compound
                    coupon_restrictions: []
                    use_site_exchange_rate: true
                - coupon:
                    id: 888888
                    name: 25% coupon
                    code: 25PERCENT
                    description: 25 PERCENT OFF
                    amount_in_cents:
                    product_family_id: 527890
                    created_at: '2016-10-21T17:02:08-04:00'
                    updated_at: '2016-10-21T17:06:11-04:00'
                    start_date: '2016-10-21T17:02:08-04:00'
                    end_date:
                    percentage: 25
                    recurring: true
                    duration_period_count:
                    duration_interval: 1
                    duration_interval_unit: day
                    allow_negative_balance: true
                    archived_at:
                    conversion_limit: 100
                    stackable: false
                    compounding_strategy: compound
                    coupon_restrictions:
                    - id: 37
                      item_type: Component
                      item_id: 519
                      name: test
                      handle:
                    use_site_exchange_rate: true
    operationId: listCouponsForProductFamily
    description: |-
      List coupons for a specific Product Family in a Site.

      If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
    parameters:
    - schema:
        type: integer
        minimum: 1
        example: page=2
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        default: 30
        maximum: 200
        minimum: 1
        example: per_page=50
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
        Default value is 30. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200.
    - schema:
        type: string
        enum:
        - created_at
        - updated_at
        example: filter[date_field]=updated_at
      in: query
      name: filter[date_field]
      description: The type of filter you would like to apply to your search.
    - schema:
        type: string
        example: filter[end_date]=2011-12-15
      in: query
      name: filter[end_date]
      description: The end date (format YYYY-MM-DD) with which to filter the date_field.
        Returns coupons with a timestamp up to and including 11:59:59PM in your site’s
        time zone on the date specified.
    - schema:
        type: string
        example: filter[end_datetime]=2011-12-1T10:15:30+01:00
      in: query
      name: filter[end_datetime]
      description: The end date and time (format YYYY-MM-DD HH:MM:SS) with which to
        filter the date_field. Returns coupons with a timestamp at or before exact
        time provided in query. You can specify timezone in query - otherwise your
        site's time zone will be used. If provided, this parameter will be used instead
        of end_date.
    - schema:
        type: string
        example: filter[start_date]=2011-12-17
      in: query
      name: filter[start_date]
      description: The start date (format YYYY-MM-DD) with which to filter the date_field.
        Returns coupons with a timestamp at or after midnight (12:00:00 AM) in your
        site’s time zone on the date specified.
    - schema:
        type: string
        example: filter[start_datetime]=2011-12-19T10:15:30+01:00
      in: query
      description: The start date and time (format YYYY-MM-DD HH:MM:SS) with which
        to filter the date_field. Returns coupons with a timestamp at or after exact
        time provided in query. You can specify timezone in query - otherwise your
        site's time zone will be used. If provided, this parameter will be used instead
        of start_date.
      name: filter[start_datetime]
    - schema:
        type: array
        example: filter[ids]=1,2,3
        minItems: 1
      in: query
      name: filter[ids]
      description: Allows fetching coupons with matching id based on provided values.
    - schema:
        type: array
        example: filter[codes]=free,free_trial
      in: query
      name: filter[codes]
      description: Allows fetching coupons with matching codes based on provided values.
    - schema:
        type: boolean
        enum:
        - 'true'
        example: currency_prices=true
      in: query
      name: currency_prices
      description: When fetching coupons, if you have defined multiple currencies
        at the site level, you can optionally pass the `?currency_prices=true` query
        param to include an array of currency price data in the response.
    - schema:
        type: boolean
        example: filter[use_site_exchange_rate]=true
      in: query
      description: Allows fetching coupons with matching use_site_exchange_rate based
        on provided value.
      name: filter[use_site_exchange_rate]
"/product_families/{product_family_id}/coupons/{coupon_id}.json":
  parameters:
  - schema:
      type: integer
    name: product_family_id
    in: path
    required: true
    description: The Chargify id of the product family to which the coupon belongs
  - schema:
      type: integer
    name: coupon_id
    in: path
    required: true
    description: The Chargify id of the coupon
  get:
    summary: Read Coupon
    tags:
    - Coupons
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  "$ref": "#/components/schemas/Coupon"
            examples:
              Example:
                value:
                  coupon:
                    id: 67
                    name: Foo Bar
                    code: YEPPER99934
                    description: my cool coupon
                    amount_in_cents:
                    product_family_id: 4
                    product_family_name: Billing Plans
                    created_at: '2017-11-08T10:01:15-05:00'
                    updated_at: '2017-11-08T10:01:15-05:00'
                    start_date: '2017-11-08T10:01:15-05:00'
                    end_date:
                    percentage: 33.3333
                    duration_period_count:
                    duration_interval:
                    duration_interval_unit:
                    allow_negative_balance: false
                    archived_at:
                    conversion_limit:
                    stackable: true
                    compounding_strategy: compound
                    coupon_restrictions: []
    operationId: readCoupon
    description: |-
      You can retrieve the Coupon via the API with the Show method. You must identify the Coupon in this call by the ID parameter that Chargify assigns.
      If instead you would like to find a Coupon using a Coupon code, see the Coupon Find method.

      When fetching a coupon, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

      If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
    parameters: []
  put:
    summary: Update Coupon
    tags:
    - Coupons
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  "$ref": "#/components/schemas/Coupon"
            examples:
              Example:
                value:
                  coupon:
                    id: 67
                    name: Foo Bar
                    code: YEPPER99934
                    description: my cool coupon
                    amount_in_cents: 10000
                    product_family_id: 4
                    created_at: '2017-11-08T10:01:15-05:00'
                    updated_at: '2017-11-08T10:01:15-05:00'
                    start_date: '2017-11-08T10:01:15-05:00'
                    end_date:
                    percentage:
                    recurring: false
                    duration_period_count:
                    duration_interval:
                    duration_interval_unit:
                    allow_negative_balance: false
                    archived_at:
                    conversion_limit:
                    stackable: true
                    compounding_strategy: compound
                    coupon_restrictions: []
    operationId: updateCoupon
    description: |-
      ## Update Coupon

      You can update a Coupon via the API with a PUT request to the resource endpoint.

      You can restrict a coupon to only apply to specific products / components by optionally passing in hashes of `restricted_products` and/or `restricted_components` in the format:
      `{ "<product/component_id>": boolean_value }`
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Create-or-Update-Coupon"
          examples:
            Example:
              value:
                coupon:
                  name: 15% off
                  code: 15OFF
                  description: 15% off for life
                  percentage: '15'
                  allow_negative_balance: 'false'
                  recurring: 'false'
                  end_date: '2012-08-29T12:00:00-04:00'
                  product_family_id: '2'
                  stackable: 'true'
                  compounding_strategy: compound
                restricted_products:
                  '1': true
                restricted_components:
                  '1': true
                  '2': false
      description: ''
  delete:
    summary: Archive Coupon
    tags:
    - Coupons
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  "$ref": "#/components/schemas/Coupon"
            examples:
              Example:
                value:
                  coupon:
                    id: 67
                    name: Foo Bar
                    code: YEPPER99934
                    description: my cool coupon
                    amount_in_cents: 10000
                    product_family_id: 4
                    created_at: '2017-11-08T10:01:15-05:00'
                    updated_at: '2017-11-08T10:01:15-05:00'
                    start_date: '2017-11-08T10:01:15-05:00'
                    end_date:
                    percentage:
                    recurring: false
                    duration_period_count:
                    duration_interval:
                    duration_interval_unit:
                    allow_negative_balance: false
                    archived_at: '2016-12-02T13:09:33-05:00'
                    conversion_limit:
                    stackable: true
                    compounding_strategy: compound
                    coupon_restrictions: []
    operationId: archiveCoupon
    description: |-
      You can archive a Coupon via the API with the archive method.
      Archiving makes that Coupon unavailable for future use, but allows it to remain attached and functional on existing Subscriptions that are using it.
      The `archived_at` date and time will be assigned.
"/product_families/{product_family_id}/coupons/{coupon_id}/usage.json":
  parameters:
  - schema:
      type: integer
    name: product_family_id
    in: path
    required: true
    description: The Chargify id of the product family to which the coupon belongs
  - schema:
      type: integer
    name: coupon_id
    in: path
    required: true
    description: The Chargify id of the coupon
  get:
    summary: List Coupon Usages
    tags:
    - Coupons
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: The Chargify id of the product
                  name:
                    type: string
                    description: Name of the product
                  signups:
                    type: integer
                    description: Number of times the coupon has been applied
                  savings:
                    type: integer
                    description: Dollar amount of customer savings as a result of
                      the coupon.
                    nullable: true
                  savings_in_cents:
                    type: integer
                    description: Dollar amount of customer savings as a result of
                      the coupon.
                    nullable: true
                  revenue:
                    type: integer
                    description: Total revenue of the all subscriptions that have
                      received a discount from this coupon.
                    nullable: true
                  revenue_in_cents:
                    type: integer
                    description: Total revenue of the all subscriptions that have
                      received a discount from this coupon.
            examples:
              Example:
                value:
                - name: No cost product
                  id: 3903594
                  signups: 0
                  savings: 0
                  savings_in_cents: 0
                  revenue: 0
                  revenue_in_cents: 0
                - name: Product that expires
                  id: 3853680
                  signups: 0
                  savings: 0
                  savings_in_cents: 0
                  revenue: 0
                  revenue_in_cents: 0
                - name: Trial Product
                  id: 3861800
                  signups: 1
                  savings: 30
                  savings_in_cents: 3000
                  revenue: 20
                  revenue_in_cents: 2000
    operationId: readCouponUsage
    description: This request will provide details about the coupon usage as an array
      of data hashes, one per product.
"/product_families/{product_family_id}/{plural_kind}.json":
  parameters:
  - schema:
      type: integer
    name: product_family_id
    in: path
    required: true
    description: The Chargify id of the product family to which the component belongs
  - schema:
      type: string
      enum:
      - metered_components
      - quantity_based_components
      - on_off_components
      - prepaid_usage_components
      - event_based_components
    name: plural_kind
    in: path
    required: true
    description: The component kind
  post:
    summary: Create Component
    tags:
    - Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                component:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The unique ID assigned to the component by Chargify.
                        This ID can be used to fetch the component from the API.
                    name:
                      type: string
                      description: The name of the Component, suitable for display
                        on statements. i.e. Text Messages.
                    pricing_scheme:
                      type: string
                      description: 'The handle for the pricing scheme. Available options:
                        per_unit, volume, tiered, stairstep. See [Price Bracket Rules](https://chargify.zendesk.com/hc/en-us/articles/4407755865883#price-bracket-rules)
                        for an overview of pricing schemes.'
                    unit_name:
                      type: string
                      description: The name of the unit that the component’s usage
                        is measured in. i.e. message
                    unit_price:
                      type: string
                      description: The amount the customer will be charged per unit.
                        This field is only populated for ‘per_unit’ pricing schemes,
                        otherwise it may be null.
                      nullable: true
                    product_family_id:
                      type: integer
                      description: The id of the Product Family to which the Component
                        belongs
                    price_per_unit_in_cents:
                      type: integer
                      description: deprecated - use unit_price instead
                      nullable: true
                    kind:
                      type: string
                      description: A handle for the component type
                      enum:
                      - metered_component
                      - quantity_based_component
                      - on_off_component
                      - prepaid_usage_component
                      - event_based_component
                    archived:
                      type: boolean
                      description: Boolean flag describing whether a component is
                        archived or not.
                    taxable:
                      type: boolean
                      description: Boolean flag describing whether a component is
                        taxable or not.
                    description:
                      type: string
                      description: The description of the component.
                      nullable: true
                    default_price_point_id:
                      type: integer
                    price_point_count:
                      type: integer
                      description: Count for the number of price points associated
                        with the component
                    price_points_url:
                      type: string
                      description: URL that points to the location to read the existing
                        price points via GET request
                    tax_code:
                      type: string
                      description: A string representing the tax code related to the
                        component type. This is especially important when using the
                        Avalara service to tax based on locale. This attribute has
                        a max length of 10 characters.
                    recurring:
                      type: boolean
                    upgrade_charge:
                      type: string
                      nullable: true
                    downgrade_credit:
                      type: string
                      nullable: true
                    created_at:
                      type: string
                    prices:
                      type: array
                      nullable: true
                      description: An array of price brackets. If the component uses
                        the ‘per_unit’ pricing scheme, this array will be empty.
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          component_id:
                            type: integer
                          starting_quantity:
                            type: integer
                          ending_quantity:
                            type: integer
                            nullable: true
                          unit_price:
                            type: string
                          price_point_id:
                            type: integer
                          formatted_unit_price:
                            type: string
                    default_price_point_name:
                      type: string
                    product_family_name:
                      type: string
                    hide_date_range_on_invoice:
                      type: boolean
                      description: "(Only available on Relationship Invoicing sites)
                        Boolean flag describing if the service date range should show
                        for the component on generated invoices."
                    event_based_billing_metric_id:
                      type: integer
                      description: "(Only for Event Based Components) This is an ID
                        of a metric attached to the component. This metric is used
                        to bill upon collected events."
                    item_category:
                      type: string
                      description: 'One of the following: Business Software, Consumer
                        Software, Digital Services, Physical Goods, Other'
                    accounting_code:
                      type: string
                      description: E.g. Internal ID or SKU Number
            examples:
              Example:
                value:
                  component:
                    id: 292609
                    name: Text messages
                    pricing_scheme: stairstep
                    unit_name: text message
                    unit_price:
                    product_family_id: 528484
                    price_per_unit_in_cents:
                    kind: metered_component
                    archived: false
                    taxable: false
                    description:
                    created_at: '2019-08-02T05:54:53-04:00'
                    prices:
                    - id: 47
                      component_id: 292609
                      starting_quantity: 1
                      ending_quantity:
                      unit_price: '1.0'
                      price_point_id: 173
                      formatted_unit_price: "$1.00"
                    default_price_point_name: Original
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - 'Name: cannot be blank.'
                  - 'Unit name: cannot be blank.'
                  - 'Pricing scheme: cannot be blank.'
                  - At least 1 price bracket must be defined
    operationId: createComponent
    parameters: []
    description: |-
      This request will create a component definition under the specified product family. These component definitions determine what components are named, how they are measured, and how much they cost.

      Components can then be added and “allocated” for each subscription to a product in the product family. These component line-items affect how much a subscription will be charged, depending on the current allocations (i.e. 4 IP Addresses, or SSL “enabled”)

      This documentation covers both component definitions and component line-items. Please understand the difference.

      Please note that you may not edit components via API. To do so, please log into the application.

      ### Component Documentation

      For more information on components, please see our documentation [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677).

      For information on how to record component usage against a subscription, please see the following resources:

      + [Proration and Component Allocations](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677#applying-proration-and-recording-components)
      + [Recording component usage against a subscription](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404606587917#recording-component-usage)
    requestBody:
      content:
        application/json:
          schema:
            anyOf:
            - properties:
                metered_component:
                  type: object
                  required:
                  - name
                  - unit_name
                  - pricing_scheme
                  properties:
                    name:
                      type: string
                      description: A name for this component that is suitable for
                        showing customers and displaying on billing statements, ie.
                        "Minutes".
                    unit_name:
                      type: string
                      description: The name of the unit of measurement for the component.
                        It should be singular since it will be automatically pluralized
                        when necessary. i.e. “message”, which may then be shown as
                        “5 messages” on a subscription’s component line-item
                    description:
                      type: string
                      description: A description for the component that will be displayed
                        to the user on the hosted signup page.
                    handle:
                      type: string
                      description: A unique identifier for your use that can be used
                        to retrieve this component is subsequent requests.  Must start
                        with a letter or number and may only contain lowercase letters,
                        numbers, or the characters '.', ':', '-', or '_'.
                      pattern: "\\A[a-z0-9][a-z0-9\\-_:.]*\\z"
                    taxable:
                      type: boolean
                      description: Boolean flag describing whether a component is
                        taxable or not.
                    pricing_scheme:
                      type: string
                      enum:
                      - per_unit
                      - volume
                      - tiered
                      - stairstep
                      description: The identifier for the pricing scheme. See [Product
                        Components](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677#pricing-schemes-explained)
                        for an overview of pricing schemes.
                    prices:
                      type: array
                      description: "(Not required for ‘per_unit’ pricing schemes)
                        One or more price brackets. See [Price Bracket Rules](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677#price-bracket-rules)
                        for an overview of how price brackets work for different pricing
                        schemes."
                      items:
                        type: object
                        properties:
                          starting_quantity:
                            type: integer
                          unit_price:
                            type:
                            - string
                            - number
                            description: The price can contain up to 8 decimal places.
                              i.e. 1.00 or 0.0012 or 0.00000065
                    upgrade_charge:
                      type: string
                    downgrade_credit:
                      type: string
                    price_points:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          handle:
                            type: string
                          pricing_scheme:
                            type: string
                          prices:
                            type: array
                            items:
                              type: object
                              properties:
                                starting_quantity:
                                  type: string
                                unit_price:
                                  type:
                                  - string
                                  - number
                                  description: The price can contain up to 8 decimal
                                    places. i.e. 1.00 or 0.0012 or 0.00000065
                    unit_price:
                      type:
                      - string
                      - number
                      description: The amount the customer will be charged per unit
                        when the pricing scheme is “per_unit”. For On/Off Components,
                        this is the amount that the customer will be charged when
                        they turn the component on for the subscription. The price
                        can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or
                        0.00000065
                    tax_code:
                      type: string
                      description: A string representing the tax code related to the
                        component type. This is especially important when using the
                        Avalara service to tax based on locale. This attribute has
                        a max length of 10 characters.
                    hide_date_range_on_invoice:
                      type: boolean
                      description: "(Only available on Relationship Invoicing sites)
                        Boolean flag describing if the service date range should show
                        for the component on generated invoices."
                    price_in_cents:
                      type: string
                      description: deprecated May 2011 - use unit_price instead
              required:
              - metered_component
            - properties:
                quantity_based_component:
                  type: object
                  properties:
                    name:
                      type: string
                      description: A name for this component that is suitable for
                        showing customers and displaying on billing statements, ie.
                        "Minutes".
                    unit_name:
                      type: string
                      description: The name of the unit of measurement for the component.
                        It should be singular since it will be automatically pluralized
                        when necessary. i.e. “message”, which may then be shown as
                        “5 messages” on a subscription’s component line-item
                    description:
                      type: string
                      description: A description for the component that will be displayed
                        to the user on the hosted signup page.
                    handle:
                      type: string
                      description: A unique identifier for your use that can be used
                        to retrieve this component is subsequent requests.  Must start
                        with a letter or number and may only contain lowercase letters,
                        numbers, or the characters '.', ':', '-', or '_'.
                      pattern: "\\A[a-z0-9][a-z0-9\\-_:.]*\\z"
                    taxable:
                      type: boolean
                      description: Boolean flag describing whether a component is
                        taxable or not.
                    pricing_scheme:
                      type: string
                      description: The identifier for the pricing scheme. See [Product
                        Components](https://chargify.zendesk.com/hc/en-us/articles/4407755865883)
                        for an overview of pricing schemes.
                      enum:
                      - per_unit
                      - volume
                      - tiered
                      - stairstep
                    prices:
                      type: array
                      description: "(Not required for ‘per_unit’ pricing schemes)
                        One or more price brackets. See [Price Bracket Rules](https://chargify.zendesk.com/hc/en-us/articles/4407755865883#price-bracket-rules)
                        for an overview of how price brackets work for different pricing
                        schemes."
                      items:
                        type: object
                        properties:
                          starting_quantity:
                            type: integer
                          unit_price:
                            type:
                            - string
                            - number
                            description: The price can contain up to 8 decimal places.
                              i.e. 1.00 or 0.0012 or 0.00000065
                    upgrade_charge:
                      type: string
                    downgrade_credit:
                      type: string
                    price_points:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          handle:
                            type: string
                          pricing_scheme:
                            type: string
                          prices:
                            type: array
                            items:
                              type: object
                              properties:
                                starting_quantity:
                                  type: string
                                unit_price:
                                  type:
                                  - string
                                  - number
                                  description: The price can contain up to 8 decimal
                                    places. i.e. 1.00 or 0.0012 or 0.00000065
                    unit_price:
                      type:
                      - string
                      - number
                      description: The amount the customer will be charged per unit
                        when the pricing scheme is “per_unit”. For On/Off Components,
                        this is the amount that the customer will be charged when
                        they turn the component on for the subscription. The price
                        can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or
                        0.00000065
                    tax_code:
                      type: string
                      description: A string representing the tax code related to the
                        component type. This is especially important when using the
                        Avalara service to tax based on locale. This attribute has
                        a max length of 10 characters.
                    hide_date_range_on_invoice:
                      type: boolean
                      description: "(Only available on Relationship Invoicing sites)
                        Boolean flag describing if the service date range should show
                        for the component on generated invoices."
                    price_in_cents:
                      type: string
                      description: deprecated May 2011 - use unit_price instead
                    recurring:
                      type: boolean
                  required:
                  - name
                  - unit_name
                  - pricing_scheme
            - properties:
                on_off_component:
                  type: object
                  required:
                  - name
                  - pricing_scheme
                  properties:
                    name:
                      type: string
                      description: A name for this component that is suitable for
                        showing customers and displaying on billing statements, ie.
                        "Minutes".
                    unit_name:
                      type: string
                      description: The name of the unit of measurement for the component.
                        It should be singular since it will be automatically pluralized
                        when necessary. i.e. “message”, which may then be shown as
                        “5 messages” on a subscription’s component line-item
                    description:
                      type: string
                      description: A description for the component that will be displayed
                        to the user on the hosted signup page.
                    handle:
                      type: string
                      description: A unique identifier for your use that can be used
                        to retrieve this component is subsequent requests.  Must start
                        with a letter or number and may only contain lowercase letters,
                        numbers, or the characters '.', ':', '-', or '_'.
                      pattern: "\\A[a-z0-9][a-z0-9\\-_:.]*\\z"
                    taxable:
                      type: boolean
                      description: Boolean flag describing whether a component is
                        taxable or not.
                    pricing_scheme:
                      type: string
                      description: The identifier for the pricing scheme. See [Product
                        Components](https://chargify.zendesk.com/hc/en-us/articles/4407755865883)
                        for an overview of pricing schemes.
                      enum:
                      - per_unit
                      - volume
                      - tiered
                      - stairstep
                    prices:
                      type: array
                      description: "(Not required for ‘per_unit’ pricing schemes)
                        One or more price brackets. See [Price Bracket Rules](https://chargify.zendesk.com/hc/en-us/articles/4407755865883#price-bracket-rules)
                        for an overview of how price brackets work for different pricing
                        schemes."
                      items:
                        type: object
                        properties:
                          starting_quantity:
                            type: integer
                          unit_price:
                            type:
                            - string
                            - number
                            description: The price can contain up to 8 decimal places.
                              i.e. 1.00 or 0.0012 or 0.00000065
                    upgrade_charge:
                      type: string
                    downgrade_credit:
                      type: string
                    price_points:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          handle:
                            type: string
                          pricing_scheme:
                            type: string
                          prices:
                            type: array
                            items:
                              type: object
                              properties:
                                starting_quantity:
                                  type: string
                                unit_price:
                                  type:
                                  - string
                                  - number
                                  description: The price can contain up to 8 decimal
                                    places. i.e. 1.00 or 0.0012 or 0.00000065
                    unit_price:
                      description: The amount the customer will be charged per unit
                        when the pricing scheme is “per_unit”. For On/Off Components,
                        this is the amount that the customer will be charged when
                        they turn the component on for the subscription. The price
                        can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or
                        0.00000065
                      type:
                      - string
                      - number
                    tax_code:
                      type: string
                      description: A string representing the tax code related to the
                        component type. This is especially important when using the
                        Avalara service to tax based on locale. This attribute has
                        a max length of 10 characters.
                    hide_date_range_on_invoice:
                      type: boolean
                      description: "(Only available on Relationship Invoicing sites)
                        Boolean flag describing if the service date range should show
                        for the component on generated invoices."
                    price_in_cents:
                      type: string
                      description: deprecated May 2011 - use unit_price instead
              required:
              - on_off_component
            - properties:
                prepaid_usage_component:
                  type: object
                  properties:
                    name:
                      type: string
                      description: A name for this component that is suitable for
                        showing customers and displaying on billing statements, ie.
                        "Minutes".
                    unit_name:
                      type: string
                      description: The name of the unit of measurement for the component.
                        It should be singular since it will be automatically pluralized
                        when necessary. i.e. “message”, which may then be shown as
                        “5 messages” on a subscription’s component line-item
                    description:
                      type: string
                      description: A description for the component that will be displayed
                        to the user on the hosted signup page.
                    handle:
                      type: string
                      description: A unique identifier for your use that can be used
                        to retrieve this component is subsequent requests.  Must start
                        with a letter or number and may only contain lowercase letters,
                        numbers, or the characters '.', ':', '-', or '_'.
                      pattern: "\\A[a-z0-9][a-z0-9\\-_:.]*\\z"
                    taxable:
                      type: boolean
                      description: Boolean flag describing whether a component is
                        taxable or not.
                    pricing_scheme:
                      type: string
                      description: The identifier for the pricing scheme. See [Product
                        Components](https://chargify.zendesk.com/hc/en-us/articles/4407755865883)
                        for an overview of pricing schemes.
                      enum:
                      - per_unit
                      - volume
                      - tiered
                      - stairstep
                    prices:
                      type: array
                      description: "(Not required for ‘per_unit’ pricing schemes)
                        One or more price brackets. See [Price Bracket Rules](https://chargify.zendesk.com/hc/en-us/articles/4407755865883#general-price-bracket-rules)
                        for an overview of how price brackets work for different pricing
                        schemes."
                      items:
                        type: object
                        properties:
                          starting_quantity:
                            type: integer
                          unit_price:
                            type:
                            - string
                            - number
                            description: The price can contain up to 8 decimal places.
                              i.e. 1.00 or 0.0012 or 0.00000065
                    upgrade_charge:
                      type: string
                    downgrade_credit:
                      type: string
                    price_points:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          handle:
                            type: string
                          pricing_scheme:
                            type: string
                          prices:
                            type: array
                            items:
                              type: object
                              properties:
                                starting_quantity:
                                  type: string
                                unit_price:
                                  type:
                                  - string
                                  - number
                                  description: The price can contain up to 8 decimal
                                    places. i.e. 1.00 or 0.0012 or 0.00000065
                          overage_pricing:
                            "$ref": "#/components/schemas/Overage-Pricing"
                    unit_price:
                      type:
                      - string
                      - number
                      description: The amount the customer will be charged per unit
                        when the pricing scheme is “per_unit”. For On/Off Components,
                        this is the amount that the customer will be charged when
                        they turn the component on for the subscription. The price
                        can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or
                        0.00000065
                    tax_code:
                      type: string
                      description: A string representing the tax code related to the
                        component type. This is especially important when using the
                        Avalara service to tax based on locale. This attribute has
                        a max length of 10 characters.
                    hide_date_range_on_invoice:
                      type: boolean
                      description: "(Only available on Relationship Invoicing sites)
                        Boolean flag describing if the service date range should show
                        for the component on generated invoices."
                    price_in_cents:
                      type: string
                      description: deprecated May 2011 - use unit_price instead
                    overage_pricing:
                      "$ref": "#/components/schemas/Overage-Pricing"
                    rollover_prepaid_remainder:
                      type: boolean
                      description: Boolean which controls whether or not remaining
                        units should be rolled over to the next period
                    renew_prepaid_allocation:
                      type: boolean
                      description: Boolean which controls whether or not the allocated
                        quantity should be renewed at the beginning of each period
                    expiration_interval:
                      type: number
                      description: "(only for prepaid usage components where rollover_prepaid_remainder
                        is true) The number of `expiration_interval_unit`s after which
                        rollover amounts should expire"
                    expiration_interval_unit:
                      schema:
                        "$ref": "#/components/schemas/Interval-Unit"
              required:
              - prepaid_usage_component
            - properties:
                event_based_component:
                  type: object
                  required:
                  - name
                  - unit_name
                  - pricing_scheme
                  - event_based_billing_metric_id
                  properties:
                    name:
                      type: string
                      description: A name for this component that is suitable for
                        showing customers and displaying on billing statements, ie.
                        "Minutes".
                    unit_name:
                      type: string
                      description: The name of the unit of measurement for the component.
                        It should be singular since it will be automatically pluralized
                        when necessary. i.e. “message”, which may then be shown as
                        “5 messages” on a subscription’s component line-item
                    description:
                      type: string
                      description: A description for the component that will be displayed
                        to the user on the hosted signup page.
                    handle:
                      type: string
                      description: A unique identifier for your use that can be used
                        to retrieve this component is subsequent requests.  Must start
                        with a letter or number and may only contain lowercase letters,
                        numbers, or the characters '.', ':', '-', or '_'.
                      pattern: "\\A[a-z0-9][a-z0-9\\-_:.]*\\z"
                    taxable:
                      type: boolean
                      description: Boolean flag describing whether a component is
                        taxable or not.
                    pricing_scheme:
                      type: string
                      description: The identifier for the pricing scheme. See [Product
                        Components](https://help.chargify.com/products/product-components.html)
                        for an overview of pricing schemes.
                      enum:
                      - per_unit
                      - volume
                      - tiered
                      - stairstep
                    prices:
                      type: array
                      description: "(Not required for ‘per_unit’ pricing schemes)
                        One or more price brackets. See [Price Bracket Rules](https://help.chargify.com/products/product-components.html#general-price-bracket-rules)
                        for an overview of how price brackets work for different pricing
                        schemes."
                      items:
                        type: object
                        properties:
                          starting_quantity:
                            type: integer
                          unit_price:
                            type:
                            - string
                            - number
                            description: The price can contain up to 8 decimal places.
                              i.e. 1.00 or 0.0012 or 0.00000065
                    upgrade_charge:
                      type: string
                    downgrade_credit:
                      type: string
                    price_points:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          handle:
                            type: string
                          pricing_scheme:
                            type: string
                          prices:
                            type: array
                            items:
                              type: object
                              properties:
                                starting_quantity:
                                  type: string
                                unit_price:
                                  type:
                                  - string
                                  - number
                                  description: The price can contain up to 8 decimal
                                    places. i.e. 1.00 or 0.0012 or 0.00000065
                    unit_price:
                      type:
                      - string
                      - number
                      description: The amount the customer will be charged per unit
                        when the pricing scheme is “per_unit”. The price can contain
                        up to 8 decimal places. i.e. 1.00 or 0.0012 or 0.00000065
                    tax_code:
                      type: string
                      description: A string representing the tax code related to the
                        component type. This is especially important when using the
                        Avalara service to tax based on locale. This attribute has
                        a max length of 10 characters.
                    hide_date_range_on_invoice:
                      type: boolean
                      description: "(Only available on Relationship Invoicing sites)
                        Boolean flag describing if the service date range should show
                        for the component on generated invoices."
                    price_in_cents:
                      type: string
                      description: deprecated May 2011 - use unit_price instead
                    event_based_billing_metric_id:
                      type: integer
                      description: The ID of an event based billing metric that will
                        be attached to this component.
              required:
              - event_based_component
            type: object
          examples:
            Metered:
              value:
                metered_component:
                  name: Text messages
                  unit_name: text message
                  taxable: false
                  pricing_scheme: stairstep
                  prices:
                  - starting_quantity: 1
                    unit_price: 1
            Quantity Based (per unit):
              value:
                quantity_based_component:
                  name: Quantity Based Component
                  unit_name: Component
                  description: Example of JSON per-unit component example
                  pricing_scheme: per_unit
                  unit_price: '10'
                  taxable: '1'
                  display_on_hosted_page: '1'
                  allow_fractional_quantities: '1'
                  public_signup_page_ids:
                  - '323397'
            Quantity Based (stairstep):
              value:
                quantity_based_component:
                  name: Quantity Based Component
                  unit_name: Quantity Based Component
                  description: Example of JSON stairstep example
                  pricing_scheme: stairstep
                  taxable: '1'
                  prices_attributes:
                  - starting_quantity: '1'
                    ending_quantity: '100'
                    unit_price: '50'
                  - starting_quantity: '101'
                    ending_quantity: '200'
                    unit_price: '10'
                  display_on_hosted_page: '1'
                  allow_fractional_quantities: '1'
                  public_signup_page_ids:
                  - '323397'
            Quantity Based (volume):
              value:
                quantity_based_component:
                  name: Quantity Based Component
                  unit_name: Quantity Based Component
                  description: Example of JSON volume component example
                  pricing_scheme: volume
                  taxable: '1'
                  prices_attributes:
                  - starting_quantity: '1'
                    ending_quantity: '10'
                    unit_price: '10'
                  - starting_quantity: '11'
                    ending_quantity: '20'
                    unit_price: '5'
                  display_on_hosted_page: '1'
                  allow_fractional_quantities: '1'
                  public_signup_page_ids:
                  - '323397'
            Quantity Based (tiered):
              value:
                quantity_based_component:
                  name: Quantity Based Component
                  unit_name: Quantity Based Component
                  description: Example of JSON for tiered quantity based component
                  taxable: '1'
                  pricing_scheme: tiered
                  prices_attributes:
                  - starting_quantity: '1'
                    ending_quantity: '20'
                    unit_price: '50'
                  - starting_quantity: '21'
                    ending_quantity: '40'
                    unit_price: '25'
                  display_on_hosted_page: '1'
                  allow_fractional_quantities: '1'
                  public_signup_page_ids:
                  - '323397'
            On/Off:
              value:
                on_off_component:
                  name: Annual Support Services
                  description: Prepay for support services
                  taxable: '1'
                  price_attributes:
                    unit_price: '100.00'
                    starting_quantity: '0'
                  display_on_hosted_page: '1'
                  public_signup_page_ids:
                  - '320495'
            Prepaid Usage:
              value:
                prepaid_usage_component:
                  name: Minutes
                  unit_name: minutes
                  unit_price: 2
                  pricing_scheme: per_unit
                  rollover_prepaid_remainder: true
                  renew_prepaid_allocation: true
                  expiration_interval: 15
                  expiration_interval_unit: day
                  overage_pricing:
                    pricing_scheme: stairstep
                    prices:
                    - starting_quantity: 1
                      ending_quantity: 100
                      unit_price: 3
                      formatted_unit_price: "$3.00"
                    - starting_quantity: 101
                      unit_price: 5
                      formatted_unit_price: "$5.00"
            On/Off with Price Points:
              value:
                on_off_component:
                  name: Annual Support Services
                  description: Prepay for support services
                  taxable: '1'
                  pricing_scheme: per_unit
                  price_attributes:
                    unit_price: '100.00'
                    starting_quantity: '0'
                  display_on_hosted_page: '1'
                  public_signup_page_ids:
                  - '320495'
                  price_points:
                  - name: Wholesale
                    handle: wholesale-handle
                    pricing_scheme: per_unit
                    prices:
                    - starting_quantity: '0'
                      unit_price: '89.00'
            On/Off with Default Proration Schemes:
              value:
                on_off_component:
                  name: Annual Support Services
                  description: Prepay for support services
                  taxable: '1'
                  price_attributes:
                    unit_price: '100.00'
                    starting_quantity: '0'
                  display_on_hosted_page: '1'
                  public_signup_page_ids:
                  - '320495'
                  upgrade_charge: full
                  downgrade_credit: prorated
            Event Based Component:
              value:
                event_based_component:
                  name: string
                  unit_name: string
                  description: string
                  handle: string
                  taxable: true
                  pricing_scheme: per_unit
                  prices:
                  - starting_quantity: 1
                    unit_price: '0.49'
                    component:
                  event_based_billing_metric_id: integer
      description: ''
"/product_families/{product_family_id}/components/{component_id}.json":
  parameters:
  - schema:
      type: integer
    name: product_family_id
    in: path
    required: true
    description: The Chargify id of the product family to which the component belongs
  - schema:
      type: string
      pattern: "/\\A(?:\\d+|handle:(?:uuid:|[a-z])(?:\\w|-)+)\\z/"
    name: component_id
    in: path
    required: true
    description: Either the Chargify id of the component or the handle for the component
      prefixed with `handle:`
  get:
    summary: Read Component
    tags:
    - Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Component"
            examples:
              Example:
                value:
                  component:
                    id: 399853
                    name: Annual Support Services
                    pricing_scheme:
                    unit_name: on/off
                    unit_price: '100.0'
                    product_family_id: 997233
                    price_per_unit_in_cents:
                    kind: on_off_component
                    archived: false
                    taxable: true
                    description: Prepay for support services
                    default_price_point_id: 121003
                    price_point_count: 4
                    price_points_url: https://general-goods.chargify.com/components/399853/price_points
                    tax_code: D0000000
                    recurring: true
                    upgrade_charge:
                    downgrade_credit:
                    created_at: '2019-08-02T05:54:53-04:00'
                    default_price_point_name: Original
                    product_family_name: Chargify
    operationId: readComponentById
    description: |-
      This request will return information regarding a component from a specific product family.

      You may read the component by either the component's id or handle. When using the handle, it must be prefixed with `handle:`.
  delete:
    summary: Archive Component
    tags:
    - Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Component"
            examples:
              Example:
                value:
                  component:
                    id: 25407138
                    name: cillum aute
                    pricing_scheme: in incididu
                    unit_name: nulla in
                    unit_price: Excepteur veniam
                    product_family_id: -56705047
                    kind: prepaid_usage_component
                    archived: true
                    taxable: false
                    description: reprehenderit laborum qui fugiat
                    default_price_point_id: -64328176
                    price_point_count: 15252407
                    price_points_url: dolor mollit consequat
                    tax_code: ea nisi
                    recurring: false
                    created_at: dolor qui deserunt tempor
                    default_price_point_name: cupidatat Lorem non aliqua
                    product_family_name: do elit
                    hide_date_range_on_invoice: false
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - Component cannot be archived. Please make sure it hasn't already
                    been archived.
    operationId: archiveComponent
    description: Sending a DELETE request to this endpoint will archive the component.
      All current subscribers will be unffected; their subscription/purchase will
      continue to be charged as usual.
"/product_families/{product_family_id}/components.json":
  parameters:
  - schema:
      type: integer
    name: product_family_id
    in: path
    required: true
    description: The Chargify id of the product family
  get:
    summary: List Components for Product Family
    tags:
    - Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Component"
            examples:
              Example:
                value:
                - component:
                    id: 399850
                    name: "$1.00 component"
                    pricing_scheme: per_unit
                    unit_name: Component
                    unit_price: '1.0'
                    product_family_id: 997233
                    price_per_unit_in_cents:
                    kind: quantity_based_component
                    archived: false
                    taxable: false
                    description: Component
                    default_price_point_id: 121000
                    prices:
                    - id: 630687
                      component_id: 399850
                      starting_quantity: 1
                      ending_quantity:
                      unit_price: '1.0'
                      price_point_id: 121000
                      formatted_unit_price: "$1.00"
                    price_point_count: 2
                    price_points_url: https://general-goods.chargify.com/components/399850/price_points
                    tax_code:
                    recurring: true
                    upgrade_charge:
                    downgrade_credit:
                    created_at: '2019-08-01T09:35:38-04:00'
                    default_price_point_name: Original
                    product_family_name: Chargify
                    use_site_exchange_rate: true
                - component:
                    id: 399853
                    name: Annual Support Services
                    pricing_scheme:
                    unit_name: on/off
                    unit_price: '100.0'
                    product_family_id: 997233
                    price_per_unit_in_cents:
                    kind: on_off_component
                    archived: false
                    taxable: true
                    description: Prepay for support services
                    default_price_point_id: 121003
                    price_point_count: 4
                    price_points_url: https://general-goods.chargify.com/components/399853/price_points
                    tax_code: D0000000
                    recurring: true
                    upgrade_charge:
                    downgrade_credit:
                    created_at: '2019-08-01T09:35:37-04:00'
                    default_price_point_name: Original
                    product_family_name: Chargify
                    use_site_exchange_rate: true
                - component:
                    id: 386937
                    name: Cancellation fee
                    pricing_scheme:
                    unit_name: on/off
                    unit_price: '35.0'
                    product_family_id: 997233
                    price_per_unit_in_cents:
                    kind: on_off_component
                    archived: false
                    taxable: false
                    description: ''
                    default_price_point_id: 108307
                    price_point_count: 1
                    price_points_url: https://general-goods.chargify.com/components/386937/price_points
                    tax_code:
                    recurring: true
                    upgrade_charge:
                    downgrade_credit:
                    created_at: '2019-08-01T09:35:38-04:00'
                    default_price_point_name: Original
                    product_family_name: Chargify
                    use_site_exchange_rate: true
    operationId: listComponentsForProductFamily
    description: This request will return a list of components for a particular product
      family.
    parameters:
    - schema:
        type: boolean
      in: query
      name: include_archived
      description: Include archived items.
    - schema:
        type: string
        example: filter[ids]=1,2
      in: query
      description: Allows fetching components with matching id based on provided value.
      name: filter[ids]
    - schema:
        type: string
        maxLength: 200
        example: per_page=50
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
        Default value is 20. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200.
    - schema:
        type: string
        example: page=2
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: string
        enum:
        - updated_at
        - created_at
        example: date_field=created_at
      in: query
      name: date_field
      description: The type of filter you would like to apply to your search.
    - schema:
        type: string
      in: query
      name: end_date
      description: The end date (format YYYY-MM-DD) with which to filter the date_field.
        Returns components with a timestamp up to and including 11:59:59PM in your
        site’s time zone on the date specified.
    - schema:
        type: string
      in: query
      name: end_datetime
      description: The end date and time (format YYYY-MM-DD HH:MM:SS) with which to
        filter the date_field. Returns components with a timestamp at or before exact
        time provided in query. You can specify timezone in query - otherwise your
        site's time zone will be used. If provided, this parameter will be used instead
        of end_date. optional.
    - schema:
        type: string
      in: query
      name: start_date
      description: The start date (format YYYY-MM-DD) with which to filter the date_field.
        Returns components with a timestamp at or after midnight (12:00:00 AM) in
        your site’s time zone on the date specified.
    - schema:
        type: string
      in: query
      name: start_datetime
      description: The start date and time (format YYYY-MM-DD HH:MM:SS) with which
        to filter the date_field. Returns components with a timestamp at or after
        exact time provided in query. You can specify timezone in query - otherwise
        your site's time zone will be used. If provided, this parameter will be used
        instead of start_date.
    - schema:
        type: boolean
        example: filter[use_site_exchange_rate]=true
      in: query
      description: Allows fetching components with matching use_site_exchange_rate
        based on provided value (refers to default price point).
      name: filter[use_site_exchange_rate]
"/product_families/{product_family_id}/products.json":
  parameters:
  - schema:
      type: integer
    name: product_family_id
    in: path
    required: true
    description: The Chargify id of the product family to which the product belongs
  post:
    summary: Create Product
    tags:
    - Products
    responses:
      '200':
        description: OK
        content:
          application/json:
            examples:
              Example:
                value:
                  product:
                    id: 4364984
                    name: Gold Plan
                    handle: gold
                    description: This is our gold plan.
                    accounting_code: '123'
                    request_credit_card: true
                    expiration_interval:
                    expiration_interval_unit:
                    created_at: '2016-11-04T16:31:15-04:00'
                    updated_at: '2016-11-04T16:31:15-04:00'
                    price_in_cents: 1000
                    interval: 1
                    interval_unit: month
                    initial_charge_in_cents:
                    trial_price_in_cents:
                    trial_interval:
                    trial_interval_unit:
                    archived_at:
                    require_credit_card: true
                    return_params:
                    taxable: false
                    update_return_url:
                    initial_charge_after_trial: false
                    version_number: 1
                    update_return_params:
                    product_family:
                      id: 527890
                      name: Acme Projects
                      description: ''
                      handle: billing-plans
                      accounting_code:
                    public_signup_pages:
                    - id: 301078
                      return_url:
                      return_params:
                      url: https://general-goods.chargify.com/subscribe/ftgbpq7f5qpr/gold
                    product_price_point_name: Default
            schema:
              type: object
              properties:
                product:
                  "$ref": "../models/Product.yaml"
    operationId: createProduct
    description: |-
      Use this method to create a product within your Chargify site.

      + [Products Documentation](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405561405709)
      + [Changing a Subscription's Product](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404225334669-Product-Changes-Migrations)
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              product:
                "$ref": "#/components/schemas/Create-or-Update-Product"
          examples:
            Example:
              value:
                product:
                  name: Gold Plan
                  handle: gold
                  description: This is our gold plan.
                  accounting_code: '123'
                  require_credit_card: true
                  price_in_cents: 1000
                  interval: 1
                  interval_unit: month
                  auto_create_signup_page: true
                  tax_code: D0000000
  get:
    summary: List Products for Product Family
    operationId: listProductsForProductFamily
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  product:
                    "$ref": "../models/Product.yaml"
            examples:
              Example:
                value:
                - product:
                    id: 3801242
                    name: Free product
                    handle: zero-dollar-product
                    description: ''
                    accounting_code: ''
                    request_credit_card: true
                    expiration_interval:
                    expiration_interval_unit: never
                    created_at: '2016-04-21T16:08:39-04:00'
                    updated_at: '2016-08-03T11:27:53-04:00'
                    price_in_cents: 10000
                    interval: 1
                    interval_unit: month
                    initial_charge_in_cents: 0
                    trial_price_in_cents:
                    trial_interval:
                    trial_interval_unit: month
                    archived_at:
                    require_credit_card: false
                    return_params: ''
                    taxable: false
                    update_return_url: ''
                    initial_charge_after_trial: false
                    version_number: 4
                    update_return_params: ''
                    product_family:
                      id: 527890
                      name: Acme Projects
                      description: ''
                      handle: billing-plans
                      accounting_code:
                    public_signup_pages:
                    - id: 283460
                      return_url:
                      return_params: ''
                      url: https://general-goods.chargify.com/subscribe/smcc4j3d2w6h/zero-dollar-product
                    product_price_point_name: Default
                    use_site_exchange_rate: true
                - product:
                    id: 3858146
                    name: Calendar Billing Product
                    handle: calendar-billing-product
                    description: ''
                    accounting_code: ''
                    request_credit_card: true
                    expiration_interval:
                    expiration_interval_unit: never
                    created_at: '2016-07-05T13:07:38-04:00'
                    updated_at: '2016-07-05T13:07:38-04:00'
                    price_in_cents: 10000
                    interval: 1
                    interval_unit: month
                    initial_charge_in_cents:
                    trial_price_in_cents:
                    trial_interval:
                    trial_interval_unit: month
                    archived_at:
                    require_credit_card: true
                    return_params: ''
                    taxable: false
                    update_return_url: ''
                    initial_charge_after_trial: false
                    version_number: 1
                    update_return_params: ''
                    product_family:
                      id: 527890
                      name: Acme Projects
                      description: ''
                      handle: billing-plans
                      accounting_code:
                    public_signup_pages:
                    - id: 289193
                      return_url: ''
                      return_params: ''
                      url: https://general-goods.chargify.com/subscribe/gxdbfxzxhcjq/calendar-billing-product
                    product_price_point_name: Default
                    use_site_exchange_rate: true
      '404':
        description: Not Found
        content:
          application/json:
            schema:
              type: string
            examples:
              Example:
                value: A valid product_family_id is required
    description: This method allows to retrieve a list of Products belonging to a
      Product Family.
    parameters:
    - schema:
        type: integer
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        default: 20
        maximum: 200
      in: query
      name: per_page
      description: " This parameter indicates how many records to fetch in each request.
        Default value is 20. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200."
    - schema:
        type: string
        enum:
        - created_at
        - updated_at
      in: query
      name: date_field
      description: The type of filter you would like to apply to your search.
    - schema:
        type: string
      in: query
      name: start_date
      description: The start date (format YYYY-MM-DD) with which to filter the date_field.
        Returns products with a timestamp at or after midnight (12:00:00 AM) in your
        site’s time zone on the date specified.
    - schema:
        type: string
      in: query
      name: end_date
      description: The end date (format YYYY-MM-DD) with which to filter the date_field.
        Returns products with a timestamp up to and including 11:59:59PM in your site’s
        time zone on the date specified.
    - schema:
        type: string
      in: query
      name: start_datetime
      description: The start date and time (format YYYY-MM-DD HH:MM:SS) with which
        to filter the date_field. Returns products with a timestamp at or after exact
        time provided in query. You can specify timezone in query - otherwise your
        site's time zone will be used. If provided, this parameter will be used instead
        of start_date.
    - schema:
        type: string
      in: query
      name: end_datetime
      description: The end date and time (format YYYY-MM-DD HH:MM:SS) with which to
        filter the date_field. Returns products with a timestamp at or before exact
        time provided in query. You can specify timezone in query - otherwise your
        site's time zone will be used. If provided, this parameter will be used instead
        of end_date.
    - schema:
        type: boolean
      in: query
      name: include_archived
      description: Include archived products
    - schema:
        type: string
        example: include=prepaid_product_price_point
        enum:
        - prepaid_product_price_point
      in: query
      name: include
      description: Allows including additional data in the response.
    - schema:
        type: string
        enum:
        - 'null'
        - not_null
        example: include=prepaid_product_price_point&filter[prepaid_product_price_point][product_price_point_id]=not_null
      in: query
      name: filter[prepaid_product_price_point][product_price_point_id]
      description: Allows fetching products only if a prepaid product price point
        is present or not. To use this filter you also have to include the following
        param in the request `include=prepaid_product_price_point`.
    - schema:
        type: boolean
        example: filter[use_site_exchange_rate]=true
      in: query
      name: filter[use_site_exchange_rate]
      description: Allows fetching products with matching use_site_exchange_rate based
        on provided value (refers to default price point).
    tags:
    - Product Families
"/product_families/{id}.json":
  parameters:
  - schema:
      type: integer
    name: id
    in: path
    required: true
    description: The Chargify id of the product family
  get:
    summary: Read Product Family
    tags:
    - Product Families
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                product_family:
                  "$ref": "../models/Product-Family.yaml"
            examples:
              Example:
                value:
                  product_family:
                    id: 527890
                    name: Acme Projects
                    description: ''
                    handle: billing-plans
                    accounting_code:
    operationId: readProductFamily
    description: |-
      This method allows to retrieve a Product Family via the `product_family_id`. The response will contain a Product Family object.

      The product family can be specified either with the id number, or with the `handle:my-family` format.
