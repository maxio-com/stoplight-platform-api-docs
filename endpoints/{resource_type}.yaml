---
"/{resource_type}/metafields.json":
  parameters:
  - schema:
      type: string
      enum:
      - subscriptions
      - customers
    name: resource_type
    in: path
    required: true
    description: the resource type to which the metafields belong
  post:
    summary: Create Metafields
    tags:
    - Custom Fields
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Metafield"
            examples:
              Example:
                value:
                - name: Color
                  scope:
                    hosted: []
                    csv: '0'
                    statements: '0'
                    invoices: '0'
                    portal: '0'
                  data_count: 0
                  input_type: text
                  enum:
                - name: Brand
                  scope:
                    hosted: []
                    csv: '0'
                    statements: '0'
                    invoices: '0'
                    portal: '0'
                  data_count: 0
                  input_type: text
                  enum:
    operationId: createMetafields
    description: |-
      ## Custom Fields: Metafield Intro

      **Chargify refers to Custom Fields in the API documentation as metafields and metadata.** Within the Chargify UI, metadata and metafields are grouped together under the umbrella of "Custom Fields." All of our UI-based documentation that references custom fields will not cite the terminology metafields or metadata.

      + **Metafield is the custom field**
      + **Metadata is the data populating the custom field.**

      Chargify Metafields are used to add meaningful attributes to subscription and customer resources. Full documentation on how to create Custom Fields in the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405332553613-Custom-Fields-Reference). For additional documentation on how to record data within custom fields, please see our subscription-based documentation [here.](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404434903181-Subscription-Summary#custom-fields)

      Metafield are the place where you will set up your resource to accept additional data. It is scoped to the site instead of a specific customer or subscription. Think of it as the key, and Metadata as the value on every record.

      ## Create Metafields

      Use this endpoint to create metafields for your Site. Metafields can be populated with metadata after the fact.

      Each site is limited to 100 unique Metafields (i.e. keys, or names) per resource. This means you can have 100 Metafields for Subscription and another 100 for Customer.

      ### Metafields "On-the-Fly"

      It is possible to create Metafields “on the fly” when you create your Metadata – if a non-existant name is passed when creating Metadata, a Metafield for that key will be automatically created. The Metafield API, however, gives you more control over your “keys”.

      ### Metafield Scope Warning

      If configuring metafields in the Admin UI or via the API, be careful sending updates to metafields with the scope attribute – **if a partial update is sent it will overwrite the current configuration**.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              metafields:
                anyOf:
                - "$ref": "#/components/schemas/Create-Metafield"
                - type: array
                  items:
                    "$ref": "#/components/schemas/Create-Metafield"
          examples:
            Single-Metafield:
              value:
                metafields:
                  name: Dropdown field
                  input_type: dropdown
                  enum:
                  - option 1
                  - option 2
                  scope:
                    public_edit: '1'
                    public_show: '1'
            Multiple-Metafields:
              value:
                metafields:
                - name: Color
                - name: Brand
    parameters: []
  get:
    summary: List Metafields
    tags:
    - Custom Fields
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                total_count:
                  type: integer
                current_page:
                  type: integer
                total_pages:
                  type: integer
                per_page:
                  type: integer
                metafields:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Metafield"
            examples:
              example-1:
                value:
                  total_count: 0
                  current_page: 0
                  total_pages: 0
                  per_page: 0
                  metafields:
                  - id: 0
                    name: string
                    scope:
                      hosted:
                      - {}
                      csv: string
                      statements: string
                      invoices: string
                      portal: string
                      public_show: string
                      public_edit: string
                    data_count: 0
                    input_type: string
                    enum:
    operationId: listMetafields
    description: This endpoint lists metafields associated with a site. The metafield
      description and usage is contained in the response.
    parameters:
    - schema:
        type: string
      in: query
      name: name
      description: filter by the name of the metafield
    - schema:
        type: integer
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        default: 20
        maximum: 200
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
        Default value is 20. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200.
    - schema:
        type: string
        default: asc
        enum:
        - asc
        - desc
      in: query
      name: direction
      description: Controls the order in which results are returned.
  put:
    summary: Update Metafield
    tags:
    - Custom Fields
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Metafield"
    operationId: updateMetafield
    description: Use the following method to update metafields for your Site. Metafields
      can be populated with metadata after the fact.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              metafields:
                oneOf:
                - "$ref": "#/components/schemas/Update-Metafield"
                - type: array
                  items:
                    "$ref": "#/components/schemas/Update-Metafield"
      description: ''
    parameters:
    - schema:
        type: string
      in: query
      name: name
      required: true
    - schema:
        type: string
      in: query
      name: current_name
      description: This only applies when you are updating an existing record and
        you wish to rename the field. Note you must supply name and current_name to
        rename the field
  delete:
    tags:
    - Custom Fields
    summary: Delete Metafield
    operationId: deleteMetafield
    responses:
      '200':
        description: OK
      '404':
        description: Not Found
    description: |-
      Use the following method to delete a metafield. This will remove the metafield from the Site.

      Additionally, this will remove the metafield and associated metadata with all Subscriptions on the Site.
    parameters:
    - schema:
        type: string
      in: query
      name: name
      description: The name of the metafield to be deleted
"/{resource_type}/{resource_id}/metadata.json":
  parameters:
  - schema:
      type: string
      enum:
      - customers
      - subscriptions
    name: resource_type
    in: path
    required: true
  - schema:
      type: string
    name: resource_id
    in: path
    required: true
    description: The Chargify id of the customer or the subscription for which the
      metadata applies
  post:
    summary: Create Metadata
    tags:
    - Custom Fields
    operationId: createMetadata
    description: |-
      ## Custom Fields: Metadata Intro

      **Chargify refers to Custom Fields in the API documentation as metafields and metadata.** Within the Chargify UI, metadata and metafields are grouped together under the umbrella of "Custom Fields." All of our UI-based documentation that references custom fields will not cite the terminology metafields or metadata.

      + **Metafield is the custom field**
      + **Metadata is the data populating the custom field.**

      Chargify Metafields are used to add meaningful attributes to subscription and customer resources. Full documentation on how to create Custom Fields in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407659856411). For additional documentation on how to record data within custom fields, please see our subscription-based documentation [here.](https://chargify.zendesk.com/hc/en-us/articles/4407884887835#custom-fields)

      Metadata is associated to a customer or subscription, and corresponds to a Metafield. When creating a new metadata object for a given record, **if the metafield is not present it will be created**.

      ## Metadata limits

      Metadata values are limited to 2kB in size. Additonally, there are limits on the number of unique metafields available per resource.

      ## Create Metadata

      This method will create a metafield for the site on the fly if it does not already exist, and populate the metadata value.

      ### Subscription or Customer Resource

      Please pay special attention to the resource you use when creating metadata.
    parameters:
    - schema:
        type: string
      in: query
      name: value
      description: Can be a single item or a list of metadata
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
          examples:
            Example:
              value:
                metadata:
                - name: Color
                  value: Blue
                - name: Something
                  value: Useful
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Metadata"
  get:
    summary: List Metadata
    tags:
    - Custom Fields
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Paginated-Metadata"
    operationId: readMetadata
    description: |-
      This request will list all of the metadata belonging to a particular resource (ie. subscription, customer) that is specified.

      ## Metadata Data

      This endpoint will also display the current stats of your metadata to use as a tool for pagination.
    parameters:
    - schema:
        type: integer
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        default: 20
        maximum: 200
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
        Default value is 20. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200.
  put:
    summary: Update Metadata
    tags:
    - Custom Fields
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Metadata"
    operationId: updateMetadata
    parameters:
    - schema:
        type: string
      in: query
      name: value
      description: Can be a single item or a list of metadata
    description: This method allows you to update the existing metadata associated
      with a subscription or customer.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              metadata:
                type: object
                properties:
                  current_name:
                    type: string
                  name:
                    type: string
                  value:
                    type: string
  delete:
    summary: Delete Metadata
    tags:
    - Custom Fields
    responses:
      '200':
        description: OK
      '404':
        description: Not Found
    operationId: deleteMetadata
    description: |-
      This method removes the metadata from the subscriber/customer cited.

      ## Query String Usage

      For instance if you wanted to delete the metadata for customer 99 named weight you would request:

      ```
      https://acme.chargify.com/customers/99/metadata.json?name=weight
      ```

      If you want to delete multiple metadata fields for a customer 99 named: `weight` and `age` you wrould request:
      ```
      https://acme.chargify.com/customers/99/metadata.json?names[]=weight&names[]=age
      ```

      ## Successful Response

      For a success, there will be a code `200` and the plain text response `true`.

      ## Unsuccessful Response

      When a failed response is encountered, you will receive a `404` response and the plain text response of `true`.
    parameters:
    - schema:
        type: string
      in: query
      name: name
    - schema:
        type: array
      in: query
      name: names[]
"/{resource_type}/metadata.json":
  parameters:
  - schema:
      type: string
    name: resource_type
    in: path
    required: true
  get:
    summary: List Metadata for Resource Type
    tags:
    - Custom Fields
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Paginated-Metadata"
    operationId: listMetadata
    description: |-
      This method will provide you information on usage of metadata across your selected resource (ie. subscriptions, customers)

      ## Metadata Data

      This endpoint will also display the current stats of your metadata to use as a tool for pagination.

      ### Metadata for multiple records

      `https://acme.chargify.com/subscriptions/metadata.json?resource_ids[]=1&resource_ids[]=2`

      ## Read Metadata for a Site

      This endpoint will list the number of pages of metadata information that are contained within a site.
    parameters:
    - schema:
        type: integer
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        default: 20
        maximum: 200
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
        Default value is 20. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200.
    - schema:
        type: string
        enum:
        - created_at
        - updated_at
      in: query
      name: date_field
      description: The type of filter you would like to apply to your search.
    - schema:
        type: string
      in: query
      name: start_date
      description: The start date (format YYYY-MM-DD) with which to filter the date_field.
        Returns metadata with a timestamp at or after midnight (12:00:00 AM) in your
        site’s time zone on the date specified.
    - schema:
        type: string
      in: query
      name: end_date
      description: The end date (format YYYY-MM-DD) with which to filter the date_field.
        Returns metadata with a timestamp up to and including 11:59:59PM in your site’s
        time zone on the date specified.
    - schema:
        type: string
      in: query
      name: start_datetime
      description: The start date and time (format YYYY-MM-DD HH:MM:SS) with which
        to filter the date_field. Returns metadata with a timestamp at or after exact
        time provided in query. You can specify timezone in query - otherwise your
        site's time zone will be used. If provided, this parameter will be used instead
        of start_date.
    - schema:
        type: string
      in: query
      name: end_datetime
      description: The end date and time (format YYYY-MM-DD HH:MM:SS) with which to
        filter the date_field. Returns metadata with a timestamp at or before exact
        time provided in query. You can specify timezone in query - otherwise your
        site's time zone will be used. If provided, this parameter will be used instead
        of end_date.
    - schema:
        type: boolean
      in: query
      name: with_deleted
      description: 'Allow to fetch deleted metadata. '
    - schema:
        type: array
        maxItems: 50
      in: query
      name: resource_ids[]
      description: Allow to fetch metadata for multiple records based on provided
        ids.
    - schema:
        type: string
        enum:
        - asc
        - desc
        default: asc
      in: query
      name: direction
      description: Controls the order in which results are returned.
