---
"/subscriptions/{subscription_id}/notes.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Create Subscription Note
    operationId: createSubscriptionNote
    tags:
    - Subscription Notes
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  "$ref": "#/components/schemas/Subscription-Note"
              required:
              - note
    description: |-
      Use the following method to create a note for a subscription.

      ## How to Use Subscription Notes

      Notes allow you to record information about a particular Subscription in a free text format.

      If you have structured data such as birth date, color, etc., consider using Metadata instead.

      Full documentation on how to use Notes in the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404434903181-Subscription-Summary#notes).
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              note:
                "$ref": "#/components/schemas/Create-or-Update-Subscription-Note"
          examples:
            Example:
              value:
                note:
                  body: New test note.
                  sticky: true
  delete:
    summary: Delete Subscription Note
    operationId: deleteSubscriptionNote
    tags:
    - Subscription Notes
    responses:
      '200':
        description: OK
      '422':
        description: Unprocessable Entity (WebDAV)
    description: Use the following method to delete a note for a Subscription.
  get:
    summary: List Subscription Notes
    tags:
    - Subscription Notes
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  note:
                    "$ref": "#/components/schemas/Subscription-Note"
            examples:
              Example:
                value:
                - note:
                    body: Test note.
                    created_at: '2015-06-15T13:26:47-04:00'
                    id: 5
                    sticky: false
                    subscription_id: 100046
                    updated_at: '2015-06-15T13:28:12-04:00'
                - note:
                    body: Another test note.
                    created_at: '2015-06-15T12:04:46-04:00'
                    id: 4
                    sticky: false
                    subscription_id: 100046
                    updated_at: '2015-06-15T13:26:33-04:00'
    operationId: listSubscriptionNotes
    description: Use this method to retrieve a list of Notes associated with a Subscription.
      The response will be an array of Notes.
    parameters:
    - schema:
        type: integer
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        maximum: 200
        default: 20
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
"/subscriptions/{subscription_id}/notes/{note_id}.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription associated with the note
  - schema:
      type: string
    name: note_id
    in: path
    required: true
    description: The Chargify id of the note
  get:
    summary: Read Subscription Note
    tags:
    - Subscription Notes
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  "$ref": "#/components/schemas/Subscription-Note"
            examples:
              Example:
                value:
                  note:
                    body: Test note.
                    created_at: '2015-06-15T13:26:47-04:00'
                    id: 5
                    sticky: false
                    subscription_id: 100046
                    updated_at: '2015-06-15T13:28:12-04:00'
    operationId: readSubscriptionNote
    description: Once you have obtained the ID of the note you wish to read, use this
      method to show a particular note attached to a subscription.
  put:
    summary: Update Subscription Note
    tags:
    - Subscription Notes
    operationId: updateSubscriptionNote
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  "$ref": "#/components/schemas/Subscription-Note"
    description: Use the following method to update a note for a Subscription.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              note:
                "$ref": "#/components/schemas/Create-or-Update-Subscription-Note"
            required:
            - note
          examples:
            Example:
              value:
                note:
                  body: Modified test note.
                  sticky: true
"/subscriptions/{subscription_id}/events.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  get:
    summary: List Events for Subscription
    tags:
    - Events
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Event"
            examples:
              Example:
                value:
                - event:
                    id: 344799837
                    key: statement_settled
                    message: Statement 79702531 settled successfully for Amelia Example's
                      subscription to Basic Plan
                    subscription_id: 14900541
                    created_at: '2016-11-01T12:41:29-04:00'
                    event_specific_data:
                - event:
                    id: 344799815
                    key: renewal_success
                    message: Successful renewal for Amelia Example's subscription
                      to Basic Plan
                    subscription_id: 14900541
                    created_at: '2016-11-01T12:41:28-04:00'
                    event_specific_data:
                      product_id: 3792003
                      account_transaction_id:
                - event:
                    id: 344799705
                    key: billing_date_change
                    message: Billing date changed on Amelia Example's subscription
                      to Basic Plan from 11/26/2016 to 11/01/2016
                    subscription_id: 14900541
                    created_at: '2016-11-01T12:41:25-04:00'
                    event_specific_data:
    operationId: listSubscriptionEvents
    description: |-
      The following request will return a list of events for a subscription.

      Each event type has its own `event_specific_data` specified.
    parameters:
    - schema:
        type: integer
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        default: 20
        maximum: 200
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
        Default value is 20. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200.
    - schema:
        type: integer
      in: query
      name: since_id
    - schema:
        type: integer
      in: query
      name: max_id
    - schema:
        type: string
        enum:
        - asc
        - desc
        default: desc
      in: query
      name: direction
    - schema:
        type: string
        enum:
        - account_transaction_changed
        - billing_date_change
        - component_allocation_change
        - customer_update
        - customer_create
        - dunning_step_reached
        - expiration_date_change
        - expiring_card
        - metered_usage
        - payment_success
        - payment_success_recreated
        - payment_failure
        - payment_failure_recreated
        - refund_failure
        - refund_success
        - renewal_success
        - renewal_success_recreated
        - renewal_failure
        - signup_success
        - signup_failure
        - statement_closed
        - statement_settled
        - subscription_bank_account_update
        - subscription_deletion
        - subscription_paypal_account_update
        - subscription_product_change
        - subscription_state_change
        - trial_end_notice
        - upgrade_downgrade_success
        - upgrade_downgrade_failure
        - upcoming_renewal_notice
        - subscription_prepayment_account_balance_changed
        - subscription_service_credit_account_balance_changed
      in: query
      name: filter
      description: 'You can pass multiple event keys after comma. Example: /events.json?filter=signup_success,payment_success'
"/subscriptions/{subscription_id}/payment_profiles/{payment_profile_id}.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription to which the payment profile
      belongs
  - schema:
      type: integer
    name: payment_profile_id
    in: path
    required: true
    description: The Chargify id of the payment profile
  delete:
    summary: Delete Subscription Payment Profile
    responses:
      '204':
        description: No Content
    operationId: deleteSubscriptionsPaymentProfile
    description: |-
      This will delete a payment profile belonging to the customer on the subscription.

      + If the customer has multiple subscriptions, the payment profile will be removed from all of them.

      + If you delete the default payment profile for a subscription, you will need to specify another payment profile to be the default through the api, or either prompt the user to enter a card in the billing portal or on the self-service page, or visit the Payment Details tab on the subscription in the Admin UI and use the “Add New Credit Card” or “Make Active Payment Method” link, (depending on whether there are other cards present).
    tags:
    - Payment Profiles
"/subscriptions/{subscription_id}/payments.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Create Bulk Payment
    tags:
    - Invoices
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                paid_invoices:
                  type: array
                  items:
                    type: object
                    properties:
                      invoice_uid:
                        type: string
                        description: 'The uid of the paid invoice

                          '
                      status:
                        type: string
                        description: The status of the invoice
                        enum:
                        - open
                        - paid
                      due_amount:
                        type: string
                        description: 'The remaining due amount on the invoice

                          '
                      paid_amount:
                        type: string
                        description: The total amount paid on this invoice (including
                          any prior payments)
                prepayment:
                  type: object
                  properties:
                    subscription_id:
                      type: string
                      description: The subscription id for the prepayment account
                    amount_in_cents:
                      type: string
                      description: The amount in cents of the prepayment that was
                        created as a result of this payment.
                    ending_balance_in_cents:
                      type: string
                      description: The total balance of the prepayment account for
                        this subscription including any prior prepayments
            examples:
              Example:
                value:
                  paid_invoices:
                  - invoice_uid: xyz_012345678
                    status: paid
                    due_amount: '0.0'
                    paid_amount: '50.0'
                  - invoice_uid: xyz_012345678
                    status: paid
                    due_amount: '0.0'
                    paid_amount: '50.0'
                  prepayment:
                    subscription_id: '123456'
                    amount_in_cents: '5000'
                    ending_balance_in_cents: '5000'
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - Payment amount, details, method, and memo must be present
                  - Payment amount, details, method, and memo must valid
                  - Payment amount must be greater than zero
                  - If in a group, the Subscription must be the primary
    operationId: recordPaymentForSubscription
    description: |-
      Record an external payment made against a subscription that will pay partially or in full one or more invoices.

      Payment will be applied starting with the oldest open invoice and then next oldest, and so on until the amount of the payment is fully consumed.

      Excess payment will result in the creation of a prepayment on the Invoice Account.

      Only ungrouped or primary subscriptions may be paid using the "bulk" payment request.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              payment:
                type: object
                required:
                - amount
                - memo
                - payment_details
                - payment_method
                properties:
                  amount:
                    type: string
                  memo:
                    type: string
                  payment_details:
                    type: string
                  payment_method:
                    type: string
            required:
            - payment
          examples:
            Example:
              value:
                payment:
                  amount: '10.0'
                  memo: to pay the bills
                  payment_details: check number 8675309
                  payment_method: check
"/subscriptions/{subscription_id}/account_balances.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  get:
    summary: Read Account Balances
    tags:
    - Subscription Invoice Account
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                open_invoices:
                  type: object
                  properties:
                    balance_in_cents:
                      type: integer
                      description: The balance, in cents, of the sum of the subscription's  open,
                        payable invoices.
                pending_discounts:
                  type: object
                  properties:
                    balance_in_cents:
                      type: integer
                      description: The balance, in cents, of the subscription's Pending
                        Discount account.
                service_credits:
                  type: object
                  properties:
                    balance_in_cents:
                      type: integer
                      description: The balance, in cents, of the subscription's Service
                        Credit account.
                prepayments:
                  type: object
                  properties:
                    balance_in_cents:
                      type: integer
                      description: The balance, in cents, of the subscription's Prepayment
                        account.
    operationId: readAccountBalances
    description: Returns the `balance_in_cents` of the Subscription's Pending Discount,
      Service Credit, and Prepayment accounts, as well as the sum of the Subscription's
      open, payable invoices.
"/subscriptions/{subscription_id}/components/{component_id}.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  - schema:
      type: integer
    name: component_id
    in: path
    required: true
    description: The Chargify id of the component. Alternatively, the component's
      handle prefixed by `handle:`
  get:
    summary: Read Subscription Component
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                component:
                  "$ref": "#/components/schemas/Subscriptions-Component"
            examples:
              Example:
                value:
                  component:
                    component_id: 193028
                    subscription_id: 14593192
                    allocated_quantity: 1
                    pricing_scheme: per_unit
                    name: Users
                    kind: quantity_based_component
                    unit_name: Users
                    price_point_id: 1
                    price_point_handle: top-tier
                    enabled: true
      '404':
        description: Not Found
    operationId: readSubscriptionComponent
    description: This request will list information regarding a specific component
      owned by a subscription.
"/subscriptions/{subscription_id}/components.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  get:
    summary: List Subscription Components
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  component:
                    "$ref": "#/components/schemas/Subscriptions-Component"
            examples:
              example-1:
                value:
                - component:
                    component_id: 0
                    subscription_id: 0
                    allocated_quantity: 0
                    pricing_scheme: string
                    name: string
                    kind: string
                    unit_name: string
                    price_point_id: 0
                    price_point_handle: string
                    price_point_type: default
                    price_point_name: string
                    enabled: true
                    unit_balance: 0
                    id: 0
                    created_at: string
                    updated_at: string
                    component_handle: string
                    archived_at: string
    operationId: listSubscriptionComponents
    description: |-
      This request will list a subscription's applied components.

      ## Archived Components

      When requesting to list components for a given subscription, if the subscription contains **archived** components they will be listed in the server response.
    parameters:
    - schema:
        type: string
        example: date_field=updated_at
        enum:
        - updated_at
      in: query
      name: date_field
      description: The type of filter you'd like to apply to your search.
    - schema:
        type: string
        enum:
        - asc
        - desc
        example: direction=asc
      in: query
      name: direction
      description: Controls the order in which results are returned.
    - schema:
        type: string
      in: query
      name: end_date
      description: The end date (format YYYY-MM-DD) with which to filter the date_field.
        Returns components with a timestamp up to and including 11:59:59PM in your
        site’s time zone on the date specified.
    - schema:
        type: string
      in: query
      description: The end date and time (format YYYY-MM-DD HH:MM:SS) with which to
        filter the date_field. Returns components with a timestamp at or before exact
        time provided in query. You can specify timezone in query - otherwise your
        site''s time zone will be used. If provided, this parameter will be used instead
        of end_date.
      name: end_datetime
    - schema:
        type: string
        enum:
        - not_null
        example: price_point_ids=not_null
      in: query
      name: price_point_ids
      description: Allows fetching components allocation only if price point id is
        present.
    - schema:
        type: array
        example: product_family_ids=1,2,3
      in: query
      description: Allows fetching components allocation with matching product family
        id based on provided ids.
      name: product_family_ids
    - schema:
        type: string
        enum:
        - id
        - updated_at
        example: sort=updated_at
      in: query
      name: sort
      description: The attribute by which to sort.
    - schema:
        type: string
      in: query
      name: start_date
      description: The start date (format YYYY-MM-DD) with which to filter the date_field.
        Returns components with a timestamp at or after midnight (12:00:00 AM) in
        your site’s time zone on the date specified.
    - schema:
        type: string
      in: query
      name: start_datetime
      description: The start date and time (format YYYY-MM-DD HH:MM:SS) with which
        to filter the date_field. Returns components with a timestamp at or after
        exact time provided in query. You can specify timezone in query - otherwise
        your site''s time zone will be used. If provided, this parameter will be used
        instead of start_date.
    - schema:
        type: string
        enum:
        - subscription
        example: include=subscription
      in: query
      description: Allows including additional data in the response.
      name: include
    - schema:
        type: boolean
        example: filter[use_site_exchange_rate]=true
        enum:
        - 'true'
        - 'false'
      in: query
      description: Allows fetching components allocation with matching use_site_exchange_rate
        based on provided value.
      name: filter[use_site_exchange_rate]
    - schema:
        type: string
        example: filter[currencies]=USD,EUR
      in: query
      description: Allows fetching components allocation with matching currency based
        on provided values.
      name: filter[currencies]
"/subscriptions/{subscription_id}/price_points.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Bulk Update Subscription Components' Price Points
    tags:
    - Subscription Components
    operationId: updateSubscriptionComponentsPricePoints
    description: |-
      Updates the price points on one or more of a subscription's components.

      The `price_point` key can take either a:
      1. Price point id (integer)
      2. Price point handle (string)
      3. `"_default"` string, which will reset the price point to the component's current default price point.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              components:
                type: array
                items:
                  type: object
                  properties:
                    component_id:
                      type: integer
                    price_point:
                      type:
                      - string
                      - integer
          examples:
            Example:
              value:
                components:
                - component_id: 997
                  price_point: 1022
                - component_id: 998
                  price_point: wholesale-handle
                - component_id: 999
                  price_point: _default
      description: ''
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                components:
                  type: array
                  items:
                    type: object
                    properties:
                      component_id:
                        type: integer
                      price_point:
                        type: integer
            examples:
              Example:
                value:
                  components:
                  - component_id: 123
                    price_point: 456
                  - component_id: 789
                    price_point: 987
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  errors:
                  - component_id: 6474
                    price_point: 12140
                    message: Price Point does not belong to Component
              properties:
                errors:
                  type: array
                  items:
                    type: object
                    properties:
                      component_id:
                        type: number
                      price_point:
                        type: number
                      message:
                        type: string
            examples:
              Example:
                value:
                  errors:
                  - component_id: 6474
                    price_point: 12140
                    message: Price Point does not belong to Component
"/subscriptions/{subscription_id}/price_points/reset.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Bulk Reset Subscription Components' Price Points
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                subscription:
                  "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: -80293620
                    state: mollit exercitation ipsum
                    trial_started_at:
                    trial_ended_at:
                    activated_at: nostrud nulla et
                    created_at: qui L
                    updated_at: in veniam aute in
                    expires_at:
                    balance_in_cents: 50504234
                    current_period_ends_at: Lorem anim eu
                    next_assessment_at: adipisicing ullamco
                    canceled_at:
                    cancellation_message: lorem ipsum
                    next_product_id:
                    cancel_at_end_of_period: false
                    payment_collection_method: remittance
                    snap_day:
                    cancellation_method: dunning
                    current_period_started_at: Ut quis non
                    previous_state: 'occaecat proident sunt cillum '
                    signup_payment_id: -45156092
                    signup_revenue: do aliquip ea
                    delayed_cancel_at:
                    coupon_code:
                    total_revenue_in_cents: -49740952
                    product_price_in_cents: 87617888
                    product_version_number: 13656635
                    payment_type:
                    referral_code:
                    coupon_use_count:
                    coupon_uses_allowed:
                    reason_code:
                    automatically_resume_at:
                    current_billing_amount_in_cents: -26151968
                    customer:
                      id: 15208337
                      first_name: ipsum culpa in labore eiusmod
                      last_name: esse
                      organization:
                      email: ex eiusmod
                      created_at: ad occaecat cillum
                      updated_at: ut aute proident est
                      reference: laboris ea cupidatat
                      address:
                      address_2:
                      city: id eiusmod proident
                      state: magna eiusmod anim non
                      zip:
                      country:
                      phone:
                      portal_invite_last_sent_at:
                      portal_invite_last_accepted_at: reprehenderit labore voluptate
                      portal_customer_created_at: nisi aute reprehenderit Excepteur
                        Duis
                      cc_emails: eiusmod sunt
                      tax_exempt: true
                    product:
                      id: -74447756
                      name: eu mollit nulla ut aute
                      handle: esse dolor anim
                      description: Lorem ut et non
                      accounting_code: nisi
                      request_credit_card: false
                      expiration_interval: 1
                      expiration_interval_unit: day
                      created_at: officia sint
                      updated_at: sed
                      price_in_cents: -4151649
                      interval: 20680876
                      interval_unit: day
                      initial_charge_in_cents:
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: day
                      archived_at:
                      require_credit_card: true
                      return_params: magna eu
                      taxable: true
                      update_return_url: exercitation in
                      tax_code: Excepteur aliqua sunt in
                      initial_charge_after_trial: true
                      version_number: 41642597
                      update_return_params: dolore labore
                      product_family:
                        id: -5356997
                        name: officia amet Lorem proident enim
                        description: Duis
                        handle: ea dolore dolore sunt
                        accounting_code:
                      public_signup_pages: []
    operationId: resetSubscriptionComponentsPricePoints
    description: |-
      Resets all of a subscription's components to use the current default.

      **Note**: this will update the price point for all of the subscription's components, even ones that have not been allocated yet.
"/subscriptions/{subscription_id}/components/{component_id}/allocations.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  - schema:
      type: integer
    name: component_id
    in: path
    required: true
    description: The Chargify id of the component
  post:
    summary: Allocate Component
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                allocation:
                  "$ref": "#/components/schemas/Allocation"
            examples:
              Example:
                value:
                  allocation:
                    component_id: 4034995
                    subscription_id: 23737320
                    quantity: -96752223
                    previous_quantity: 3010509
                    memo: dolore cupidatat elit
                    timestamp: ex proident dolor i
                    proration_upgrade_scheme: laboris ipsum dolore
                    proration_downgrade_scheme: eiusmod dolore
                    price_point_id: -69720370
                    previous_price_point_id: -76493052
                    accrue_charge: true
                    upgrade_charge: full
                    downgrade_credit: full
                    payment:
                      id: -44566528
                      amout_in_cents: labore in minim ad
                      success: false
                      memo: aliqua
    operationId: allocateComponent
    description: |-
      This endpoint creates a new allocation, setting the current allocated quantity for the Component and recording a memo.

      **Notice**: Allocations can only be updated for Quantity, On/Off, and Prepaid Components.

      ## Allocations Documentation

      Full documentation on how to record Allocations in the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997). It is focused on how allocations operate within the Chargify UI.It goes into greater detail on how the user interface will react when recording allocations.

      This documentation also goes into greater detail on how proration is taken into consideration when applying component allocations.

      ## Proration Schemes

      Changing the allocated quantity of a component mid-period can result in either a Charge or Credit being applied to the subscription. When creating an allocation via the API, you can pass the `upgrade_charge`, `downgrade_credit`, and `accrue_charge` to be applied.

      **Notice:** These proration and accural fields will be ignored for Prepaid Components since this component type always generate charges immediately without proration.

      For background information on prorated components and upgrade/downgrade schemes, see [Setting Component Allocations.](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#proration-upgrades-vs-downgrades).
      See the tables below for valid values.

      | upgrade_charge | Definition                                                        |
      |----------------|-------------------------------------------------------------------|
      | `full`         | A charge is added for the full price of the component.            |
      | `prorated`     | A charge is added for the prorated price of the component change. |
      | `none`         | No charge is added.                                               |

      | downgrade_credit | Definition                                        |
      |------------------|---------------------------------------------------|
      | `full`           | A full price credit is added for the amount owed. |
      | `prorated`       | A prorated credit is added for the amount owed.   |
      | `none`           | No charge is added.                               |

      | accrue_charge | Definition                                                                                                 |
      |---------------|------------------------------------------------------------------------------------------------------------|
      | `true`        | Attempt to charge the customer at next renewal.                                                            |
      | `false`       | Attempt to charge the customer right away. If it fails, the charge will be accrued until the next renewal. |

      ### Order of Resolution for upgrade_charge and downgrade_credit

      1. Per allocation in API call (within a single allocation of the `allocations` array)
      2. [Component-level default value](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997-Component-Allocations#component-allocations-0-0)
      3. Allocation API call top level (outside of the `allocations` array)
      4. [Site-level default value](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#proration-schemes)

      ### Order of Resolution for accrue charge

      1. Allocation API call top level (outside of the `allocations` array)
      2. [Site-level default value](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#proration-schemes)

      **NOTE: Proration uses the current price of the component as well as the current tax rates. Changes to either may cause the prorated charge/credit to be wrong.**
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              allocation:
                "$ref": "#/components/schemas/Create-Allocation"
          examples:
            Quantity Based:
              value:
                allocation:
                  quantity: 5
                  memo: Recoding component purchase of Acme Support
            On/Off Component (Toggle On):
              value:
                allocation:
                  quantity: 1
                  memo: Recoding component purchase of Acme Support
            On/Off Component (Toggle Off):
              value:
                allocation:
                  quantity: 0
                  memo: Recoding component purchase of Acme Support
  get:
    summary: List Allocations
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  allocation:
                    "$ref": "#/components/schemas/Allocation"
            examples:
              Example:
                value:
                - allocation:
                    memo: moving to 7
                    timestamp: '2012-11-20T22:00:37Z'
                    quantity: 7
                    previous_quantity: 3
                    component_id: 11960
                    subscription_id: 2585595
                    proration_upgrade_scheme: no-prorate
                    proration_downgrade_scheme: no-prorate
                - allocation:
                    memo:
                    timestamp: '2012-11-20T21:48:09Z'
                    quantity: 3
                    previous_quantity: 0
                    component_id: 11960
                    subscription_id: 2585595
                    proration_upgrade_scheme: no-prorate
                    proration_downgrade_scheme: no-prorate
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              type: string
      '404':
        description: Not Found
      '422':
        description: Unprocessable Entity (WebDAV)
    operationId: listAllocations
    description: |-
      This endpoint returns the 50 most recent Allocations, ordered by most recent first.

      ## On/Off Components

      When a subscription's on/off component has been toggled to on (`1`) or off (`0`), usage will be logged in this response.

      ## Querying data via Chargify gem

      You can also query the current quantity via the [official Chargify Gem.](http://github.com/chargify/chargify_api_ares)

      ```# First way
      component = Chargify::Subscription::Component.find(1, :params => {:subscription_id => 7})
      puts component.allocated_quantity
      # => 23

      # Second way
      component = Chargify::Subscription.find(7).component(1)
      puts component.allocated_quantity
      # => 23
      ```
    parameters:
    - schema:
        type: integer
      in: query
      name: page
      description: Pass an integer in the page parameter via the query string to access
        subsequent pages of 50 allocations
"/subscriptions/{subscription_id}/allocations.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Allocate Components
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  allocation:
                    "$ref": "#/components/schemas/Allocation"
            examples:
              Example:
                value:
                - allocation:
                    component_id: 193159
                    subscription_id: 15540611
                    quantity: 10
                    previous_quantity: 0
                    memo: foo
                    timestamp: '2016-12-08T19:09:15Z'
                    proration_upgrade_scheme: prorate-attempt-capture
                    proration_downgrade_scheme: no-prorate
                    payment:
                      amount_in_cents: 1451
                      success: true
                      memo: 'Payment for: Prorated component allocation changes.'
                      id: 165473487
                - allocation:
                    component_id: 277221
                    subscription_id: 15540611
                    quantity: 5
                    previous_quantity: 0
                    memo: bar
                    timestamp: '2016-12-08T19:09:15Z'
                    proration_upgrade_scheme: prorate-attempt-capture
                    proration_downgrade_scheme: no-prorate
                    payment:
                      amount_in_cents: 1451
                      success: true
                      memo: 'Payment for: Prorated component allocation changes.'
                      id: 165473487
      '401':
        description: Unauthorized
      '404':
        description: Not Found
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                Example:
                  errors:
                  - 'Quantity: cannot be blank.'
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - 'Quantity: cannot be blank.'
    operationId: allocateComponents
    description: |-
      Creates multiple allocations, setting the current allocated quantity for each of the components and recording a memo. The charges and/or credits that are created will be rolled up into a single total which is used to determine whether this is an upgrade or a downgrade. Be aware of the Order of Resolutions explained below in determining the proration scheme.

      A `component_id` is required for each allocation.

      This endpoint only responds to JSON. It is not available for XML.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              proration_upgrade_scheme:
                type: string
                default: no-prorate
                description: ''
                deprecated: true
              proration_downgrade_scheme:
                type: string
                description: ''
                default: no-prorate
                deprecated: true
              allocations:
                type: array
                items:
                  type: object
                  properties:
                    allocation:
                      "$ref": "#/components/schemas/Create-Allocation"
              accrue_charge:
                type: boolean
              upgrade_charge:
                type: string
              downgrade_credit:
                type: string
              payment_collection_method:
                type: string
                description: "(Optional) If not passed, the allocation(s) will use
                  the payment collection method on the subscription"
                enum:
                - automatic
                - invoice
          examples:
            Example:
              value:
                proration_upgrade_scheme: prorate-attempt-capture
                proration_downgrade_scheme: no-prorate
                allocations:
                - component_id: 123
                  quantity: 10
                  memo: foo
                - component_id: 456
                  quantity: 5
                  memo: bar
"/subscriptions/{subscription_id}/allocations/preview.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Preview Allocations
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                allocation_preview:
                  type: object
                  properties:
                    start_date:
                      type: string
                    end_date:
                      type: string
                    subtotal_in_cents:
                      type: integer
                    total_tax_in_cents:
                      type: integer
                    total_discount_in_cents:
                      type: integer
                    total_in_cents:
                      type: integer
                    direction:
                      type: string
                    proration_scheme:
                      type: string
                    line_items:
                      type: array
                      items:
                        type: object
                        properties:
                          transaction_type:
                            type: string
                          kind:
                            type: string
                          amount_in_cents:
                            type: integer
                          memo:
                            type: string
                          discount_amount_in_cents:
                            type: integer
                          taxable_amount_in_cents:
                            type: integer
                          component_id:
                            type: integer
                          direction:
                            type: string
                    accrue_charge:
                      type: boolean
                    allocations:
                      type: array
                      items:
                        type: object
                        properties:
                          component_id:
                            type: integer
                          subscription_id:
                            type: integer
                          quantity:
                            type:
                            - number
                            - integer
                          previous_quantity:
                            type: integer
                          memo:
                            type: string
                          timestamp:
                            type:
                            - string
                            - 'null'
                          proration_upgrade_scheme:
                            type: string
                          proration_downgrade_scheme:
                            type: string
                          accrue_charge:
                            type: boolean
                          upgrade_charge:
                            type: string
                          downgrade_credit:
                            type: string
            examples:
              Example:
                value:
                  allocation_preview:
                    start_date: '2019-05-02T15:26:46Z'
                    end_date: '2019-05-08T15:26:46Z'
                    period_type: prorated
                    total_in_cents: 150
                    total_discount_in_cents: 0
                    total_tax_in_cents: 0
                    subtotal_in_cents: 150
                    existing_balance_in_cents: 0
                    accrue_charge: true
                    line_items:
                    - direction: upgrade
                      transaction_type: charge
                      kind: quantity_based_component
                      amount_in_cents: 100
                      taxable_amount_in_cents: 0
                      discount_amount_in_cents: 0
                      memo: 'Foo: 0 to 10 foo'
                      component_id: 123
                      component_handle: foo
                    - direction: downgrade
                      transaction_type: credit
                      kind: quantity_based_component
                      amount_in_cents: -20
                      taxable_amount_in_cents: 0
                      discount_amount_in_cents: 0
                      memo: 'Foo: 10 to 5 bar'
                      component_id: 456
                      component_handle: bar
                    - direction: upgrade
                      transaction_type: credit
                      kind: quantity_based_component
                      amount_in_cents: 70
                      taxable_amount_in_cents: 0
                      discount_amount_in_cents: 0
                      memo: 'Foo: 0 to 10 baz'
                      component_id: 789
                      component_handle: baz
                    allocations:
                    - accrue_charge: true
                      upgrade_charge: prorated
                      downgrade_credit: full
                      component_handle: foo
                      component_id: 123
                      memo: foo
                      previous_price_point_id: 123
                      previous_quantity: 0
                      price_point_id: 123
                      proration_downgrade_scheme: full
                      proration_upgrade_scheme: prorate-delay-capture
                      quantity: 10
                      subscription_id: 123456
                      timestamp:
                    - accrue_charge: true
                      upgrade_charge: full
                      downgrade_credit: prorated
                      component_handle: bar
                      component_id: 456
                      memo: foo
                      previous_price_point_id: 456
                      previous_quantity: 10
                      price_point_id: 456
                      proration_downgrade_scheme: prorate
                      proration_upgrade_scheme: full-price-delay-capture
                      quantity: 5
                      subscription_id: 123456
                      timestamp:
                    - accrue_charge: true
                      upgrade_charge: full
                      downgrade_credit: none
                      component_handle: baz
                      component_id: 789
                      memo: foo
                      previous_price_point_id: 789
                      previous_quantity: 0
                      price_point_id: 789
                      proration_downgrade_scheme: no-prorate
                      proration_upgrade_scheme: full-price-delay-capture
                      quantity: 10
                      subscription_id: 123456
                      timestamp:
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  errors:
                  - kind: allocation
                    component_id: 379512
                    'on': base
                    message: Allocations can only be updated for quantity and on/off
                      components.
              properties:
                errors:
                  type: array
                  items:
                    type: object
                    properties:
                      kind:
                        type: string
                      component_id:
                        type: number
                      'on':
                        type: string
                      message:
                        type: string
            examples:
              Example:
                value:
                  errors:
                  - kind: allocation
                    component_id: 379512
                    'on': base
                    message: Allocations can only be updated for quantity and on/off
                      components.
    operationId: previewAllocations
    description: |-
      Chargify offers the ability to preview a potential subscription's **quantity-based** or **on/off** component allocation in the middle of the current billing period.  This is useful if you want users to be able to see the effect of a component operation before actually doing it.

      ## Fine-grained Component Control: Use with multiple `upgrade_charge`s or `downgrade_credits`

      When the allocation uses multiple different types of `upgrade_charge`s or `downgrade_credit`s, the Allocation is viewed as an Allocation which uses "Fine-Grained Component Control". As a result, the response will not include `direction` and `proration` within the `allocation_preview` at the `line_items` and `allocations` level respectfully.

      See example below for Fine-Grained Component Control response.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              allocation:
                "$ref": "#/components/schemas/Create-Allocation"
          examples:
            Example:
              value:
                proration_upgrade_scheme: prorate-attempt-capture
                proration_downgrade_scheme: prorate
                allocations:
                - component_id: 554108
                  price_point_id: 325826
                  quantity: 10
                  memo: NOW
                - component_id: 565236
                  price_point_id: 341315
                  quantity: 10
                  memo: NOW
"/subscriptions/{subscription_id}/components/{component_id}/allocations/{allocation_id}.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  - schema:
      type: integer
    name: component_id
    in: path
    required: true
    description: The Chargify id of the component
  - schema:
      type: integer
    name: allocation_id
    in: path
    required: true
    description: The Chargify id of the allocation
  put:
    summary: Update Prepaid Usage Allocation Expiration Date
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  errors:
                  - kind: base
                    message: Credit scheme must be one of credit, refund or none.
              properties:
                errors:
                  type: array
                  items:
                    type: object
                    properties:
                      kind:
                        type: string
                      message:
                        type: string
            examples:
              Example:
                value:
                  errors:
                  - kind: base
                    message: Credit scheme must be one of credit, refund or none.
    operationId: updatePrepaidUsageAllocation
    description: |-
      When the expiration interval options are selected on a prepaid usage component price point, all allocations will be created with an expiration date. This expiration date can be changed after the fact to allow for extending or shortening the allocation's active window.

      In order to change a prepaid usage allocation's expiration date, a PUT call must be made to the allocation's endpoint with a new expiration date.

      ## Limitations

      A few limitations exist when changing an allocation's expiration date:

      - An expiration date can only be changed for an allocation that belongs to a price point with expiration interval options explicitly set.
      - An expiration date can be changed towards the future with no limitations.
      - An expiration date can be changed towards the past (essentially expiring it) up to the subscription's current period beginning date.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              allocation:
                type: object
                properties:
                  expires_at:
                    type: string
          examples:
            Example:
              value:
                allocation:
                  expires_at: 05/07/2021
  delete:
    summary: Delete Prepaid Usage Allocation
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  errors:
                  - kind: base
                    message: Credit scheme must be one of credit, refund or none.
              properties:
                errors:
                  type: array
                  items:
                    type: object
                    properties:
                      kind:
                        type: string
                      message:
                        type: string
            examples:
              Example:
                value:
                  errors:
                  - kind: base
                    message: Credit scheme must be one of credit, refund or none.
    operationId: deletePrepaidUsageAllocation
    description: |-
      Prepaid Usage components are unique in that their allocations are always additive. In order to reduce a subscription's allocated quantity for a prepaid usage component each allocation must be destroyed individually via this endpoint.

      ## Credit Scheme

      By default, destroying an allocation will generate a service credit on the subscription. This behavior can be modified with the optional `credit_scheme` parameter on this endpoint. The accepted values are:

      1. `none`: The allocation will be destroyed and the balances will be updated but no service credit or refund will be created.
      2. `credit`: The allocation will be destroyed and the balances will be updated and a service credit will be generated. This is also the default behavior if the `credit_scheme` param is not passed.
      3. `refund`: The allocation will be destroyed and the balances will be updated and a refund will be issued along with a Credit Note.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              credit_scheme:
                type: string
                enum:
                - none
                - credit
                - refund
          examples:
            Example:
              value:
                credit_scheme: none
"/subscriptions/{subscription_id}/components/{component_id}/usages.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  - schema:
      type: integer
    name: component_id
    in: path
    required: true
    description: Either the Chargify id for the component or the component's handle
      prefixed by `handle:`
  post:
    summary: Create Usage
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                usage:
                  "$ref": "#/components/schemas/Usage"
            examples:
              Example:
                value:
                  usage:
                    id: 138522957
                    memo: My memo
                    created_at: '2017-11-13T10:05:32-06:00'
                    price_point_id: 149416
                    quantity: 1000
                    component_id: 500093
                    component_handle: handle
                    subscription_id: 22824464
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - 'Price point: could not be found.'
    operationId: createUsage
    description: |-
      ## Documentation

      Full documentation on how to create Components in the Chargify UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405020625677#creating-components). Additionally, for information on how to record component usage against a subscription, please see the following resources:

      + [Recording Metered Component Usage](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#reporting-metered-component-usage)
      + [Reporting Prepaid Component Status](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404527849997#reporting-prepaid-component-status)

      You may choose to report metered or prepaid usage to Chargify as often as you wish. You may report usage as it happens. You may also report usage periodically, such as each night or once per billing period. If usage events occur in your system very frequently (on the order of thousands of times an hour), it is best to accumulate usage into batches on your side, and then report those batches less frequently, such as daily. This will ensure you remain below any API throttling limits. If your use case requires higher rates of usage reporting, we recommend utilizing Events Based Components.

      ## Create Usage for Subscription

      This endpoint allows you to record an instance of metered or prepaid usage for a subscription. The `quantity` from usage for each component is accumulated to the `unit_balance` on the [Component Line Item](./b3A6MTQxMDgzNzQ-read-subscription-component) for the subscription.

      ## Price Point ID usage

      If you are using price points, for metered and prepaid usage components, Chargify gives you the option to specify a price point in your request.

      You do not need to specify a price point ID. If a price point is not included, the default price point for the component will be used when the usage is recorded.

      If an invalid `price_point_id` is submitted, the endpoint will return an error.

      ## Deducting Usage

      In the event that you need to reverse a previous usage report or otherwise deduct from the current usage balance, you may provide a negative quantity.

      Example:

      Previously recorded:

      ```json
      {
        "usage": {
          "quantity": 5000,
          "memo": "Recording 5000 units"
        }
      }
      ```

      At this point, `unit_balance` would be `5000`. To reduce the balance to `0`, POST the following payload:

      ```json
      {
        "usage": {
          "quantity": -5000,
          "memo": "Deducting 5000 units"
        }
      }
      ```

      The `unit_balance` has a floor of `0`; negative unit balances are never allowed. For example, if the usage balance is 100 and you deduct 200 units, the unit balance would then be `0`, not `-100`.

      ## FAQ

      Q. Is it possible to record metered usage for more than one component at a time?

      A. No. Usage should be reported as one API call per component on a single subscription. For example, to record that a subscriber has sent both an SMS Message and an Email, send an API call for each.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              usage:
                type: object
                properties:
                  quantity:
                    type:
                    - integer
                    - number
                    description: integer by default or decimal number if fractional
                      quantities are enabled for the component
                  price_point_id:
                    type: string
                  memo:
                    type: string
          examples:
            Example:
              value:
                usage:
                  quantity: 1000
                  price_point_id: '149416'
                  memo: My memo
  get:
    summary: List Usages
    tags:
    - Subscription Components
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  usage:
                    "$ref": "#/components/schemas/Usage"
            examples:
              Example:
                value:
                - usage:
                    id: 178534642
                    memo: '20'
                    created_at: '2018-08-03T11:58:42-05:00'
                    price_point_id: 242632
                    quantity: '20.0'
                    component_id: 500093
                    component_handle: handle
                    subscription_id: 22824464
                - usage:
                    id: 178534591
                    memo: '10'
                    created_at: '2018-08-03T11:58:29-05:00'
                    price_point_id: 242632
                    quantity: '10.0'
                    component_id: 500093
                    component_handle: handle
                    subscription_id: 22824464
    operationId: listUsages
    description: |-
      This request will return a list of the usages associated with a subscription for a particular metered component. This will display the previously recorded components for a subscription.

      This endpoint is not compatible with quantity-based components.

      ## Since Date and Until Date Usage

      Note: The `since_date` and `until_date` attributes each default to midnight on the date specified. For example, in order to list usages for January 20th, you would need to append the following to the URL.

      ```
      ?since_date=2016-01-20&until_date=2016-01-21
      ```

      ## Read Usage by Handle

      Use this endpoint to read the previously recorded components for a subscription.  You can now specify either the component id (integer) or the component handle prefixed by "handle:" to specify the unique identifier for the component you are working with.
    parameters:
    - schema:
        type: integer
      in: query
      name: since_id
      description: Returns usages with an id greater than or equal to the one specified
    - schema:
        type: integer
      in: query
      name: max_id
      description: Returns usages with an id less than or equal to the one specified
    - schema:
        type: string
      in: query
      name: since_date
      description: Returns usages with a created_at date greater than or equal to
        midnight (12:00 AM) on the date specified.
    - schema:
        type: string
      in: query
      name: until_date
      description: Returns usages with a created_at date less than or equal to midnight
        (12:00 AM) on the date specified.
    - schema:
        type: integer
        default: 1
      in: query
      name: page
      description: The page number used for pagination.
    - schema:
        type: integer
        default: 20
        maximum: 200
      in: query
      name: per_page
      description: The number of results used for pagination.
"/subscriptions/{subscription_id}/retry.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
  put:
    summary: Retry Subscription
    tags:
    - Subscription Status
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 46330
                    state: active
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2018-10-22T13:10:46-06:00'
                    created_at: '2018-10-22T13:10:46-06:00'
                    updated_at: '2021-06-10T09:23:43-06:00'
                    expires_at:
                    balance_in_cents: 18600
                    current_period_ends_at: '2021-06-22T13:10:46-06:00'
                    next_assessment_at: '2021-06-22T13:10:46-06:00'
                    canceled_at:
                    cancellation_message:
                    next_product_id:
                    cancel_at_end_of_period:
                    payment_collection_method: automatic
                    snap_day:
                    cancellation_method:
                    product_price_point_id: 3464
                    next_product_price_point_id:
                    receives_invoice_emails:
                    net_terms:
                    locale:
                    currency: USD
                    reference:
                    scheduled_cancellation_at:
                    current_period_started_at: '2021-05-22T13:10:46-06:00'
                    previous_state: past_due
                    signup_payment_id: 651268
                    signup_revenue: '6.00'
                    delayed_cancel_at:
                    coupon_code:
                    total_revenue_in_cents: 600
                    product_price_in_cents: 600
                    product_version_number: 501
                    payment_type:
                    referral_code: rzqvrx
                    coupon_use_count:
                    coupon_uses_allowed:
                    reason_code:
                    automatically_resume_at:
                    coupon_codes: []
                    offer_id:
                    credit_balance_in_cents: 0
                    prepayment_balance_in_cents: 0
                    payer_id: 142365
                    stored_credential_transaction_id:
                    next_product_handle:
                    on_hold_at:
                    prepaid_dunning: false
                    customer:
                      id: 142365
                      first_name: Lavern
                      last_name: Fahey
                      organization:
                      email: millie2@example.com
                      created_at: '2018-10-22T13:10:46-06:00'
                      updated_at: '2018-10-22T13:10:46-06:00'
                      reference:
                      address:
                      address_2:
                      city:
                      state:
                      zip:
                      country:
                      phone:
                      portal_invite_last_sent_at:
                      portal_invite_last_accepted_at:
                      verified: false
                      portal_customer_created_at: '2018-10-22T13:10:46-06:00'
                      vat_number:
                      cc_emails: john@example.com, sue@example.com
                      tax_exempt: false
                      parent_id:
                      locale:
                    product:
                      id: 8080
                      name: Pro Versions
                      handle:
                      description: ''
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval:
                      expiration_interval_unit: ''
                      created_at: '2019-02-15T10:15:00-07:00'
                      updated_at: '2019-02-15T10:30:34-07:00'
                      price_in_cents: 600
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents:
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: month
                      archived_at:
                      require_credit_card: true
                      return_params: ''
                      require_shipping_address: false
                      request_billing_address: false
                      require_billing_address: false
                      taxable: false
                      update_return_url: ''
                      tax_code: ''
                      initial_charge_after_trial: false
                      default_product_price_point_id: 3464
                      version_number: 501
                      update_return_params: ''
                      product_price_point_id: 3464
                      product_price_point_name: Default
                      product_price_point_handle: uuid:5305c3f0-1375-0137-5619-065dfbfdc636
                      product_family:
                        id: 37
                        name: Acme Projects
                        description:
                        handle: acme-projects
                        accounting_code:
                        created_at: '2013-02-20T15:05:51-07:00'
                        updated_at: '2013-02-20T15:05:51-07:00'
                      public_signup_pages:
                      - id: 1540
                        return_url:
                        return_params: ''
                        url: https://acme-test.staging-chargifypay.com/subscribe/2f6y53rrqgsf
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: object
            examples:
              Example:
                value:
                  errors: []
    operationId: retrySubscription
    description: |-
      Chargify offers the ability to retry collecting the balance due on a past due Subscription without waiting for the next scheduled attempt.

      ## Successful Reactivation

      The response will be `200 OK` with the updated Subscription.

      ## Failed Reactivation

      The response will be `422 "Unprocessable Entity`.
"/subscriptions/{subscription_id}.json":
  parameters:
  - "$ref": "#/components/parameters/subscription-id-required-path"
  put:
    summary: Update Subscription
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 18220670
                    state: active
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2017-06-27T13:45:15-05:00'
                    created_at: '2017-06-27T13:45:13-05:00'
                    updated_at: '2017-06-30T09:26:50-05:00'
                    expires_at:
                    balance_in_cents: 10000
                    current_period_ends_at: '2017-06-30T12:00:00-05:00'
                    next_assessment_at: '2017-06-30T12:00:00-05:00'
                    canceled_at:
                    cancellation_message:
                    next_product_id:
                    cancel_at_end_of_period: false
                    payment_collection_method: automatic
                    snap_day: end
                    cancellation_method:
                    current_period_started_at: '2017-06-27T13:45:13-05:00'
                    previous_state: active
                    signup_payment_id: 191819284
                    signup_revenue: '0.00'
                    delayed_cancel_at:
                    coupon_code:
                    total_revenue_in_cents: 0
                    product_price_in_cents: 0
                    product_version_number: 1
                    payment_type:
                    referral_code: d3pw7f
                    coupon_use_count:
                    coupon_uses_allowed:
                    reason_code:
                    automatically_resume_at:
                    current_billing_amount_in_cents: 10000
                    receives_invoice_emails: false
                    customer:
                      id: 17780587
                      first_name: Catie
                      last_name: Test
                      organization: Acme, Inc.
                      email: catie@example.com
                      created_at: '2017-06-27T13:01:05-05:00'
                      updated_at: '2017-06-30T09:23:10-05:00'
                      reference: 123ABC
                      address: 123 Anywhere Street
                      address_2: 'Apartment #10'
                      city: Los Angeles
                      state: CA
                      zip: '90210'
                      country: US
                      phone: 555-555-5555
                      portal_invite_last_sent_at: '2017-06-27T13:45:16-05:00'
                      portal_invite_last_accepted_at:
                      verified: true
                      portal_customer_created_at: '2017-06-27T13:01:08-05:00'
                      cc_emails: support@example.com
                      tax_exempt: true
                    product:
                      id: 4470347
                      name: Zero Dollar Product
                      handle: zero-dollar-product
                      description: ''
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval:
                      expiration_interval_unit: never
                      created_at: '2017-03-23T10:54:12-05:00'
                      updated_at: '2017-04-20T15:18:46-05:00'
                      price_in_cents: 0
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents:
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: month
                      archived_at:
                      require_credit_card: false
                      return_params: ''
                      taxable: false
                      update_return_url: ''
                      tax_code: ''
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: ''
                      product_family:
                        id: 997233
                        name: Acme Products
                        description: ''
                        handle: acme-products
                        accounting_code:
                      public_signup_pages:
                      - id: 316810
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargify.com/subscribe/69x825m78v3d/zero-dollar-product
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - Payment collection method cannot be set to 'invoice' when the
                    subscription is past due
                  - "'expires_at' cannot be set for subscriptions on calendar billing"
    operationId: updateSubscription
    description: |-
      The subscription endpoint allows you to instantly update one or many attributes about a subscription in a single call.

      ## Update Subscription Payment Method

      Change the card that your Subscriber uses for their subscription. You can also use this method to simply change the expiration date of the card **if your gateway allows**.

      Note that partial card updates for **Authorize.Net** are not allowed via this endpoint. The existing Payment Profile must be directly updated instead.

      You also use this method to change the subscription to a different product by setting a new value for product_handle. A product change can be done in two different ways, **product change** or **delayed product change**.

      ## Product Change

      This endpoint may be used to change a subscription's product. The new payment amount is calculated and charged at the normal start of the next period. If you desire complex product changes or prorated upgrades and downgrades instead, please see the documentation on Migrating Subscription Products.

      To perform a product change, simply set either the `product_handle` or `product_id` attribute to that of a different product from the same site as the subscription. You can also change the price point by passing in either `product_price_point_id` or `product_price_point_handle` - otherwise the new product's default price point will be used.

      ### Delayed Product Change

      This method also changes the product and/or price point, and the new payment amount is calculated and charged at the normal start of the next period.

      This method schedules the product change to happen automatically at the subscription’s next renewal date. To perform a Delayed Product Change, set the `product_handle` attribute as you would in a regular product change, but also set the `product_change_delayed` attribute to `true`. No proration applies in this case.

      You can also perform a delayed change to the price point by passing in either `product_price_point_id` or `product_price_point_handle`

      **Note: To cancel a delayed product change, set `next_product_id` to an empty string.**

      ## Billing Date Changes

      ### Regular Billing Date Changes

      Send the `next_billing_at` to set the next billing date for the subscription. After that date passes and the subscription is processed, the following billing date will be set according to the subscription's product period.

      Note that if you pass an invalid date, we will automatically interpret and set the correct date. For example, when February 30 is entered, the next billing will be set to March 2nd in a non-leap year.

      The server response will not return data under the key/value pair of `next_billing`. Please view the key/value pair of `current_period_ends_at` to verify that the `next_billing` date has been changed successfully.

      ### Snap Day Changes

      For a subscription using Calendar Billing, setting the next billing date is a bit different. Send the `snap_day` attribute to change the calendar billing date for **a subscription using a product eligible for calendar billing**.

      Note: If you change the product associated with a subscription that contains a `snap_date` and immediately `READ/GET` the subscription data, it will still contain evidence of the existing `snap_date`. This is due to the fact that a product change is instantanous and only affects the product associated with a subscription. After the `next_billing` date arrives, the `snap_day` associated with the subscription will return to `null.` Another way of looking at this is that you willl have to wait for the next billing cycle to arrive before the `snap_date` will reset to `null`.
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Update-Subscription-Request"
          examples:
            Example:
              value:
                subscription:
                  credit_card_attributes:
                    full_number: '4111111111111111'
                    expiration_month: '10'
                    expiration_year: '2030'
                  next_billing_at: '2010-08-06T15:34:00Z'
            With Custom Pricing:
              value:
                subscription:
                  product_id: string
                  custom_price:
                    price_in_cents: 9900
                    interval: 1
                    interval_unit: month
                  components:
                  - component_id: 20
                    allocated_quantity: 10
                    custom_price:
                      pricing_scheme: stairstep
                      prices:
                      - unit_price: '5'
                        starting_quantity: '1'
                        ending_quantity: '15'
                      - unit_price: '2'
                        starting_quantity: '16'
                  - component_id: 10
                    enabled: true
                    custom_price:
                      prices:
                      - unit_price: '1'
                        starting_quantity: '1'
  delete:
    summary: Cancel Subscription
    tags:
    - Subscription Status
    operationId: cancelSubscription
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 15254809
                    state: canceled
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2016-11-15T15:33:44-05:00'
                    created_at: '2016-11-15T15:33:44-05:00'
                    updated_at: '2016-11-15T17:13:06-05:00'
                    expires_at:
                    balance_in_cents: 0
                    current_period_ends_at: '2017-08-29T12:00:00-04:00'
                    next_assessment_at: '2017-08-29T12:00:00-04:00'
                    canceled_at: '2016-11-15T17:13:06-05:00'
                    cancellation_message: Canceling the subscription via the API
                    next_product_id:
                    cancel_at_end_of_period: false
                    payment_collection_method: automatic
                    snap_day:
                    cancellation_method: merchant_api
                    current_period_started_at: '2016-11-15T15:33:44-05:00'
                    previous_state: active
                    signup_payment_id: 0
                    signup_revenue: '0.00'
                    delayed_cancel_at:
                    coupon_code:
                    total_revenue_in_cents: 0
                    product_price_in_cents: 1000
                    product_version_number: 7
                    payment_type: credit_card
                    referral_code: tg8qbq
                    coupon_use_count:
                    coupon_uses_allowed:
                    customer:
                      id: 14731081
                      first_name: John
                      last_name: Doe
                      organization: Acme Widgets
                      email: john.doe@example.com
                      created_at: '2016-11-15T15:33:44-05:00'
                      updated_at: '2016-11-15T15:33:45-05:00'
                      reference: '123'
                      address:
                      address_2:
                      city:
                      state:
                      zip:
                      country:
                      phone:
                      portal_invite_last_sent_at: '2016-11-15T15:33:45-05:00'
                      portal_invite_last_accepted_at:
                      verified: false
                      portal_customer_created_at: '2016-11-15T15:33:45-05:00'
                      cc_emails:
                    product:
                      id: 3792003
                      name: "$10 Basic Plan"
                      handle: basic
                      description: lorem ipsum
                      accounting_code: basic
                      request_credit_card: false
                      expiration_interval:
                      expiration_interval_unit: never
                      created_at: '2016-03-24T13:38:39-04:00'
                      updated_at: '2016-11-03T13:03:05-04:00'
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: day
                      initial_charge_in_cents:
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: month
                      archived_at:
                      require_credit_card: false
                      return_params: ''
                      taxable: false
                      update_return_url: ''
                      initial_charge_after_trial: false
                      version_number: 7
                      update_return_params: ''
                      product_family:
                        id: 527890
                        name: Acme Projects
                        description: ''
                        handle: billing-plans
                        accounting_code:
                      public_signup_pages:
                      - id: 281054
                        return_url: http://www.example.com?successfulsignup
                        return_params: ''
                        url: https://general-goods.chargify.com/subscribe/kqvmfrbgd89q/basic
                      - id: 281240
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargify.com/subscribe/dkffht5dxfd8/basic
                      - id: 282694
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargify.com/subscribe/jwffwgdd95s8/basic
                    credit_card:
                      id: 10202898
                      first_name: John
                      last_name: Doe
                      masked_card_number: XXXX-XXXX-XXXX-1111
                      card_type: visa
                      expiration_month: 12
                      expiration_year: 2020
                      customer_id: 14731081
                      current_vault: authorizenet
                      vault_token: '12345'
                      billing_address:
                      billing_city:
                      billing_state:
                      billing_zip:
                      billing_country:
                      customer_vault_token: '67890'
                      billing_address_2:
                      payment_type: credit_card
      '404':
        description: Not Found
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example-1:
                value:
                  errors:
                  - The subscription is already canceled
              Example-2:
                value:
                  errors:
                  - reason_code size cannot be greater than 255
                  - cancellation_message size cannot be greater than 65535
              Example-3:
                value:
                  errors:
                  - subscription must be an Object
    description: The DELETE action causes the cancellation of the Subscription. This
      means, the method sets the Subscription state to "canceled".
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              subscription:
                type: object
                properties:
                  cancellation_message:
                    type: string
                    description: Can be used when canceling a subscription to make
                      a note about the reason for cancellation.
                  reason_code:
                    type: string
                    description: Can be used when canceling a subscription to indicate
                      why a subscription was canceled. (See reason codes associated
                      with your site)
          examples: {}
  get:
    summary: Read Subscription
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 15236915
                    state: active
                    balance_in_cents: 0
                    total_revenue_in_cents: 14000
                    product_price_in_cents: 1000
                    product_version_number: 7
                    current_period_ends_at: '2016-11-15T14:48:10-05:00'
                    next_assessment_at: '2016-11-15T14:48:10-05:00'
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2016-11-14T14:48:12-05:00'
                    expires_at:
                    created_at: '2016-11-14T14:48:10-05:00'
                    updated_at: '2016-11-14T15:24:41-05:00'
                    cancellation_message:
                    cancellation_method:
                    cancel_at_end_of_period:
                    canceled_at:
                    current_period_started_at: '2016-11-14T14:48:10-05:00'
                    previous_state: active
                    signup_payment_id: 162269766
                    signup_revenue: '260.00'
                    delayed_cancel_at:
                    coupon_code: 5SNN6HFK3GBH
                    payment_collection_method: automatic
                    snap_day:
                    reason_code:
                    receives_invoice_emails: false
                    net_terms: 0
                    customer:
                      first_name: Curtis
                      last_name: Test
                      email: curtis@example.com
                      cc_emails: jeff@example.com
                      organization: ''
                      reference:
                      id: 14714298
                      created_at: '2016-11-14T14:48:10-05:00'
                      updated_at: '2016-11-14T14:48:13-05:00'
                      address: 123 Anywhere Street
                      address_2: ''
                      city: Boulder
                      state: CO
                      zip: '80302'
                      country: US
                      phone: ''
                      verified: false
                      portal_customer_created_at: '2016-11-14T14:48:13-05:00'
                      portal_invite_last_sent_at: '2016-11-14T14:48:13-05:00'
                      portal_invite_last_accepted_at:
                      tax_exempt: false
                      vat_number: '012345678'
                    product:
                      id: 3792003
                      name: "$10 Basic Plan"
                      handle: basic
                      description: lorem ipsum
                      accounting_code: basic
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: day
                      initial_charge_in_cents:
                      expiration_interval:
                      expiration_interval_unit: never
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: month
                      initial_charge_after_trial: false
                      return_params: ''
                      request_credit_card: false
                      require_credit_card: false
                      created_at: '2016-03-24T13:38:39-04:00'
                      updated_at: '2016-11-03T13:03:05-04:00'
                      archived_at:
                      update_return_url: ''
                      update_return_params: ''
                      product_family:
                        id: 527890
                        name: Acme Projects
                        handle: billing-plans
                        accounting_code:
                        description: ''
                      public_signup_pages:
                      - id: 281054
                        url: https://general-goods.chargify.com/subscribe/kqvmfrbgd89q/basic
                      - id: 281240
                        url: https://general-goods.chargify.com/subscribe/dkffht5dxfd8/basic
                      - id: 282694
                        url: https://general-goods.chargify.com/subscribe/jwffwgdd95s8/basic
                      taxable: false
                      version_number: 7
                      product_price_point_name: Default
                    credit_card:
                      id: 10191713
                      payment_type: credit_card
                      first_name: Curtis
                      last_name: Test
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 1
                      expiration_year: 2026
                      billing_address: 123 Anywhere Street
                      billing_address_2: ''
                      billing_city: Boulder
                      billing_state:
                      billing_country: ''
                      billing_zip: '80302'
                      current_vault: bogus
                      vault_token: '1'
                      customer_vault_token:
                      customer_id: 14714298
                    payment_type: credit_card
                    referral_code: w7kjc9
                    next_product_id:
                    coupon_use_count: 1
                    coupon_uses_allowed: 1
                    stored_credential_transaction_id: 166411599220288
                    on_hold_at:
                    scheduled_cancellation_at: '2016-11-14T14:48:13-05:00'
    operationId: readSubscription
    description: |-
      Use this endpoint to find subscription details.

      ## Self-Service Page token

      Self-Service Page token for the subscription is not returned by default. If this information is desired, the include[]=self_service_page_token parameter must be provided with the request.
    parameters:
    - name: include[]
      in: query
      schema:
        type: array
        items:
          enum:
          - coupons
          - self_service_page_token
        example: include[]=coupons, include[]=self_service_page_token
      style: form
      explode: true
      description: Allows including additional data in the response.
"/subscriptions/{subscription_id}/resume.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Resume Subscription
    tags:
    - Subscription Status
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 18220670
                    state: active
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2017-06-27T13:45:15-05:00'
                    created_at: '2017-06-27T13:45:13-05:00'
                    updated_at: '2017-06-30T09:26:50-05:00'
                    expires_at:
                    balance_in_cents: 10000
                    current_period_ends_at: '2017-06-30T12:00:00-05:00'
                    next_assessment_at: '2017-06-30T12:00:00-05:00'
                    canceled_at:
                    cancellation_message:
                    next_product_id:
                    cancel_at_end_of_period: false
                    payment_collection_method: automatic
                    snap_day: end
                    cancellation_method:
                    current_period_started_at: '2017-06-27T13:45:13-05:00'
                    previous_state: active
                    signup_payment_id: 191819284
                    signup_revenue: '0.00'
                    delayed_cancel_at:
                    coupon_code:
                    total_revenue_in_cents: 0
                    product_price_in_cents: 0
                    product_version_number: 1
                    payment_type:
                    referral_code: d3pw7f
                    coupon_use_count:
                    coupon_uses_allowed:
                    reason_code:
                    automatically_resume_at:
                    current_billing_amount_in_cents: 10000
                    customer:
                      id: 17780587
                      first_name: Catie
                      last_name: Test
                      organization: Acme, Inc.
                      email: catie@example.com
                      created_at: '2017-06-27T13:01:05-05:00'
                      updated_at: '2017-06-30T09:23:10-05:00'
                      reference: 123ABC
                      address: 123 Anywhere Street
                      address_2: 'Apartment #10'
                      city: Los Angeles
                      state: CA
                      zip: '90210'
                      country: US
                      phone: 555-555-5555
                      portal_invite_last_sent_at: '2017-06-27T13:45:16-05:00'
                      portal_invite_last_accepted_at:
                      verified: true
                      portal_customer_created_at: '2017-06-27T13:01:08-05:00'
                      cc_emails: support@example.com
                      tax_exempt: true
                    product:
                      id: 4470347
                      name: Zero Dollar Product
                      handle: zero-dollar-product
                      description: ''
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval:
                      expiration_interval_unit: never
                      created_at: '2017-03-23T10:54:12-05:00'
                      updated_at: '2017-04-20T15:18:46-05:00'
                      price_in_cents: 0
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents:
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: month
                      archived_at:
                      require_credit_card: false
                      return_params: ''
                      taxable: false
                      update_return_url: ''
                      tax_code: ''
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: ''
                      product_family:
                        id: 997233
                        name: Acme Products
                        description: ''
                        handle: acme-products
                        accounting_code:
                      public_signup_pages:
                      - id: 316810
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargify.com/subscribe/69x825m78v3d/zero-dollar-product
    operationId: resumeSubscription
    description: Resume a paused (on-hold) subscription. If the normal next renewal
      date has not passed, the subscription will return to active and will renew on
      that date.  Otherwise, it will behave like a reactivation, setting the billing
      date to 'now' and charging the subscriber.
    parameters:
    - schema:
        type: string
        default: prorated
        enum:
        - prorated
        - immediate
        - delayed
      in: query
      name: calendar_billing['resumption_charge']
      description: "(For calendar billing subscriptions only) The way that the resumed
        subscription's charge should be handled"
"/subscriptions/{subscription_id}/hold.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Hold / Pause Subscription
    tags:
    - Subscription Status
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 18220670
                    state: on-hold
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2017-06-27T13:45:15-05:00'
                    created_at: '2017-06-27T13:45:13-05:00'
                    updated_at: '2017-06-30T09:26:50-05:00'
                    expires_at:
                    balance_in_cents: 10000
                    current_period_ends_at: '2017-06-30T12:00:00-05:00'
                    next_assessment_at: '2017-06-30T12:00:00-05:00'
                    canceled_at:
                    cancellation_message:
                    next_product_id:
                    cancel_at_end_of_period: false
                    payment_collection_method: automatic
                    snap_day: end
                    cancellation_method:
                    current_period_started_at: '2017-06-27T13:45:13-05:00'
                    previous_state: active
                    signup_payment_id: 191819284
                    signup_revenue: '0.00'
                    delayed_cancel_at:
                    coupon_code:
                    total_revenue_in_cents: 0
                    product_price_in_cents: 0
                    product_version_number: 1
                    payment_type:
                    referral_code: d3pw7f
                    coupon_use_count:
                    coupon_uses_allowed:
                    reason_code:
                    automatically_resume_at:
                    current_billing_amount_in_cents: 10000
                    customer:
                      id: 17780587
                      first_name: Catie
                      last_name: Test
                      organization: Acme, Inc.
                      email: catie@example.com
                      created_at: '2017-06-27T13:01:05-05:00'
                      updated_at: '2017-06-30T09:23:10-05:00'
                      reference: 123ABC
                      address: 123 Anywhere Street
                      address_2: 'Apartment #10'
                      city: Los Angeles
                      state: CA
                      zip: '90210'
                      country: US
                      phone: 555-555-5555
                      portal_invite_last_sent_at: '2017-06-27T13:45:16-05:00'
                      portal_invite_last_accepted_at:
                      verified: true
                      portal_customer_created_at: '2017-06-27T13:01:08-05:00'
                      cc_emails: support@example.com
                      tax_exempt: true
                    product:
                      id: 4470347
                      name: Zero Dollar Product
                      handle: zero-dollar-product
                      description: ''
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval:
                      expiration_interval_unit: never
                      created_at: '2017-03-23T10:54:12-05:00'
                      updated_at: '2017-04-20T15:18:46-05:00'
                      price_in_cents: 0
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents:
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: month
                      archived_at:
                      require_credit_card: false
                      return_params: ''
                      taxable: false
                      update_return_url: ''
                      tax_code: ''
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: ''
                      product_family:
                        id: 997233
                        name: Acme Products
                        description: ''
                        handle: acme-products
                        accounting_code:
                      public_signup_pages:
                      - id: 316810
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargify.com/subscribe/69x825m78v3d/zero-dollar-product
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - This subscription is not eligible to be put on hold.
    operationId: pauseSubscription
    description: |-
      This will place the subscription in the on_hold state and it will not renew.

      ## Limitations

      You may not place a subscription on hold if the `next_billing` date is within 24 hours.
    requestBody:
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                hold:
                  automatically_resume_at: '2017-05-25T11:25:00Z'
            properties:
              hold:
                type: object
                properties:
                  automatically_resume_at:
                    type: string
          examples:
            Example:
              value:
                hold:
                  automatically_resume_at: '2017-05-25T11:25:00Z'
  put:
    summary: Update Automatic Subscription Resumption
    tags:
    - Subscription Status
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 20359140
                    state: on_hold
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2018-01-05T17:15:50-06:00'
                    created_at: '2018-01-05T17:15:49-06:00'
                    updated_at: '2018-01-09T10:26:14-06:00'
                    expires_at:
                    balance_in_cents: 0
                    current_period_ends_at: '2023-01-05T17:15:00-06:00'
                    next_assessment_at: '2023-01-05T17:15:00-06:00'
                    canceled_at:
                    cancellation_message:
                    next_product_id:
                    cancel_at_end_of_period: false
                    payment_collection_method: automatic
                    snap_day:
                    cancellation_method:
                    current_period_started_at: '2018-01-05T17:15:49-06:00'
                    previous_state: active
                    signup_payment_id: 219829722
                    signup_revenue: '100.00'
                    delayed_cancel_at:
                    coupon_code:
                    total_revenue_in_cents: 10009991
                    product_price_in_cents: 10000
                    product_version_number: 1
                    payment_type: credit_card
                    referral_code: 8y7jqr
                    coupon_use_count:
                    coupon_uses_allowed:
                    reason_code:
                    automatically_resume_at: '2019-01-20T00:00:00-06:00'
                    coupon_codes: []
                    customer:
                      id: 19948683
                      first_name: Vanessa
                      last_name: Test
                      organization: ''
                      email: vanessa@example.com
                      created_at: '2018-01-05T17:15:49-06:00'
                      updated_at: '2018-01-05T17:15:51-06:00'
                      reference:
                      address: 123 Anywhere Ln
                      address_2: ''
                      city: Boston
                      state: MA
                      zip: '02120'
                      country: US
                      phone: 555-555-1212
                      portal_invite_last_sent_at: '2018-01-05T17:15:51-06:00'
                      portal_invite_last_accepted_at:
                      verified:
                      portal_customer_created_at: '2018-01-05T17:15:51-06:00'
                      cc_emails:
                      tax_exempt: false
                    product:
                      id: 4535643
                      name: Annual Product
                      handle: annual-product
                      description: ''
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval:
                      expiration_interval_unit: never
                      created_at: '2017-08-25T10:25:31-05:00'
                      updated_at: '2017-08-25T10:25:31-05:00'
                      price_in_cents: 10000
                      interval: 12
                      interval_unit: month
                      initial_charge_in_cents:
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: month
                      archived_at:
                      require_credit_card: true
                      return_params: ''
                      taxable: false
                      update_return_url: ''
                      tax_code: ''
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: ''
                      product_family:
                        id: 1025627
                        name: Acme Products
                        description: ''
                        handle: acme-products
                        accounting_code:
                      public_signup_pages: []
                    credit_card:
                      id: 13826563
                      first_name: Bomb 3
                      last_name: Test
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 1
                      expiration_year: 2028
                      customer_id: 19948683
                      current_vault: bogus
                      vault_token: '1'
                      billing_address: 123 Anywhere Lane
                      billing_city: Boston
                      billing_state: Ma
                      billing_zip: '02120'
                      billing_country: US
                      customer_vault_token:
                      billing_address_2: ''
                      payment_type: credit_card
    operationId: updateAutomaticSubscriptionResumption
    description: |-
      Once a subscription has been paused / put on hold, you can update the date which was specified to automatically resume the subscription.

      To update a subscription's resume date, use this method to change or update the `automatically_resume_at` date.

      ### Remove the resume date

      Alternately, you can change the `automatically_resume_at` to `null` if you would like the subscription to not have a resume date.
    requestBody:
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                hold:
                  automatically_resume_at: '2019-01-20'
            properties:
              hold:
                type: object
                properties:
                  automatically_resume_at:
                    type:
                    - string
                    - 'null'
          examples:
            Example:
              value:
                hold:
                  automatically_resume_at: '2019-01-20'
"/subscriptions/{subscription_id}/reactivate.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  put:
    summary: Reactivate Subscription
    tags:
    - Subscription Status
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 18220670
                    state: active
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2017-06-27T13:45:15-05:00'
                    created_at: '2017-06-27T13:45:13-05:00'
                    updated_at: '2017-06-30T09:26:50-05:00'
                    expires_at:
                    balance_in_cents: 10000
                    current_period_ends_at: '2017-06-30T12:00:00-05:00'
                    next_assessment_at: '2017-06-30T12:00:00-05:00'
                    canceled_at:
                    cancellation_message:
                    next_product_id:
                    cancel_at_end_of_period: false
                    payment_collection_method: automatic
                    snap_day: end
                    cancellation_method:
                    current_period_started_at: '2017-06-27T13:45:13-05:00'
                    previous_state: active
                    signup_payment_id: 191819284
                    signup_revenue: '0.00'
                    delayed_cancel_at:
                    coupon_code:
                    total_revenue_in_cents: 0
                    product_price_in_cents: 0
                    product_version_number: 1
                    payment_type:
                    referral_code: d3pw7f
                    coupon_use_count:
                    coupon_uses_allowed:
                    reason_code:
                    automatically_resume_at:
                    current_billing_amount_in_cents: 10000
                    customer:
                      id: 17780587
                      first_name: Catie
                      last_name: Test
                      organization: Acme, Inc.
                      email: catie@example.com
                      created_at: '2017-06-27T13:01:05-05:00'
                      updated_at: '2017-06-30T09:23:10-05:00'
                      reference: 123ABC
                      address: 123 Anywhere Street
                      address_2: 'Apartment #10'
                      city: Los Angeles
                      state: CA
                      zip: '90210'
                      country: US
                      phone: 555-555-5555
                      portal_invite_last_sent_at: '2017-06-27T13:45:16-05:00'
                      portal_invite_last_accepted_at:
                      verified: true
                      portal_customer_created_at: '2017-06-27T13:01:08-05:00'
                      cc_emails: support@example.com
                      tax_exempt: true
                      vat_number: '012345678'
                    product:
                      id: 4470347
                      name: Zero Dollar Product
                      handle: zero-dollar-product
                      description: ''
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval:
                      expiration_interval_unit: never
                      created_at: '2017-03-23T10:54:12-05:00'
                      updated_at: '2017-04-20T15:18:46-05:00'
                      price_in_cents: 0
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents:
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: month
                      archived_at:
                      require_credit_card: false
                      return_params: ''
                      taxable: false
                      update_return_url: ''
                      tax_code: ''
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: ''
                      product_family:
                        id: 997233
                        name: Acme Products
                        description: ''
                        handle: acme-products
                        accounting_code:
                      public_signup_pages:
                      - id: 316810
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargify.com/subscribe/69x825m78v3d/zero-dollar-product
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - Cannot reactivate a subscription that is not marked "Canceled",
                    "Unpaid", or "Trial Ended".
                  - Request was 'resume only', but this subscription cannot be resumed.
                  - The credit card on file could not be charged.
    operationId: reactivateSubscription
    description: |-
      Chargify offers the ability to reactivate a previously canceled subscription. For details on how the reactivation works, and how to reactivate subscriptions through the application, see [reactivation](https://chargify.zendesk.com/hc/en-us/articles/4407898737691).

      **Please note: The term
      "resume" is used also during another process in Chargify. This occurs when an on-hold subscription is "resumed". This returns the subscription to an active state.**

      + The response returns the subscription object in the `active` or `trialing` state.
      + The `canceled_at` and `cancellation_message` fields do not have values.
      + The method works for "Canceled" or "Trial Ended" subscriptions.
      + It will not work for items not marked as "Canceled", "Unpaid", or "Trial Ended".

      ## Resume the current billing period for a subscription

      A subscription is considered "resumable" if you are attempting to reactivate within the billing period the subscription was canceled in.

      A resumed subscription's billing date remains the same as before it was canceled. In other words, it does not start a new billing period. Payment may or may not be collected for a resumed subscription, depending on whether or not the subscription had a balance when it was canceled (for example, if it was canceled because of dunning).

      Consider a subscription which was created on June 1st, and would renew on July 1st. The subscription is then canceled on June 15.

      If a reactivation with `resume: true` were attempted _before_ what would have been the next billing date of July 1st, then Chargify would resume the subscription.

      If a reactivation with `resume: true` were attempted _after_ what would have been the next billing date of July 1st, then Chargify would not resume the subscription, and instead it would be reactivated with a new billing period.

      | Canceled | Reactivation | Resumable? |
      |---|---|---|
      | Jun 15 | June 28 | Yes |
      | Jun 15 | July 2 | No |

      ## Reactivation Scenarios

      ### Reactivating Canceled Subscription While Preserving Balance

      + Given you have a product that costs $20
      + Given you have a canceled subscription to the $20 product
          + 1 charge should exist for $20
          + 1 payment should exist for $20
      + When the subscription has canceled due to dunning, it retained a negative balance of $20

      #### Results

      The resulting charges upon reactivation will be:
      + 1 charge for $20 for the new product
      + 1 charge for $20 for the balance due
      + Total charges = $40

      + The subscription will transition to active
      + The subscription balance will be zero

      ### Reactivating a Canceled Subscription With Coupon

      + Given you have a canceled subscription
      + It has no current period defined
      + You have a coupon code "EARLYBIRD"
      + The coupon is set to recur for 6 periods

      PUT request sent to:
      `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?coupon_code=EARLYBIRD`

      #### Results

      + The subscription will transition to active
      + The subscription should have applied a coupon with code "EARLYBIRD"

      ### Reactivating Canceled Subscription With a Trial, Without the include_trial Flag

      + Given you have a canceled subscription
      + The product associated with the subscription has a trial

      + PUT request to
      `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json`


      #### Results
      + The subscription will transition to active

      ### Reactivating Canceled Subscription With Trial, With the include_trial Flag

      + Given you have a canceled subscription
      + The product associated with the subscription has a trial

      + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?include_trial=1`


      #### Results

      + The subscription will transition to trialing

      ### Reactivating Trial Ended Subscription

      + Given you have a trial_ended subscription
      + Send a PUT request

      #### Results

      + The subscription will transition to active

      ### Reactivating a trial ended subscription, without the include_trial flag

      + Given you have a trial_ended subscription
      + The product associated with the subscription has a trial
      + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json`

      #### Results

      + The subscription will transition to active

      ### Resuming a Canceled Subscription

      + Given you have a `canceled` subscription and it is resumable
      + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume=true`

      #### Results

      + The subscription will transition to active
      + The next billing date should not have changed

      ### Attempting to resume a subscription which is not resumable

      + Given you have a `canceled` subscription, and it is not resumable
      + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume=true`

      #### Results

      + The subscription will transition to active, with a new billing period.

      ### Attempting to resume but not reactivate a subscription which is not resumable

      + Given you have a `canceled` subscription, and it is not resumable
      + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume[require_resume]=true`
      + The response status should be "422 UNPROCESSABLE ENTITY"
      + The subscription should be canceled with the following response
      ```
        {
          "errors": ["Request was 'resume only', but this subscription cannot be resumed."]
        }
      ```

      #### Results

      + The subscription should remain `canceled`
      + The next billing date should not have changed

      ### Resuming Subscription Which Was Trialing

      + Given you have a `trial_ended` subscription, and it is resumable
      + And the subscription was canceled in the middle of a trial
      + And there is still time left on the trial
      + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume=true`

      #### Results

      + The subscription will transition to trialing
      + The next billing date should not have changed

      ### Resuming Subscription Which Was trial_ended

      + Given you have a `trial_ended` subscription, and it is resumable
      + Send a PUT request to `https://acme.chargify.com/subscriptions/{subscription_id}/reactivate.json?resume=true`

      #### Results

      + The subscription will transition to active
      + The next billing date should not have changed
      + Any product-related charges should have been collected
    parameters: []
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              calendar_billing:
                type: object
                description: These values are only applicable to subscriptions using
                  calendar billing
                properties:
                  reactivation_charge:
                    type: string
                    enum:
                    - prorated
                    - immediate
                    - delayed
                    description: 'You may choose how to handle the reactivation charge
                      for that subscription: 1) `prorated` A prorated charge for the
                      product price will be attempted for to complete the period 2)
                      `immediate` A full-price charge for the product price will be
                      attempted immediately 3) `delayed` A full-price charge for the
                      product price will be attempted at the next renewal'
                    default: prorated
              include_trial:
                type: boolean
                description: If `true` is sent, the reactivated Subscription will
                  include a trial if one is available. If `false` is sent, the trial
                  period will be ignored.
              preserve_balance:
                type: boolean
                description: If `true` is passed, the existing subscription balance
                  will NOT be cleared/reset before adding the additional reactivation
                  charges.
              coupon_code:
                type: string
                description: The coupon code to be applied during reactivation.
              use_credits_and_prepayments:
                type: boolean
                description: If true is sent, Chargify will use service credits and
                  prepayments upon reactivation. If false is sent, the service credits
                  and prepayments will be ignored.
              resume:
                type:
                - boolean
                - object
                description: 'If `true`, Chargify will attempt to resume the subscription''s
                  billing period. if not resumable, the subscription will be reactivated
                  with a new billing period. If `false`: Chargify will only attempt
                  to reactivate the subscription.'
                properties:
                  require_resume:
                    type: boolean
                    description: Chargify will only attempt to resume the subscription's
                      billing period. If not resumable, the subscription will be left
                      in it's current state.
                  forgive_balance:
                    type: boolean
                    description: Indicates whether or not Chargify should clear the
                      subscription's existing balance before attempting to resume
                      the subscription. If subscription cannot be resumed, the balance
                      will remain as it was before the attempt to resume was made.
          examples:
            Example:
              value:
                calendar_billing:
                  reactivation_charge: prorated
                include_trial: true
                preserve_balance: true
                coupon_code: 10OFF
                use_credits_and_prepayments: true
                resume: true
"/subscriptions/{subscription_id}/migrations.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Migrate Subscription Product
    tags:
    - Subscription Products
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 15054201
                    state: trialing
                    trial_started_at: '2016-11-03T13:43:36-04:00'
                    trial_ended_at: '2016-11-10T12:43:36-05:00'
                    activated_at: '2016-11-02T10:20:57-04:00'
                    created_at: '2016-11-02T10:20:55-04:00'
                    updated_at: '2016-11-03T13:43:36-04:00'
                    expires_at:
                    balance_in_cents: -13989
                    current_period_ends_at: '2016-11-10T12:43:36-05:00'
                    next_assessment_at: '2016-11-10T12:43:36-05:00'
                    canceled_at:
                    cancellation_message:
                    next_product_id:
                    cancel_at_end_of_period: false
                    payment_collection_method: automatic
                    snap_day:
                    cancellation_method:
                    current_period_started_at: '2016-11-03T13:43:35-04:00'
                    previous_state: active
                    signup_payment_id: 160680121
                    signup_revenue: '0.00'
                    delayed_cancel_at:
                    coupon_code:
                    total_revenue_in_cents: 14000
                    product_price_in_cents: 1000
                    product_version_number: 6
                    payment_type: credit_card
                    referral_code: ghnhvy
                    coupon_use_count:
                    coupon_uses_allowed:
                    customer:
                      id: 14543792
                      first_name: Frankie
                      last_name: Test
                      organization:
                      email: testfrankie111@test.com
                      created_at: '2016-11-02T10:20:55-04:00'
                      updated_at: '2016-11-02T10:20:58-04:00'
                      reference:
                      address:
                      address_2:
                      city:
                      state:
                      zip:
                      country:
                      phone: '5555551212'
                      portal_invite_last_sent_at: '2016-11-02T10:20:58-04:00'
                      portal_invite_last_accepted_at:
                      verified: false
                      portal_customer_created_at: '2016-11-02T10:20:58-04:00'
                      cc_emails:
                    product:
                      id: 3861800
                      name: Trial Product
                      handle: trial-product
                      description: Trial period with payment expected at end of trial.
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval:
                      expiration_interval_unit: never
                      created_at: '2016-07-08T09:53:55-04:00'
                      updated_at: '2016-09-05T13:00:36-04:00'
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents:
                      trial_price_in_cents: 0
                      trial_interval: 7
                      trial_interval_unit: day
                      archived_at:
                      require_credit_card: true
                      return_params: ''
                      taxable: false
                      update_return_url: ''
                      initial_charge_after_trial: false
                      version_number: 6
                      update_return_params: ''
                      product_family:
                        id: 527890
                        name: Acme Projects
                        description: ''
                        handle: billing-plans
                        accounting_code:
                      public_signup_pages:
                      - id: 294791
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargify.com/subscribe/xv52yrcc3byx/trial-product
                    credit_card:
                      id: 10088716
                      first_name: F
                      last_name: NB
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 1
                      expiration_year: 2017
                      customer_id: 14543792
                      current_vault: bogus
                      vault_token: '1'
                      billing_address: 123 Montana Way
                      billing_city: Billings
                      billing_state: MT
                      billing_zip: '59101'
                      billing_country: US
                      customer_vault_token:
                      billing_address_2: Apt. 10
                      payment_type: credit_card
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - No credit card was on file for the $200.00 balance
                  - This subscription is not eligible for a prorated migration
                  - Invalid Product
    operationId: migrateSubscriptionProduct
    description: |-
      In order to create a migration, you must pass the `product_id` or `product_handle` in the object when you send a POST request. You may also pass either a `product_price_point_id` or `product_price_point_handle` to choose which price point the subscription is moved to. If no price point identifier is passed the subscription will be moved to the products default price point. The response will be the updated subscription.

      ## Valid Subscriptions

      Subscriptions should be in the `active` or `trialing` state in order to be migrated.

      (For backwards compatibility reasons, it is possible to migrate a subscription that is in the `trial_ended` state via the API, however this is not recommended.  Since `trial_ended` is an end-of-life state, the subscription should be canceled, the product changed, and then the subscription can be reactivated.)

      ## Migrations Documentation

      Full documentation on how to record Migrations in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407898373531).

      ## Failed Migrations

      One of the most common ways that a migration can fail is when the attempt is made to migrate a subscription to it's current product. Please be aware of this issue!

      ## Migration 3D Secure - Stripe

      It may happen that a payment needs 3D Secure Authentication when the subscription is migrated to a new product; this is referred to in our help docs as a [post-authentication flow](https://chargify.zendesk.com/hc/en-us/articles/4407754086811). The server returns `422 Unprocessable Entity` in this case with the following response:

      ```json
      {
        "errors": [
          "Your card was declined. This transaction requires 3D secure authentication."
        ],
        "gateway_payment_id": "pi_1F0aGoJ2UDb3Q4av7zU3sHPh",
        "description": "This card requires 3D secure authentication. Redirect the customer to the URL from the action_link attribute to authenticate. Attach callback_url param to this URL if you want to be notified about the result of 3D Secure authentication. Attach redirect_url param to this URL if you want to redirect a customer back to your page after 3D Secure authentication. Example: https://mysite.chargify.com/3d-secure/pi_1FCm4RKDeye4C0XfbqquXRYm?one_time_token_id=128&callback_url=https://localhost:4000&redirect_url=https://yourpage.com will do a POST request to https://localhost:4000 after payment is authenticated and will redirect a customer to https://yourpage.com after 3DS authentication.",
        "action_link": "http://acme.chargify.com/3d-secure/pi_1F0aGoJ2UDb3Q4av7zU3sHPh?one_time_token_id=242"
      }
      ```

      To let the customer go through 3D Secure Authentication, they need to be redirected to the URL specified in `action_link`.
      Optionally, you can specify `callback_url` parameter in the `action_link` URL if you’d like to be notified about the result of 3D Secure Authentication. The `callback_url` will return the following information:

      - whether the authentication was successful (`success`)
      - the gateway ID for the payment (`gateway_payment_id`)
      - the subscription ID (`subscription_id`)

      Lastly, you can also specify a `redirect_url` within the `action_link` URL if you’d like to redirect a customer back to your site.

      It is not possible to use `action_link` in an iframe inside a custom application. You have to redirect the customer directly to the `action_link`, then, to be notified about the result, use `redirect_url` or `callback_url`.

      The final URL that you send a customer to to complete 3D Secure may resemble the following, where the first half is the `action_link` and the second half contains a `redirect_url` and `callback_url`: `https://mysite.chargify.com/3d-secure/pi_1FCm4RKDeye4C0XfbqquXRYm?one_time_token_id=128&callback_url=https://localhost:4000&redirect_url=https://yourpage.com`

      ### Example Redirect Flow

      You may wish to redirect customers to different pages depending on whether their SCA was performed successfully. Here's an example flow to use as a reference:

      1. Create a migration via API; it requires 3DS
      2. You receive a `gateway_payment_id` in the `action_link` along other params in the response.
      3. Use this `gateway_payment_id` to, for example, connect with your internal resources or generate a session_id
      4. Include 1 of those attributes inside the `callback_url` and `redirect_url` to be aware which “session” this applies to
      5. Redirect the customer to the `action_link` with `callback_url` and `redirect_url` applied
      6. After the customer finishes 3DS authentication, we let you know the result by making a request to applied `callback_url`.
      7. After that, we redirect the customer to the `redirect_url`; at this point the result of authentication is known
      8. Optionally, you can use the applied "msg" param in the `redirect_url` to determine whether it was successful or not.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              migration:
                type: object
                properties:
                  product_id:
                    type: integer
                    description: 'The ID of the target Product. Either a product_id
                      or product_handle must be present. A Subscription can be migrated
                      to another product for both the current Product Family and another
                      Product Family. Note: Going to another Product Family, components
                      will not be migrated as well.'
                  product_price_point_id:
                    type: integer
                    description: The ID of the specified product's price point. This
                      can be passed to migrate to a non-default price point.
                  include_trial:
                    type: boolean
                    description: Whether to include the trial period configured for
                      the product price point when starting a new billing period.
                      Note that if preserve_period is set, then include_trial will
                      be ignored.
                    default: false
                  include_initial_charge:
                    type: boolean
                    default: false
                    description: 'If `true` is sent initial charges will be assessed. '
                  include_coupons:
                    type: boolean
                    description: 'If `true` is sent, any coupons associated with the
                      subscription will be applied to the migration. If `false` is
                      sent, coupons will not be applied. Note: When migrating to a
                      new product family, the coupon cannot migrate.'
                    default: true
                  preserve_period:
                    type: boolean
                    description: If `false` is sent, the subscription's billing period
                      will be reset to today and the full price of the new product
                      will be charged. If `true` is sent, the billing period will
                      not change and a prorated charge will be issued for the new
                      product.
                    default: false
                  product_handle:
                    type: string
                    description: 'The handle of the target Product. Either a product_id
                      or product_handle must be present. A Subscription can be migrated
                      to another product for both the current Product Family and another
                      Product Family. Note: Going to another Product Family, components
                      will not be migrated as well. '
                  product_price_point_handle:
                    type: string
                    description: The ID or handle of the specified product's price
                      point. This can be passed to migrate to a non-default price
                      point.
                  proration:
                    type: object
                    properties:
                      preserve_period:
                        type: boolean
                        description: The alternative to sending preserve_period as
                          a direct attribute to migration
          examples:
            Example:
              value:
                migration:
                  product_id: 3801242
                  include_trial: false
                  include_initial_charge: false
                  include_coupons: true
                  preserve_period: true
"/subscriptions/{subscription_id}/migrations/preview.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Preview Subscription Product Migration
    tags:
    - Subscription Products
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                migration:
                  type: object
                  properties:
                    prorated_adjustment_in_cents:
                      type: integer
                      description: The amount of the prorated adjustment that would
                        be issued for the current subscription.
                    charge_in_cents:
                      type: integer
                      description: The amount of the charge that would be created
                        for the new product.
                    payment_due_in_cents:
                      type: integer
                      description: The amount of the payment due in the case of an
                        upgrade.
                    credit_applied_in_cents:
                      type: integer
                      description: The amount of the credit that would be applied
                        in the case that some is available to the subscription
            examples:
              Example:
                value:
                  migration:
                    prorated_adjustment_in_cents: 0
                    charge_in_cents: 5000
                    payment_due_in_cents: 0
                    credit_applied_in_cents: 0
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - Subscription must be active
    operationId: previewSubscriptionProductMigration
    description: |-
      ## Previewing a future date
      It is also possible to preview the migration for a date in the future, as long as it's still within the subscription's current billing period, by passing a `proration_date` along with the request (eg: `"proration_date": "2020-12-18T18:25:43.511Z"`).

      This will calculate the prorated adjustment, charge, payment and credit applied values assuming the migration is done at that date in the future as opposed to right now.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              migration:
                type: object
                properties:
                  product_id:
                    type: integer
                    description: 'The ID of the target Product. Either a product_id
                      or product_handle must be present. A Subscription can be migrated
                      to another product for both the current Product Family and another
                      Product Family. Note: Going to another Product Family, components
                      will not be migrated as well.'
                  product_price_point_id:
                    type: integer
                    description: The ID of the specified product's price point. This
                      can be passed to migrate to a non-default price point.
                  include_trial:
                    type: boolean
                    description: Whether to include the trial period configured for
                      the product price point when starting a new billing period.
                      Note that if preserve_period is set, then include_trial will
                      be ignored.
                    default: false
                  include_initial_charge:
                    type: boolean
                    default: false
                    description: 'If `true` is sent initial charges will be assessed. '
                  include_coupons:
                    type: boolean
                    description: 'If `true` is sent, any coupons associated with the
                      subscription will be applied to the migration. If `false` is
                      sent, coupons will not be applied. Note: When migrating to a
                      new product family, the coupon cannot migrate.'
                    default: true
                  preserve_period:
                    type: boolean
                    description: If `false` is sent, the subscription's billing period
                      will be reset to today and the full price of the new product
                      will be charged. If `true` is sent, the billing period will
                      not change and a prorated charge will be issued for the new
                      product.
                    default: false
                  product_handle:
                    type: string
                    description: 'The handle of the target Product. Either a product_id
                      or product_handle must be present. A Subscription can be migrated
                      to another product for both the current Product Family and another
                      Product Family. Note: Going to another Product Family, components
                      will not be migrated as well. '
                  product_price_point_handle:
                    type: string
                    description: The ID or handle of the specified product's price
                      point. This can be passed to migrate to a non-default price
                      point.
                  proration:
                    type: object
                    properties:
                      preserve_period:
                        type: boolean
                        description: The alternative to sending preserve_period as
                          a direct attribute to migration
                  proration_date:
                    type: string
                    description: The date that the proration is calculated from for
                      the preview
"/subscriptions/{subscription_id}/override.json":
  parameters:
  - "$ref": "#/components/parameters/subscription-id-required-path"
  put:
    summary: Override Subscription
    tags:
    - Subscriptions
    responses:
      '204':
        description: No Content
      '400':
        description: Bad Request
      '422':
        description: Unprocessable Entity (WebDAV)
    operationId: overrideSubscription
    description: |-
      This API endpoint allows you to set certain subscription fields that are usually managed for you automatically. Some of the fields can be set via the normal Subscriptions Update API, but others can only be set using this endpoint.

      This endpoint is provided for cases where you need to “align” Chargify data with data that happened in your system, perhaps before you started using Chargify. For example, you may choose to import your historical subscription data, and would like the activation and cancellation dates in Chargify to match your existing historical dates. Chargify does not backfill historical events (i.e. from the Events API), but some static data can be changed via this API.

      Why are some fields only settable from this endpoint, and not the normal subscription create and update endpoints? Because we want users of this endpoint to be aware that these fields are usually managed by Chargify, and using this API means **you are stepping out on your own.**

      Changing these fields will not affect any other attributes. For example, adding an expiration date will not affect the next assessment date on the subscription.

      If you regularly need to override the current_period_starts_at for new subscriptions, this can also be accomplished by setting both `previous_billing_at` and `next_billing_at` at subscription creation. See the documentation on [Importing Subscriptions](./b3A6MTQxMDgzODg-create-subscription#subscriptions-import) for more information.

      ## Limitations

      When passing `current_period_starts_at` some validations are made:

      1. The subscription needs to be unbilled (no statements or invoices).
      2. The value passed must be a valid date/time. We recommend using the iso 8601 format.
      3. The value passed must be before the current date/time.

      If unpermitted parameters are sent, a 400 HTTP response is sent along with a string giving the reason for the problem.
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Override-Subscription-Request"
          examples:
            Example:
              value:
                subscription:
                  activated_at: '1999-12-01'
                  canceled_at: '2000-12-31'
                  cancellation_message: Original cancellation in 2000
                  expires_at: '2001-07-15'
      description: Only these fields are available to be set.
"/subscriptions/{subscription_id}/delayed_cancel.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Initiate Delayed Cancellation
    tags:
    - Subscription Status
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      '404':
        description: Not Found
    operationId: initiateDelayedCancellation
    description: |-
      Chargify offers the ability to cancel a subscription at the end of the current billing period. This period is set by its current product.

      Requesting to cancel the subscription at the end of the period sets the `cancel_at_end_of_period` flag to true.

      Note that you cannot set `cancel_at_end_of_period` at subscription creation, or if the subscription is past due.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              subscription:
                type: object
                properties:
                  cancellation_message:
                    type: string
                    description: For your internal use. An indication as to why the
                      subscription is being canceled
                  reason_code:
                    type: string
                    description: The reason code associated with the cancellation.
                      See the list of reason codes associated with your site.
  delete:
    summary: Cancel Delayed Cancellation
    tags:
    - Subscription Status
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
            examples:
              Example:
                value:
                  message: This subscription will no longer be canceled
      '404':
        description: Not Found
    operationId: stopDelayedCancellation
    description: |-
      Removing the delayed cancellation on a subscription will ensure that it doesn't get canceled at the end of the period that it is in. The request will reset the `cancel_at_end_of_period` flag to `false`.

      This endpoint is idempotent. If the subscription was not set to cancel in the future, removing the delayed cancellation has no effect and the call will be successful.
"/subscriptions/{subscription_id}/cancel_dunning.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Cancel Dunning
    tags:
    - Subscription Status
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
    operationId: cancelDunning
    description: If a subscription is currently in dunning, the subscription will
      be set to active and the active Dunner will be resolved.
"/subscriptions/{subscription_id}/renewals/preview.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Preview Renewal
    tags:
    - Subscription Status
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                renewal_preview:
                  type: object
                  properties:
                    next_assessment_at:
                      type: string
                      description: The timestamp for the subscription’s next renewal
                    subtotal_in_cents:
                      type: integer
                      description: An integer representing the amount of the total
                        pre-tax, pre-discount charges that will be assessed at the
                        next renewal
                    total_tax_in_cents:
                      type: integer
                      description: An integer representing the total tax charges that
                        will be assessed at the next renewal
                    total_discount_in_cents:
                      type: integer
                      description: An integer representing the amount of the coupon
                        discounts that will be applied to the next renewal
                    total_in_cents:
                      type: integer
                      description: An integer representing the total amount owed,
                        less any discounts, that will be assessed at the next renewal
                    existing_balance_in_cents:
                      type: integer
                      description: An integer representing the amount of the subscription’s
                        current balance
                    total_amount_due_in_cents:
                      type: integer
                      description: An integer representing the existing_balance_in_cents
                        plus the total_in_cents
                    uncalculated_taxes:
                      type: boolean
                      description: A boolean indicating whether or not additional
                        taxes will be calculated at the time of renewal. This will
                        be true if you are using Avalara and the address of the subscription
                        is in one of your defined taxable regions.
                    line_items:
                      type: array
                      description: An array of objects representing the individual
                        transactions that will be created at the next renewal
                      items:
                        type: object
                        properties:
                          transaction_type:
                            type: string
                          kind:
                            type: string
                          amount_in_cents:
                            type: integer
                          memo:
                            type: string
                          discount_amount_in_cents:
                            type: integer
                          taxable_amount_in_cents:
                            type: integer
                          product_id:
                            type: integer
                          component_id:
                            type: integer
                          component_handle:
                            type: string
                          component_name:
                            type: string
                          product_handle:
                            type: string
            examples:
              Example:
                value:
                  renewal_preview:
                    next_assessment_at: '2017-03-13T12:50:55-04:00'
                    subtotal_in_cents: 6000
                    total_tax_in_cents: 0
                    total_discount_in_cents: 0
                    total_in_cents: 6000
                    existing_balance_in_cents: 0
                    total_amount_due_in_cents: 6000
                    uncalculated_taxes: false
                    line_items:
                    - transaction_type: charge
                      kind: baseline
                      amount_in_cents: 5000
                      memo: Gold Product (03/13/2017 - 04/13/2017)
                      discount_amount_in_cents: 0
                      taxable_amount_in_cents: 0
                      product_id: 1
                      product_handle: gold-product
                      product_name: Gold Product
                    - transaction_type: charge
                      kind: quantity_based_component
                      amount_in_cents: 1000
                      memo: 'Quantity Component: 10 Quantity Components'
                      discount_amount_in_cents: 0
                      taxable_amount_in_cents: 0
                      component_id: 104
                      component_handle: quantity-component
                      component_name: Quantity Component
    operationId: previewRenewal
    description: |-
      The Chargify API allows you to preview a renewal by posting to the renewals endpoint. Renewal Preview is an object representing a subscription’s next assessment. You can retrieve it to see a snapshot of how much your customer will be charged on their next renewal.

      The "Next Billing" amount and "Next Billing" date are already represented in the UI on each Subscriber's Summary. For more information, please see our documentation [here](https://chargify.zendesk.com/hc/en-us/articles/4407884887835#next-billing).

      ## Optional Component Fields

      This endpoint is particularly useful due to the fact that it will return the computed billing amount for the base product and the components which are in use by a subscriber.

      By default, the preview will include billing details for all components _at their **current** quantities_. This means:

      * Current `allocated_quantity` for quantity-based components
      * Current enabled/disabled status for on/off components
      * Current metered usage `unit_balance` for metered components
      * Current metric quantity value for events recorded thus far for events-based components

      In the above statements, "current" means the quantity or value as of the call to the renewal preview endpoint. We do not predict end-of-period values for components, so metered or events-based usage may be less than it will eventually be at the end of the period.

      Optionally, **you may provide your own custom quantities** for any component to see a billing preview for non-current quantities. This is accomplished by sending a request body with data under the `components` key. See the request body documentation below.

      ## Subscription Side Effects

      You can request a `POST` to obtain this data from the endpoint without any side effects. Plain and simple, this will preview data, not log any changes against a subscription.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              components:
                type: array
                description: An optional array of component definitions to preview.
                  Providing any component definitions here will override the actual
                  components on the subscription (and their quantities), and the billing
                  preview will contain only these components (in addition to any product
                  base fees).
                items:
                  type: object
                  properties:
                    component_id:
                      type:
                      - string
                      - integer
                      description: Either the component's Chargify id or its handle
                        prefixed with `handle:`
                    quantity:
                      type: integer
                      description: |-
                        The quantity for which you wish to preview billing. This is useful if you want to preview a predicted, higher usage value than is currently present on the subscription.

                        This quantity represents:

                        - Whether or not an on/off component is enabled - use 0 for disabled or 1 for enabled
                        - The desired allocated_quantity for a quantity-based component
                        - The desired unit_balance for a metered component
                        - The desired metric quantity for an events-based component
                    price_point_id:
                      type:
                      - string
                      - integer
                      description: Either the component price point's Chargify id
                        or its handle prefixed with `handle:`
          examples:
            Example:
              value:
                components:
                - component_id: 10708
                  quantity: 10000
                - component_id: handle:small-instance-hours
                  quantity: 10000
                  price_point_id: 8712
                - component_id: handle:large-instance-hours
                  quantity: 100
                  price_point_id: handle:startup-pricing
      description: ''
"/subscriptions/{subscription_id}/invoices.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
  post:
    summary: Create Invoice
    tags:
    - Invoices
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                invoice:
                  "$ref": "#/components/schemas/Invoice"
            examples:
              Example:
                value:
                  invoice:
                    uid: inv_98nbmb93gxjz8
                    site_id: 5
                    customer_id: 13
                    subscription_id: 17
                    number: '1'
                    sequence_number: 1
                    issue_date: '2020-12-02'
                    due_date: '2020-12-02'
                    paid_date:
                    status: open
                    collection_method: remittance
                    payment_instructions: ''
                    currency: USD
                    consolidation_level: none
                    parent_invoice_uid:
                    parent_invoice_number:
                    group_primary_subscription_id:
                    product_name: Digitized discrete initiative
                    product_family_name: Networked bottom-line orchestration
                    role: adhoc
                    seller:
                      name: Steuber, West and Hegmann 1
                      address:
                        street:
                        line2:
                        city:
                        state:
                        zip:
                        country:
                      phone: "(766) 316-0492"
                    customer:
                      chargify_id: 13
                      first_name: Dean
                      last_name: Adams
                      organization:
                      email: brandi1@example.com
                      vat_number:
                      reference:
                    memo: ''
                    billing_address:
                      street:
                      line2:
                      city:
                      state:
                      zip:
                      country:
                    shipping_address:
                      street:
                      line2:
                      city:
                      state:
                      zip:
                      country:
                    subtotal_amount: '1800.0'
                    discount_amount: '0.0'
                    tax_amount: '0.0'
                    total_amount: '1800.0'
                    credit_amount: '0.0'
                    paid_amount: '0.0'
                    refund_amount: '0.0'
                    due_amount: '1800.0'
                    line_items:
                    - uid: li_98nbmb9jgz84c
                      title: Some product
                      description: 12/02/2020 - 12/02/2020
                      quantity: '12.0'
                      unit_price: '150.0'
                      subtotal_amount: '1800.0'
                      discount_amount: '0.0'
                      tax_amount: '0.0'
                      total_amount: '1800.0'
                      tiered_unit_price: false
                      period_range_start: '2020-12-02'
                      period_range_end: '2020-12-02'
                      product_id:
                      product_version:
                      product_price_point_id:
                      component_id:
                      price_point_id:
                    discounts: []
                    taxes: []
                    credits: []
                    payments: []
                    refunds: []
                    custom_fields: []
                    public_url: https://www.test-chargifypay.com/invoice/inv_98nbmb93gxjz8?token=rmfmwvbdy4xmyw5f29j5gc6x
        headers: {}
      '201':
        description: Created
      '401':
        description: Unauthorized
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: object
    operationId: createInvoice
    description: "This endpoint will allow you to create an ad hoc invoice.\n\n###
      Basic Behavior\n\nYou can create a basic invoice by sending an array of line
      items to this endpoint. Each line item, at a minimum, must include a title,
      a quantity and a unit price. Example:\n\n```json\n{\n  \"invoice\": {\n    \"line_items\":
      [\n      {\n        \"title\": \"A Product\",\n        \"quantity\": 12,\n        \"unit_price\":
      \"150.00\"\n      }\n    ]\n  }\n}\n```\n\n### Catalog items\nInstead of creating
      custom products like in above example, You can pass existing items like products,
      components.\n\n```json\n{\n  \"invoice\": {\n    \"line_items\": [\n      {\n
      \       \"product_id\": \"handle:gold-product\",\n        \"quantity\": 2,\n
      \     }\n    ]\n  }\n}\n```\n\n\nThe price for each line item will be calculated
      as well as a total due amount for the invoice. Multiple line items can be sent.\n\n###
      Line items types\nWhen defining line item, You can choose one of 3 types for
      one line item:\n#### Custom item\nLike in basic behavior example above, You
      can pass `title` and `unit_price` for custom item.\n#### Product id\nProduct
      handle (with handle: prefix) or id from the scope of current subscription's
      site can be provided with `product_id`. By default `unit_price` is taken from
      product's default price point, but can be overwritten by passing `unit_price`
      or `product_price_point_id`. If `product_id` is used, following fields cannot
      be used: `title`, `component_id`.\n#### Component id\nComponent handle (with
      handle: prefix) or id from the scope of current subscription's site can be provided
      with `component_id`. If `component_id` is used, following fields cannot be used:
      `title`, `product_id`. By default `unit_price` is taken from product's default
      price point, but can be overwritten by passing `unit_price` or `price_point_id`.
      At this moment price points are supportted only for quantity based, on/off and
      metered components. For prepaid and event based billing components `unit_price`
      is required.\n\n### Coupons\nWhen creating ad hoc invoice, new discounts can
      be applied in following way:\n\n```json\n{\n  \"invoice\": {\n    \"line_items\":
      [\n      {\n        \"product_id\": \"handle:gold-product\",\n        \"quantity\":
      1\n      }\n    ],\n    \"coupons\": [ \n      {\n        \"code\": \"COUPONCODE\",\n
      \       \"percentage\": 50.0\n      }\n    ]\n  }\n}\n```\nIf You want to use
      existing coupon for discount creation, only `code` and optional `product_family_id`
      is needed\n\n```json\n...\n \"coupons\": [ \n      {\n        \"code\": \"FREESETUP\",\n
      \       \"product_family_id\": 1\n      }\n  ]\n...\n```\n\n### Coupon options\n####
      Code\nCoupon `code` will be displayed on invoice discount section.\nCoupon code
      can only contain uppercase letters, numbers, and allowed special characters.\nLowercase
      letters will be converted to uppercase. It can be used to select an existing
      coupon from the catalog, or as an ad hoc coupon when passed with `percentage`
      or `amount`.\n#### Percentage \nCoupon `percentage` can take values from 0 to
      100 and up to 4 decimal places. It cannot be used with `amount`. Only for ad
      hoc coupons, will be ignored if `code` is used to select an existing coupon
      from the catalog.\n#### Amount\nCoupon `amount` takes number value. It cannot
      be used with `percentage`. Used only when not matching existing coupon by `code`.
      \n#### Description\nOptional `description` will be displayed with coupon `code`.
      Used only when not matching existing coupon by `code`. \n#### Product Family
      id\nOptional `product_family_id` handle (with handle: prefix) or id is used
      to match existing coupon within site, when codes are not unique.\n#### Compounding
      Strategy\nOptional `compounding_strategy` for percentage coupons, can take values
      `compound` or `full-price`.\n\nFor amount coupons, discounts will be always
      calculated against the original item price, before other discounts are applied.\n\n`compound`
      strategy:\nPercentage-based discounts will be calculated against the remaining
      price, after prior discounts have been calculated. It is set by default.\n\n`full-price`
      strategy:\nPercentage-based discounts will always be calculated against the
      original item price, before other discounts are applied. \n\n### Line Item Options\n\n####
      Period Date Range\n\nA custom period date range can be defined for each line
      item with the `period_range_start` and `period_range_end` parameters. Dates
      must be sent in the `YYYY-MM-DD` format.\n`period_range_end` must be greater
      or equal `period_range_start`.\n\n#### Taxes\n\nThe `taxable` parameter can
      be sent as `true` if taxes should be calculated for a specific line item. For
      this to work, the site should be configured to use and calculate taxes. Further,
      if the site uses Avalara for tax calculations, a `tax_code` parameter should
      also be sent. For existing catalog items: products/components taxes cannot be
      overwritten.\n\n#### Price Point\nPrice point handle (with handle: prefix) or
      id from the scope of current subscription's site can be provided with `price_point_id`
      for components with `component_id` or `product_price_point_id` for products
      with `product_id` parameter. If price point is passed `unit_price` cannot be
      used. It can be used only with catalog items products and components.\n\n####
      Description\nOptional `description` parameter, it will overwrite default generated
      description for line item.\n\n### Invoice Options\n\n#### Issue Date\n\nBy default,
      invoices will be created with a issue date set to today. `issue_date` parameter
      can be send to alter that. Only dates in the past can be send. `issue_date`
      should be send in `YYYY-MM-DD` format.\n\n#### Net Terms\n\nBy default, invoices
      will be created with a due date matching the date of invoice creation. If a
      different due date is desired, the `net_terms` parameter can be sent indicating
      the number of days in advance the due date should be.\n\n#### Addresses\n\nThe
      seller, shipping and billing addresses can be sent to override the site's defaults.
      Each address requires to send a `first_name` at a minimum in order to work.
      Please see below for the details on which parameters can be sent for each address
      object.\n\n#### Memo and Payment Instructions\n\nA custom memo can be sent with
      the `memo` parameter to override the site's default. Likewise, custom payment
      instructions can be sent with the `payment_instrucions` parameter.\n\n#### Status\n\nBy
      default, invoices will be created with open status. Possible alternative is
      `draft`."
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              invoice:
                type: object
                properties:
                  line_items:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        quantity:
                          type:
                          - number
                          - string
                          description: The quantity can contain up to 8 decimal places.
                            i.e. 1.00 or 0.0012 or 0.00000065. If you submit a value
                            with more than 8 decimal places, we will round it down
                            to the 8th decimal place.
                          minimum: 0
                        unit_price:
                          description: The unit_price can contain up to 8 decimal
                            places. i.e. 1.00 or 0.0012 or 0.00000065. If you submit
                            a value with more than 8 decimal places, we will round
                            it down to the 8th decimal place.
                          type:
                          - number
                          - string
                        taxable:
                          type: boolean
                          description: |-
                            Set to true to automatically calculate taxes. Site must be configured to use and calculate taxes.

                            If using Avalara, a tax_code parameter must also be sent.
                        tax_code:
                          type: string
                        period_range_start:
                          type: string
                          description: YYYY-MM-DD
                        period_range_end:
                          type: string
                          description: YYYY-MM-DD
                        product_id:
                          type:
                          - string
                          - integer
                          description: Product handle or product id.
                        component_id:
                          type:
                          - string
                          - integer
                          description: Component handle or component id.
                        price_point_id:
                          type:
                          - string
                          - integer
                          description: Price point handle or id. For component.
                        product_price_point_id:
                          type:
                          - string
                          - integer
                        description:
                          type: string
                          maxLength: 255
                  issue_date:
                    type: string
                  net_terms:
                    type: integer
                    description: By default, invoices will be created with a due date
                      matching the date of invoice creation. If a different due date
                      is desired, the net_terms parameter can be sent indicating the
                      number of days in advance the due date should be.
                  payment_instructions:
                    type: string
                  memo:
                    type: string
                    description: A custom memo can be sent to override the site's
                      default.
                  seller_address:
                    type: object
                    description: Overrides the defaults for the site
                    properties:
                      first_name:
                        type: string
                      last_name:
                        type: string
                      phone:
                        type: string
                      address:
                        type: string
                      address_2:
                        type: string
                      city:
                        type: string
                      state:
                        type: string
                      zip:
                        type: string
                      country:
                        type: string
                  billing_address:
                    type: object
                    description: Overrides the default for the customer
                    properties:
                      first_name:
                        type: string
                      last_name:
                        type: string
                      phone:
                        type: string
                      address:
                        type: string
                      address_2:
                        type: string
                      city:
                        type: string
                      state:
                        type: string
                      zip:
                        type: string
                      country:
                        type: string
                  shipping_address:
                    type: object
                    description: Overrides the default for the customer
                    properties:
                      first_name:
                        type: string
                      last_name:
                        type: string
                      phone:
                        type: string
                      address:
                        type: string
                      address_2:
                        type: string
                      city:
                        type: string
                      state:
                        type: string
                      zip:
                        type: string
                      country:
                        type: string
                  coupons:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                        percentage:
                          type:
                          - string
                          - number
                          maximum: 100
                          example: 50
                        amount:
                          type:
                          - string
                          - number
                          minimum: 0
                        description:
                          type: string
                          maxLength: 255
                        product_family_id:
                          type:
                          - string
                          - integer
                        compounding_strategy:
                          type:
                          - string
                  status:
                    type: string
                    example: draft
                    default: open
          examples:
            Minimal Invoice (Relies on site defaults):
              value:
                invoice:
                  line_items:
                  - title: A Product
                    quantity: 12
                    unit_price: '150.00'
            Example:
              value:
                invoice:
                  line_items:
                  - title: Widgets
                    quantity: 1
                    unit_price: '10.0'
                    taxable: true
                    tax_code: A1999
                    period_range_start: '2021-01-31'
                    period_range_end: '2021-02-28'
                  net_terms: 20
                  payment_instructions: Pay upon receipt
                  memo: This is a memo
                  seller_address:
                    first_name: string
                    last_name: string
                    phone: string
                    address: string
                    address_2: string
                    city: string
                    state: string
                    zip: string
                    country: string
                  billing_address:
                    first_name: string
                    last_name: string
                    phone: string
                    address: string
                    address_2: string
                    city: string
                    state: string
                    zip: string
                    country: string
                  shipping_address:
                    first_name: string
                    last_name: string
                    phone: string
                    address: string
                    address_2: string
                    city: string
                    state: string
                    zip: string
                    country: string
      description: ''
"/subscriptions/{subscription_id}/prepayments.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
  post:
    summary: Create Prepayment
    tags:
    - Subscription Invoice Account
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                prepayment:
                  type: object
                  properties:
                    id:
                      type: integer
                    subscription_id:
                      type: integer
                    amount_in_cents:
                      type: integer
                    memo:
                      type: string
                    created_at:
                      type: string
                    starting_balance_in_cents:
                      type: integer
                    ending_balance_in_cents:
                      type: integer
            examples:
              Example:
                value:
                  prepayment:
                    id: 1
                    subscription_id: 1
                    amount_in_cents: 10000
                    memo: John Doe - Prepayment
                    created_at: '2020-07-31T05:52:32-04:00'
                    starting_balance_in_cents: 0
                    ending_balance_in_cents: -10000
    operationId: createPrepayment
    description: |
      ## Create Prepayment

      In order to specify a prepayment made against a subcription, specify the `amount, memo, details, method`.

      When the `method` specified is `"credit_card_on_file"`, the prepayment amount will be collected using the default credit card payment profile and applied to the prepayment account balance.  This is especially useful for manual replenishment of prepaid subscriptions.

      Please note that you **can't** pass `amount_in_cents`.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              prepayment:
                type: object
                required:
                - amount
                - details
                - memo
                - method
                properties:
                  amount:
                    type: number
                  details:
                    type: string
                  memo:
                    type: string
                  method:
                    type: string
                    enum:
                    - check
                    - cash
                    - money_order
                    - ach
                    - paypal_account
                    - credit_card_on_file
                    - other
                    description: When the `method` specified is `"credit_card_on_file"`,
                      the prepayment amount will be collected using the default credit
                      card payment profile and applied to the prepayment account balance.  This
                      is especially useful for manual replenishment of prepaid subscriptions.
                  payment_profile_id:
                    type: integer
            required:
            - prepayment
          examples:
            Example:
              value:
                prepayment:
                  amount: 100
                  details: John Doe signup for $100
                  memo: Signup for $100
                  method: check
  get:
    summary: List Prepayments
    tags:
    - Subscription Invoice Account
    operationId: listPrepayments
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                prepayments:
                  type: array
                  uniqueItems: true
                  items:
                    "$ref": "#/components/schemas/Prepayment"
            examples:
              example-success-response:
                value:
                  prepayments:
                  - id: 17
                    subscription_id: 3558750
                    amount_in_cents: 2000
                    remaining_amount_in_cents: 1100
                    external: true
                    memo: test
                    details: test details
                    payment_type: cash
                    created_at: '2022-01-18T22:45:41+11:00'
      '401':
        description: Unauthorized
      '403':
        description: Forbidden
      '404':
        description: Not Found
    description: This request will list a subscription's prepayments.
    parameters:
    - schema:
        type: integer
        minimum: 1
        example: page=2
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        default: 20
        maximum: 200
        minimum: 1
        example: per_page=50
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
        Default value is 20. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200.
    - schema:
        type: string
        enum:
        - created_at
        - application_at
        example: filter[date_field]=created_at
      in: query
      name: filter[date_field]
      description: The type of filter you would like to apply to your search. created_at
        - Time when prepayment was created. application_at - Time when prepayment
        was applied to invoice
    - schema:
        type: string
        example: filter[start_date]=2011-12-15
      in: query
      name: filter[start_date]
      description: The start date (format YYYY-MM-DD) with which to filter the date_field.
        Returns prepayments with a timestamp at or after midnight (12:00:00 AM) in
        your site’s time zone on the date specified.
    - schema:
        type: string
        example: filter[end_date]=2011-12-15
      in: query
      name: filter[end_date]
      description: The end date (format YYYY-MM-DD) with which to filter the date_field.
        Returns prepayments with a timestamp up to and including 11:59:59PM in your
        site’s time zone on the date specified.
"/subscriptions/{subscription_id}/service_credits.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Issue Service Credit
    tags:
    - Subscription Invoice Account
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Service-Credit"
            examples:
              Example:
                value:
                  id: 101
                  amount_in_cents: 1000
                  ending_balance_in_cents: 2000
                  entry_type: Credit
                  memo: Credit to group account
    operationId: issueServiceCredit
    description: Credit will be added to the subscription in the amount specified
      in the request body. The credit is subsequently applied to the next generated
      invoice.
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              service_credit:
                type: object
                required:
                - amount
                - memo
                properties:
                  amount:
                    type:
                    - number
                    - string
                    minimum: 0
                  memo:
                    type: string
            required:
            - service_credit
          examples:
            Example:
              value:
                service_credit:
                  amount: '1'
                  memo: Courtesy credit
"/subscriptions/{subscription_id}/service_credit_deductions.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Deduct Service Credit
    tags:
    - Subscription Invoice Account
    responses:
      '200':
        description: OK
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - Amount cannot exceed current service credit account balance.
    operationId: deductServiceCredit
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              deduction:
                type: object
                required:
                - amount
                - memo
                properties:
                  amount:
                    type:
                    - string
                    - number
                  memo:
                    type: string
            required:
            - deduction
          examples:
            Example:
              value:
                deduction:
                  amount: '1'
                  memo: Deduction
    description: Credit will be removed from the subscription in the amount specified
      in the request body. The credit amount being deducted must be equal to or less
      than the current credit balance.
"/subscriptions/lookup.json":
  get:
    summary: Find Subscription
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
    operationId: readSubscriptionByReference
    parameters:
    - schema:
        type: string
      in: query
      name: reference
    description: Use this endpoint to find a subscription by its reference.
"/subscriptions/{id}/payment_profiles/{payment_profile_id}/change_payment_profile.json":
  parameters:
  - schema:
      type: integer
    name: id
    in: path
    required: true
    description: The Chargify id of the subscription
  - schema:
      type: integer
    name: payment_profile_id
    in: path
    required: true
    description: The Chargify id of the payment profile
  post:
    summary: Change Subscription Default Payment Profile
    tags:
    - Payment Profiles
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_profile:
                  "$ref": "../models/Payment-Profile.yaml"
            examples:
              Example:
                value:
                  payment_profile:
                    id: 10211899
                    first_name: Amelia
                    last_name: Example
                    masked_card_number: XXXX-XXXX-XXXX-1
                    card_type: bogus
                    expiration_month: 2
                    expiration_year: 2018
                    customer_id: 14399371
                    current_vault: bogus
                    vault_token: '1'
                    billing_address: ''
                    billing_city: ''
                    billing_state: ''
                    billing_zip: ''
                    billing_country: ''
                    customer_vault_token:
                    billing_address_2: ''
                    payment_type: credit_card
                    site_gateway_setting_id: 1
                    gateway_handle:
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - This is already the current payment profile
    operationId: updateSubscriptionDefaultPaymentProfile
    description: |-
      This will change the default payment profile on the subscription to the existing payment profile with the id specified.

      You must elect to change the existing payment profile to a new payment profile ID in order to receive a satisfactory response from this endpoint.
"/subscriptions/{subscription_id}/purge.json":
  parameters:
  - "$ref": "#/components/parameters/subscription-id-required-path"
  post:
    summary: Purge Subscription
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
      '400':
        description: Bad Request
    operationId: purgeSubscription
    description: |-
      For sites in test mode, you may purge individual subscriptions.

      Provide the subscription ID in the url.  To confirm, supply the customer ID in the query string `ack` parameter. You may also delete the customer record and/or payment profiles by passing `cascade` parameters. For example, to delete just the customer record, the query params would be: `?ack={customer_id}&cascade[]=customer`

      If you need to remove subscriptions from a live site, please contact support to discuss your use case.

      ### Delete customer and payment profile

      The query params will be: `?ack={customer_id}&cascade[]=customer&cascade[]=payment_profile`
    parameters:
    - schema:
        type: integer
      in: query
      name: ack
    - schema:
        type: array
      in: query
      name: cascade
      description: Options are "customer" or "payment_profile"
"/subscriptions/{subscription_id}/prepaid_configurations.json":
  parameters:
  - "$ref": "#/components/parameters/subscription-id-required-path"
  post:
    summary: Update Prepaid Subscription Configuration
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Prepaid-Configuration"
            examples:
              Example:
                value:
                  prepaid_configuration:
                    id: 55
                    initial_funding_amount_in_cents: 2500
                    auto_replenish: true
                    replenish_to_amount_in_cents: 50000
                    replenish_threshold_amount_in_cents: 10000
    operationId: createPrepaidSubscription
    description: Use this endpoint to update a subscription's prepaid configuration.
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Upsert-Prepaid-Configuration-Request"
          examples:
            Example:
              value:
                prepaid_configuration:
                  initial_funding_amount_in_cents: 50000
                  replenish_to_amount_in_cents: 50000
                  auto_replenish: true
                  replenish_threshold_amount_in_cents: 10000
"/subscriptions/{subscription_id}/group.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Add Subscription to Group
    tags:
    - Subscription Groups
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                subscription_group:
                  type: object
                  properties:
                    customer_id:
                      type: integer
                    payment_profile:
                      type: object
                      properties:
                        id:
                          type: integer
                        first_name:
                          type: string
                        last_name:
                          type: string
                        masked_card_number:
                          type: string
                    payment_collection_method:
                      type: string
                    subscription_ids:
                      type: array
                      items:
                        type: integer
                    created_at:
                      type: string
            examples:
              Example:
                value:
                  subscription_group:
                    customer_id: 130690
                    payment_profile:
                      id: 32055
                      first_name: Marty
                      last_name: McFly
                      masked_card_number: XXXX-XXXX-XXXX-1111
                    subscription_ids:
                    - 32988
                    - 33060
                    - 32986
                    created_at: '2018-08-30T17:14:30-04:00'
    operationId: createSubscriptionGroupHierarchy
    description: "For sites making use of the [Relationship Billing](https://chargify.zendesk.com/hc/en-us/articles/4407737494171)
      and [Customer Hierarchy](https://chargify.zendesk.com/hc/en-us/articles/4407746683291)
      features, it is possible to add existing subscriptions to subscription groups.\n\nPassing
      `group` parameters with a `target` containing a `type` and optional `id` is
      all that's needed. When the `target` parameter specifies a `\"customer\"` or
      `\"subscription\"` that is already part of a hierarchy, the subscription will
      become a member of the customer's subscription group.  If the target customer
      or subscription is not part of a subscription group, a new group will be created
      and the subscription will become part of the group with the specified target
      customer set as the responsible payer for the group's subscriptions.\n\n**Please
      Note:** In order to add an existing subscription to a subscription group, it
      must belong to either the same customer record as the target, or be within the
      same customer hierarchy.\n\nRather than specifying a customer, the `target`
      parameter could instead simply have a value of\n* `\"self\"` which indicates
      the subscription will be paid for not by some other customer, but by the subscribing
      customer,\n* `\"parent\"` which indicates the subscription will be paid for
      by the subscribing customer's parent within a customer hierarchy, or\n* `\"eldest\"`
      which indicates the subscription will be paid for by the root-level customer
      in the subscribing customer's hierarchy.\n\nTo create a new subscription into
      a subscription group, please reference the following: \n[Create Subscription
      in a Subscription Group](https://developers.chargify.com/docs/api-docs/d571659cf0f24-create-subscription#subscription-in-a-subscription-group)\n"
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              group:
                "$ref": "#/components/schemas/Group-Attributes"
          examples:
            Example:
              value:
                group:
                  target:
                    type: subscription
                    id: 32987
                  billing:
                    accrue: true
                    align_date: true
                    prorate: true
  delete:
    summary: Remove Subscription from Group
    tags:
    - Subscription Groups
    responses:
      '204':
        description: No Content
      '404':
        description: Not Found
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - You can not remove primary subscription when there are others
                    in group
    operationId: removeSubscriptionFromGroup
    description: For sites making use of the [Relationship Billing](https://chargify.zendesk.com/hc/en-us/articles/4407737494171)
      and [Customer Hierarchy](https://chargify.zendesk.com/hc/en-us/articles/4407746683291)
      features, it is possible to remove existing subscription from subscription group.
"/subscriptions/preview.json":
  post:
    summary: Subscription Preview
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Preview-Response"
            examples:
              Example:
                value:
                  subscription_preview:
                    current_billing_manifest:
                      line_items:
                      - transaction_type: charge
                        kind: baseline
                        amount_in_cents: 5000
                        memo: Gold Product (08/21/2018 - 09/21/2018)
                        discount_amount_in_cents: 0
                        taxable_amount_in_cents: 0
                        product_id: 1
                        product_handle: gold-product
                        product_name: Gold Product
                      - transaction_type: charge
                        kind: component
                        amount_in_cents: 28000
                        memo: 'Component name: 14 Unit names'
                        discount_amount_in_cents: 0
                        taxable_amount_in_cents: 0
                        component_id: 462149
                        component_handle: handle
                        component_name: Component name
                      - transaction_type: charge
                        kind: component
                        amount_in_cents: 2000
                        memo: 'Fractional Metered Components: 20.0 Fractional Metereds'
                        discount_amount_in_cents: 0
                        taxable_amount_in_cents: 0
                        component_id: 426665
                        component_handle: handle
                        component_name: Fractional Metered Components
                      - transaction_type: charge
                        kind: component
                        amount_in_cents: 0
                        memo: On/Off Component
                        discount_amount_in_cents: 0
                        taxable_amount_in_cents: 0
                        component_id: 426670
                        component_handle: handle
                        component_name: On/Off Component
                      - transaction_type: adjustment
                        kind: coupon
                        amount_in_cents: 0
                        memo: 'Coupon: 1DOLLAR - You only get $1.00 off'
                        discount_amount_in_cents: 0
                        taxable_amount_in_cents: 0
                      total_in_cents: 35000
                      total_discount_in_cents: 0
                      total_tax_in_cents: 0
                      subtotal_in_cents: 35000
                      start_date: '2018-08-21T21:25:21Z'
                      end_date: '2018-09-21T21:25:21Z'
                      period_type: recurring
                      existing_balance_in_cents: 0
                    next_billing_manifest:
                      line_items:
                      - transaction_type: charge
                        kind: baseline
                        amount_in_cents: 5000
                        memo: Gold Product (09/21/2018 - 10/21/2018)
                        discount_amount_in_cents: 0
                        taxable_amount_in_cents: 0
                        product_id: 1
                        product_handle: gold-product
                        product_name: Gold Product
                      - transaction_type: charge
                        kind: component
                        amount_in_cents: 28000
                        memo: 'Component name: 14 Unit names'
                        discount_amount_in_cents: 0
                        taxable_amount_in_cents: 0
                        component_id: 462149
                        component_handle: handle
                        component_name: Component name
                      - transaction_type: charge
                        kind: component
                        amount_in_cents: 0
                        memo: On/Off Component
                        discount_amount_in_cents: 0
                        taxable_amount_in_cents: 0
                        component_id: 426670
                        component_handle: handle
                        component_name: On/Off Component
                      total_in_cents: 33000
                      total_discount_in_cents: 0
                      total_tax_in_cents: 0
                      subtotal_in_cents: 33000
                      start_date: '2018-09-21T21:25:21Z'
                      end_date: '2018-10-21T21:25:21Z'
                      period_type: recurring
                      existing_balance_in_cents: 0
    operationId: previewSubscription
    description: |-
      The Chargify API allows you to preview a subscription by POSTing the same JSON or XML as for a subscription creation.

      The "Next Billing" amount and "Next Billing" date are represented in each Subscriber's Summary. For more information, please see our documentation [here](https://chargify.zendesk.com/hc/en-us/articles/4407884887835#next-billing).

      ## Side effects

      A subscription will not be created by sending a POST to this endpoint. It is meant to serve as a prediction.

      ## Taxable Subscriptions

      This endpoint will preview taxes applicable to a purchase. In order for taxes to be previewed, the following conditions must be met:

      + Taxes must be configured on the subscription
      + The preview must be for the purchase of a taxable product or component, or combination of the two.
      + The subscription payload must contain a full billing or shipping address in order to calculate tax

      For more information about creating taxable previews, please see our documentation guide on how to create [taxable subscriptions.](https://chargify.zendesk.com/hc/en-us/articles/4407904217755#creating-taxable-subscriptions)

      You do **not** need to include a card number to generate tax information when you are previewing a subscription. However, please note that when you actually want to create the subscription, you must include the credit card information if you want the billing address to be stored in Chargify. The billing address and the credit card information are stored together within the payment profile object. Also, you may not send a billing address to Chargify without payment profile information, as the address is stored on the card.

      You can pass shipping and billing addresses and still decide not to calculate taxes. To do that, pass `skip_billing_manifest_taxes: true` attribute.

      ## Non-taxable Subscriptions

      If you'd like to calculate subscriptions that do not include tax, please feel free to leave off the billing information.
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Create-Subscription-Request"
          examples:
            Product Only:
              value:
                subscription:
                  product_handle: gold-product
            With Components:
              value:
                subscription:
                  product_handle: gold-product
                  coupon_code: 1DOLLAR
                  components:
                  - component_id: 462149
                    price_point_id: 200543
                    allocated_quantity: 14
                  - component_id: 426665
                    unit_balance: 20
                  - component_id: 426670
                    quantity: 1
            With Custom Taxes:
              value:
                subscription:
                  product_handle: paid-annual-seats
                  customer_attributes:
                    address: 870 Massachusetts Ave
                    address_2:
                    city: Boston
                    state: MA
                    zip: '02118'
                    country: US
            With Avalara Taxes:
              value:
                subscription:
                  product_handle: paid-annual-seats
                  credit_card_attributes:
                    billing_address: 870 Massachusetts Ave
                    billing_address_2:
                    billing_city: Boston
                    billing_state: MA
                    billing_zip: '02118'
                    billing_country: US
            With Custom Pricing:
              value:
                subscription:
                  product_id: string
                  custom_price:
                    price_in_cents: 9900
                    interval: 1
                    interval_unit: month
                  components:
                  - component_id: 20
                    allocated_quantity: 10
                    custom_price:
                      pricing_scheme: stairstep
                      prices:
                      - unit_price: '5'
                        starting_quantity: '1'
                        ending_quantity: '15'
                      - unit_price: '2'
                        starting_quantity: '16'
                  - component_id: 10
                    enabled: true
                    custom_price:
                      prices:
                      - unit_price: '1'
                        starting_quantity: '1'
"/subscriptions/{subscription_id}/add_coupon.json":
  parameters:
  - "$ref": "#/components/parameters/subscription-id-required-path"
  post:
    summary: Add Coupons to Subscription
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 21607180
                    state: active
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2018-04-20T14:20:57-05:00'
                    created_at: '2018-04-20T14:20:57-05:00'
                    updated_at: '2018-05-11T13:53:44-05:00'
                    expires_at:
                    balance_in_cents: 49000
                    current_period_ends_at: '2018-05-12T11:33:03-05:00'
                    next_assessment_at: '2018-05-12T11:33:03-05:00'
                    canceled_at:
                    cancellation_message:
                    next_product_id:
                    cancel_at_end_of_period: false
                    payment_collection_method: remittance
                    snap_day:
                    cancellation_method:
                    current_period_started_at: '2018-05-11T11:33:03-05:00'
                    previous_state: active
                    signup_payment_id: 237154761
                    signup_revenue: '0.00'
                    delayed_cancel_at:
                    coupon_code: COUPONA
                    total_revenue_in_cents: 52762
                    product_price_in_cents: 100000
                    product_version_number: 2
                    payment_type: credit_card
                    referral_code: x45nc8
                    coupon_use_count: 0
                    coupon_uses_allowed: 1
                    reason_code:
                    automatically_resume_at:
                    coupon_codes:
                    - COUPONA
                    - COUPONB
                    customer:
                      id: 21259051
                      first_name: K
                      last_name: C
                      organization: ''
                      email: example@chargify.com
                      created_at: '2018-04-20T14:20:57-05:00'
                      updated_at: '2018-04-23T15:29:28-05:00'
                      reference:
                      address: ''
                      address_2: ''
                      city: ''
                      state: ''
                      zip: ''
                      country: ''
                      phone: ''
                      portal_invite_last_sent_at: '2018-04-20T14:20:59-05:00'
                      portal_invite_last_accepted_at:
                      verified: false
                      portal_customer_created_at: '2018-04-20T14:20:59-05:00'
                      cc_emails: ''
                      tax_exempt: false
                    product:
                      id: 4581816
                      name: Basic
                      handle: basic
                      description: ''
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval:
                      expiration_interval_unit: never
                      created_at: '2017-11-02T15:00:11-05:00'
                      updated_at: '2018-04-10T09:02:59-05:00'
                      price_in_cents: 100000
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents: 100000
                      trial_price_in_cents: 1000
                      trial_interval: 10
                      trial_interval_unit: month
                      archived_at:
                      require_credit_card: true
                      return_params: ''
                      taxable: false
                      update_return_url: ''
                      tax_code: ''
                      initial_charge_after_trial: false
                      version_number: 2
                      update_return_params: ''
                      product_family:
                        id: 1025627
                        name: My Product Family
                        description: ''
                        handle: acme-products
                        accounting_code:
                      public_signup_pages:
                      - id: 333589
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargifypay.com/subscribe/hbwtd98j3hk2/basic
                      - id: 335926
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargifypay.com/subscribe/g366zy67c7rm/basic
                      - id: 345555
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargifypay.com/subscribe/txqyyqk7d8rz/basic
                      - id: 345556
                        return_url: ''
                        return_params: ''
                        url: https://general-goods.chargifypay.com/subscribe/2zss3qpf4249/basic
                    credit_card:
                      id: 14839830
                      first_name: John
                      last_name: Doe
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 1
                      expiration_year: 2028
                      customer_id: 21259051
                      current_vault: bogus
                      vault_token: '1'
                      billing_address:
                      billing_city:
                      billing_state:
                      billing_zip: '99999'
                      billing_country:
                      customer_vault_token:
                      billing_address_2:
                      payment_type: credit_card
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              anyOf:
              - properties:
                  codes:
                    type: array
                    items:
                      type: string
                  subscription:
                    type: array
                    items:
                      type: string
              - properties:
                  coupon_codes:
                    type: array
                    items:
                      type: string
                  subscription:
                    type: array
                    items:
                      type: string
              type: object
            examples:
              Example:
                value:
                  coupon_codes:
                  - 'Coupon Codes: ''COUPONA'' - That coupon is not stackable'
                  - 'Coupon Codes: ''COUPONB'' - That coupon is not stackable'
                  subscription:
                  - Coupon is invalid.
    operationId: applyCouponToSubscription
    description: |-
      An existing subscription can accommodate multiple discounts/coupon codes. This is only applicable if each coupon is stackable. For more information on stackable coupons, we recommend reviewing our [coupon documentation.](https://chargify.zendesk.com/hc/en-us/articles/4407755909531#stackable-coupons)

      ## Query Parameters vs Request Body Parameters

      Passing in a coupon code as a query parameter will add the code to the subscription, completely replacing all existing coupon codes on the subscription.

      For this reason, using this query parameter on this endpoint has been deprecated in favor of using the request body parameters as described below. When passing in request body parameters, the list of coupon codes will simply be added to any existing list of codes on the subscription.
    parameters:
    - schema:
        type: string
      in: query
      name: code
      deprecated: true
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Add-Coupons-Request"
          examples:
            Example:
              value:
                codes:
                - COUPON_1
                - COUPON_2
"/subscriptions/{subscription_id}/remove_coupon.json":
  parameters:
  - "$ref": "#/components/parameters/subscription-id-required-path"
  delete:
    summary: Remove Coupon from Subscription
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: string
            examples:
              Example:
                value: Coupon succesfully removed
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                subscription:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  subscription:
                  - There's no coupon applied to this subscription
    operationId: deleteCouponFromSubscription
    description: |-
      Use this endpoint to remove a coupon from an existing subscription.

      For more information on the expected behaviour of removing a coupon from a subscription, please see our documentation [here.](https://chargify.zendesk.com/hc/en-us/articles/4407896488987#removing-a-coupon)
    parameters:
    - schema:
        type: string
      in: query
      name: coupon_code
      description: The coupon code
"/subscriptions/{subscription_id}/proforma_invoices.json":
  parameters:
  - schema:
      type: integer
    name: subscription_id
    in: path
    required: true
    description: The Chargify id of the subscription
  post:
    summary: Create Proforma Invoice
    tags:
    - Proforma Invoices
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Proforma-Invoice"
      '403':
        description: Forbidden
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - this subscription is not eligible to create proforma invoices
    operationId: createProformaInvoice
    description: |-
      This endpoint will create a proforma invoice and return it as a response. If the information becomes outdated, simply void the old proforma invoice and generate a new one.

      If you would like to preview the next billing amounts without generating a full proforma invoice, please use the renewal preview endpoint.

      ## Restrictions

      Proforma invoices are only available on Relationship Invoicing sites. To create a proforma invoice, the subscription must not be in a group, must not be prepaid, and must be in a live state.
  get:
    summary: List Subscription Proforma Invoices
    tags:
    - Proforma Invoices
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Proforma-Invoice"
    operationId: listProformaInvoices
    description: By default, proforma invoices returned on the index will only include
      totals, not detailed breakdowns for `line_items`, `discounts`, `taxes`, `credits`,
      `payments`, or `custom_fields`. To include breakdowns, pass the specific field
      as a key in the query with a value set to `true`.
    parameters:
    - schema:
        type: string
      in: query
      name: start_date
      description: " The beginning date range for the invoice's Due Date, in the YYYY-MM-DD
        format."
    - schema:
        type: string
      in: query
      name: end_date
      description: The ending date range for the invoice's Due Date, in the YYYY-MM-DD
        format.
    - schema:
        type: string
        enum:
        - draft
        - open
        - paid
        - pending
        - voided
      in: query
      name: status
      description: 'The current status of the invoice.  Allowed Values: draft, open,
        paid, pending, voided'
    - schema:
        type: integer
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        default: 20
        maximum: 200
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
        Default value is 20. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200.
    - schema:
        type: string
        enum:
        - asc
        - desc
        default: desc
      in: query
      name: direction
      description: The sort direction of the returned invoices.
    - schema:
        type: boolean
        default: false
      in: query
      name: line_items
      description: Include line items data
    - schema:
        type: boolean
        default: false
      in: query
      name: discounts
      description: Include discounts data
    - schema:
        type: boolean
        default: false
      in: query
      name: taxes
      description: Include taxes data
    - schema:
        type: boolean
        default: false
      in: query
      name: credits
      description: Include credits data
    - schema:
        type: boolean
        default: false
      in: query
      name: payments
      description: Include payments data
    - schema:
        type: boolean
        default: false
      in: query
      name: custom_fields
      description: Include custom fields data
"/subscriptions/{subscription_id}/proforma_invoices/preview.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
  post:
    summary: Preview Proforma Invoice
    tags:
    - Proforma Invoices
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Proforma-Invoice-Preview"
      '403':
        description: Forbidden
      '404':
        description: Not Found
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                errors:
                  type: array
                  items:
                    required: []
                    properties: {}
              required:
              - errors
              x-examples:
                example-1:
                  errors:
                  - this subscription is not eligible to create proforma invoices
    operationId: previewProformaInvoice
    description: |-
      Return a preview of the data that will be included on a given subscription's proforma invoice if one were to be generated. It will have similar line items and totals as a renewal preview, but the response will be presented in the format of a proforma invoice. Consequently it will include additional information such as the name and addresses that will appear on the proforma invoice.

      The preview endpoint is subject to all the same conditions as the proforma invoice endpoint. For example, previews are only available on the Relationship Invoicing architecture, and previews cannot be made for end-of-life subscriptions.

      If all the data returned in the preview is as expected, you may then create a static proforma invoice and send it to your customer. The data within a preview will not be saved and will not be accessible after the call is made.

      Alternatively, if you have some proforma invoices already, you may make a preview call to determine whether any billing information for the subscription's upcoming renewal has changed.
"/subscriptions/{subscription_id}/advance_invoice/issue.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
  post:
    summary: Issue advance invoice
    tags:
    - Advance Invoice
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Invoice"
      '403':
        description: Forbidden
      '404':
        description: Not Found
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  errors:
                  - Cannot generate an invoice in advance for subscription in the
                    group
              properties:
                errors:
                  type: array
                  items:
                    type: string
              required:
              - errors
            examples:
              Nothing due:
                value:
                  errors:
                  - Cannot generate an invoice in advance when nothing is due
              Already exists:
                value:
                  errors:
                  - Advance invoice already exists
              Grouped:
                value:
                  errors:
                  - Cannot generate an invoice in advance for subscription in the
                    group
              End of life:
                value:
                  errors:
                  - Cannot generate an invoice in advance for inactive subscription
              Calendar billing:
                value:
                  errors:
                  - Cannot generate an invoice in advance for a calendar billing subscription
              Prepaid subscription:
                value:
                  errors:
                  - Cannot generate an invoice in advance for a prepaid subscription
              Close to renewal:
                value:
                  errors:
                  - Cannot generate an invoice in advance within an hour of renewal
              Custom exchange:
                value:
                  errors:
                  - Cannot generate an invoice in advance for a subscription using
                    the site level exchange rate
              Prepaid components:
                value:
                  errors:
                  - Cannot generate an invoice in advance when a subscription uses
                    prepaid components
    operationId: issueAdvanceInvoice
    description: |
      Generate an invoice in advance for a subscription's next renewal date. [Please see our docs](reference/Chargify-API.v1.yaml/components/schemas/Invoice) for more information on advance invoices, including eligibility on generating one; for the most part, they function like any other invoice, except they are issued early and have special behavior upon being voided.
      A subscription may only have one advance invoice per billing period. Attempting to issue an advance invoice when one already exists will return an error.
      That said, regeneration of the invoice may be forced with the params `force: true`, which will void an advance invoice if one exists and generate a new one. If no advance invoice exists, a new one will be generated.
      We recommend using either the create or preview endpoints for proforma invoices to preview this advance invoice before using this endpoint to generate it.
    requestBody:
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                force: true
            properties:
              force:
                type: boolean
          examples:
            Force generation:
              value:
                force: true
"/subscriptions/{subscription_id}/advance_invoice.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
  get:
    summary: Read advance invoice
    tags:
    - Advance Invoice
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Invoice"
            examples: {}
      '403':
        description: Forbidden
      '404':
        description: Not Found
    operationId: readAdvanceInvoice
    description: Once an advance invoice has been generated for a subscription's upcoming
      renewal, it can be viewed through this endpoint. There can only be one advance
      invoice per subscription per billing cycle.
"/subscriptions/{subscription_id}/advance_invoice/void.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
  post:
    summary: Void advance invoice
    tags:
    - Advance Invoice
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Invoice"
      '403':
        description: Forbidden
      '404':
        description: Not Found
    operationId: voidAdvanceInvoice
    description: |-
      Void a subscription's existing advance invoice. Once voided, it can later be regenerated if desired.
      A `reason` is required in order to void, and the invoice must have an open status. Voiding will cause any prepayments and credits that were applied to the invoice to be returned to the subscription. For a full overview of the impact of voiding, please [see our help docs](reference/Chargify-API.v1.yaml/components/schemas/Invoice).
    requestBody:
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                void:
                  reason: because
            properties:
              void:
                type: object
                required:
                - reason
                properties:
                  reason:
                    type: string
                    minLength: 1
            required:
            - void
"/subscriptions/{subscription_id}/prepayments/{prepayment_id}/refunds.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
  - schema:
      type: string
    name: prepayment_id
    in: path
    required: true
  post:
    summary: Refund Prepayment
    tags:
    - Subscription Invoice Account
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Prepayment"
      '400':
        description: Bad Request
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  errors:
                    refund:
                      base:
                      - must be an object
              properties:
                errors:
                  type: object
                  properties:
                    refund:
                      type: object
                      properties:
                        base:
                          type: array
                          items:
                            type: object
      '404':
        description: Not Found
        content:
          application/json:
            schema:
              type: object
              properties: {}
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  refund:
                    errors:
                      amount_in_cents:
                      - Refund amount exceeds prepayment amount
              properties:
                errors:
                  type: object
                  properties:
                    refund:
                      type: object
                      properties:
                        amount_in_cents:
                          type: array
                          items:
                            type: string
                        base:
                          type: array
                          items:
                            type: string
                        external:
                          type: array
                          items:
                            type: string
            examples:
              Example Error:
                value:
                  errors:
                    refund:
                      amount_in_cents:
                      - Refund amount exceeds prepayment amount
    operationId: refundPrepayment
    description: |-
      This endpoint will refund, completely or partially, a particular prepayment applied to a subscription. The `prepayment_id` will be the account transaction ID of the original payment. The prepayment must have some amount remaining in order to be refunded.

      The amount may be passed either as a decimal, with `amount`, or an integer in cents, with `amount_in_cents`.
    requestBody:
      content:
        application/json:
          schema:
            description: ''
            type: object
            x-examples:
              example-1:
                refund:
                  amount_in_cents: 100
                  memo: my memo
                  external: true
            properties:
              refund:
                type: object
                required:
                - amount_in_cents
                - amount
                - memo
                properties:
                  amount_in_cents:
                    type: number
                    description: "`amount` is not required if you pass `amount_in_cents`."
                  amount:
                    type:
                    - string
                    - number
                    description: "`amount_in_cents` is not required if you pass `amount`."
                  memo:
                    type: string
                    minLength: 1
                  external:
                    type: boolean
                    description: Specify the type of refund you wish to initiate.
                      When the prepayment is external, the `external` flag is optional.
                      But if the prepayment was made through a payment profile, the
                      `external` flag is required.
            required:
            - refund
"/subscriptions/{subscription_id}/activate.json":
  parameters:
  - "$ref": "#/components/parameters/subscription-id-required-path"
  put:
    summary: Activate Subscription
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples: {}
      '400':
        description: Bad Request
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: object
                  properties:
                    base:
                      type: array
                      items:
                        type: string
            examples:
              example-1:
                value:
                  errors:
                    base:
                    - Purchase Declined. The subscription is now in the 'awaiting_signup'
                      state.
    operationId: activateSubscription
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Activate-Subscription-Request"
      description: ''
    description: "Chargify offers the ability to activate awaiting signup and trialing
      subscriptions. This feature is only available on the Relationship Invoicing
      architecture. Subscriptions in a group may not be activated immediately.\n\nFor
      details on how the activation works, and how to activate subscriptions through
      the application, see [activation](#).\n\nThe `revert_on_failure` parameter controls
      the behavior upon activation failure. \n- If set to `true` and something goes
      wrong i.e. payment fails, then Chargify will not change the subscription's state.
      The subscription’s billing period will also remain the same. \n- If set to `false`
      and something goes wrong i.e. payment fails, then Chargify will continue through
      with the activation and enter an end of life state. For trialing subscriptions,
      that will either be trial ended (if the trial is no obligation), past due (if
      the trial has an obligation), or canceled (if the site has no dunning strategy,
      or has a strategy that says to cancel immediately). For awaiting signup subscriptions,
      that will always be canceled.\n\nThe default activation failure behavior can
      be configured per activation attempt, or you may set a default value under Config
      > Settings > Subscription Activation Settings. \n\n## Activation Scenarios\n\n###
      Activate Awaiting Signup subscription\n\n- Given you have a product without
      trial\n- Given you have a site without dunning strategy\n\n```mermaid\n  flowchart
      LR\n    AS[Awaiting Signup] --> A{Activate}\n    A -->|Success| Active\n    A
      -->|Failure| ROF{revert_on_failure}\n    ROF -->|true| AS\n    ROF -->|false|
      Canceled\n```\n\n- Given you have a product with trial\n- Given you have a site
      with dunning strategy\n\n```mermaid\n  flowchart LR\n    AS[Awaiting Signup]
      --> A{Activate}\n    A -->|Success| Trialing\n    A -->|Failure| ROF{revert_on_failure}\n
      \   ROF -->|true| AS\n    ROF -->|false| PD[Past Due]\n```\n\n### Activate Trialing
      subscription\n\nYou can read more about the behavior of trialing subscriptions
      [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404494617357#trialing-subscriptions-0-0).\nWhen
      the `revert_on_failure` parameter is set to `true`, the subscription's state
      will remain as Trialing, we will void the invoice from activation and return
      any prepayments and credits applied to the invoice back to the subscription.\n"
"/subscriptions/proforma_invoices.json":
  post:
    summary: Create signup proforma invoice
    tags:
    - Proforma Invoices
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Proforma-Invoice"
      '400':
        description: Bad Request
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: object
                  properties:
                    subscription:
                      type: object
                      properties:
                        base:
                          type: array
                          items:
                            type: string
              x-examples:
                example-1:
                  errors:
                    subscription:
                      base:
                      - must be an object
      '403':
        description: Forbidden
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: object
                  properties:
                    base:
                      type: array
                      items:
                        type: string
              x-examples:
                example-1:
                  errors:
                    base:
                    - Couldn't find Product by 1
            examples:
              Product invalid:
                value:
                  errors:
                    base:
                    - Couldn't find Product by 1
              Missing customer:
                value:
                  errors:
                    customer:
                    - Missing required customer attributes
              Invalid type:
                value:
                  errors:
                    base:
                    - currency must be a string
    operationId: createSignupProformaInvoice
    description: |-
      This endpoint is only available for Relationship Invoicing sites. It cannot be used to create consolidated proforma invoices or preview prepaid subscriptions.

      Create a proforma invoice to preview costs before a subscription's signup. Like other proforma invoices, it can be emailed to the customer, voided, and publicly viewed on the chargifypay domain.

      Pass a payload that resembles a subscription create or signup preview request. For example, you can specify components, coupons/a referral, offers, custom pricing, and an existing customer or payment profile to populate a shipping or billing address.

      A product and customer first name, last name, and email are the minimum requirements. We recommend associating the proforma invoice with a customer_id to easily find their proforma invoices, since the subscription_id will always be blank.
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Create-Subscription-Request"
          examples:
            Minimum payload:
              value:
                subscription:
                  product_handle: gold-product
                  customer_attributes:
                    first_name: Myra
                    last_name: Maisel
                    email: mmaisel@example.com
            Minimum payload with referenced customer:
              value:
                subscription:
                  product_handle: gold-product
                  customer_id: 12345
  parameters: []
"/subscriptions/proforma_invoices/preview.json":
  post:
    summary: Create signup proforma preview
    tags:
    - Proforma Invoices
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  proforma_invoice_preview:
                    current_proforma_invoice: {}
                    next_proforma_invoice: {}
              properties:
                proforma_invoice_preview:
                  type: object
                  properties:
                    current_proforma_invoice:
                      type: object
                    next_proforma_invoice:
                      type: object
      '400':
        description: Bad Request
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: object
                  properties:
                    subscription:
                      type: object
                      properties:
                        base:
                          type: array
                          items:
                            type: string
              x-examples:
                example-1:
                  errors:
                    subscription:
                      base:
                      - must be an object
      '403':
        description: Forbidden
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: object
                  properties:
                    base:
                      type: array
                      items:
                        type: string
              x-examples:
                example-1:
                  errors:
                    base:
                    - Couldn't find Product by 6067
            examples:
              Missing product:
                value:
                  errors:
                    base:
                    - Couldn't find Product by 6067
              Missing customer:
                value:
                  errors:
                    customer:
                    - Missing required customer attributes
              Invalid type:
                value:
                  errors:
                    base:
                    - organization must be a string
    operationId: previewSignupProformaInvoice
    description: |-
      This endpoint is only available for Relationship Invoicing sites. It cannot be used to create consolidated proforma invoice previews or preview prepaid subscriptions.

      Create a signup preview in the format of a proforma invoice to preview costs before a subscription's signup. You have the option of optionally previewing the first renewal's costs as well. The proforma invoice preview will not be persisted.

      Pass a payload that resembles a subscription create or signup preview request. For example, you can specify components, coupons/a referral, offers, custom pricing, and an existing customer or payment profile to populate a shipping or billing address.

      A product and customer first name, last name, and email are the minimum requirements.
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Create-Subscription-Request"
          examples:
            Minimum example:
              value:
                subscription:
                  product_handle: gold-plan
                  customer_attributes:
                    first_name: first
                    last_name: last
                    email: flast@example.com
            Minimum example with existing customer:
              value:
                subscription:
                  product_handle: silver-plan
                  customer_id: 1234
      description: ''
    parameters:
    - schema:
        type: string
      in: query
      name: include=next_proforma_invoice
      description: Choose to include a proforma invoice preview for the first renewal
"/subscriptions/{subscription_id}/request_payment_profiles_update.json":
  parameters:
  - schema:
      type: string
    name: subscription_id
    in: path
    required: true
  post:
    summary: Send request payment update email
    tags:
    - Payment Profiles
    responses:
      '201':
        description: Created
      '404':
        description: Not Found
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
              x-examples:
                Example 1:
                  errors:
                  - Too many requests. You can perform 5 requests within 00:30:00
            examples:
              Too many requests:
                value:
                  errors:
                  - Too many requests. You can perform 5 requests within 00:30:00
    operationId: sendRequestUpdatePaymentEmail
    description: |-
      You can send a "request payment update" email to the customer associated with the subscription.

      If you attempt to send a "request payment update" email more than five times within a 30-minute period, you will receive a `422` response with an error message in the body. This error message will indicate that the request has been rejected due to excessive attempts, and will provide instructions on how to resubmit the request.

      Additionally, if you attempt to send a "request payment update" email for a subscription that does not exist, you will receive a `404` error response. This error message will indicate that the subscription could not be found, and will provide instructions on how to correct the error and resubmit the request.

      These error responses are designed to prevent excessive or invalid requests, and to provide clear and helpful information to users who encounter errors during the request process.
