openapi: 3.1.0
info:
  title: Chargify
  version: '1.0'
  contact:
    email: support@chargify.com
  description: Manage your company's subscriptions through the Chargify API.
tags:
  - name: Billing Portal
  - name: Coupons
  - name: Components
  - name: Customers
  - name: Custom Fields
  - name: Events
  - name: Insights
  - name: Payment Profiles
  - name: Product Families
  - name: Products
  - name: 'Product: Price Points'
  - name: Reason Codes
  - name: Referral Codes
  - name: Sites
  - name: Subscription Notes
  - name: Webhooks
paths:
  /webhooks.json:
    get:
      summary: List Webhooks
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    webhook:
                      type: object
                      properties:
                        event:
                          type: string
                        id:
                          type: integer
                        created_at:
                          type: string
                        last_error:
                          type: string
                        last_error_at:
                          type: string
                        accepted_at:
                          type: string
                          nullable: true
                        last_sent_at:
                          type: string
                        last_sent_url:
                          type: string
                        successful:
                          type: boolean
                        body:
                          type: string
                        signature:
                          type: string
                        signature_hmac_sha_256:
                          type: string
              examples:
                Example:
                  value:
                    - webhook:
                        event: statement_settled
                        id: 141765032
                        created_at: '2016-11-08T16:22:26-05:00'
                        last_error: 404 Resource Not Found (retry 5 of 5)
                        last_error_at: '2016-11-08T16:43:54-05:00'
                        accepted_at: null
                        last_sent_at: '2016-11-08T16:43:54-05:00'
                        last_sent_url: 'http://requestb.in/11u45x71'
                        successful: false
                        body: 'id=141765032&event=statement_settled&payload[site][id]=31615&payload[site][subdomain]=general-goods&payload[subscription][id]=15100141&payload[subscription][state]=active&payload[subscription][balance_in_cents]=0&payload[customer][id]=14585695&payload[customer][first_name]=Pookie&payload[customer][last_name]=Test&payload[customer][reference]=&payload[customer][organization]=&payload[customer][address]=&payload[customer][address_2]=&payload[customer][city]=&payload[customer][state]=&payload[customer][zip]=&payload[customer][country]=&payload[customer][email]=pookie999%40example.com&payload[customer][phone]=&payload[statement][closed_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[statement][created_at]=2016-11-08%2016%3A22%3A18%20-0500&payload[statement][id]=80168049&payload[statement][opened_at]=2016-11-07%2016%3A22%3A15%20-0500&payload[statement][settled_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[statement][subscription_id]=15100141&payload[statement][updated_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[statement][starting_balance_in_cents]=0&payload[statement][ending_balance_in_cents]=0&payload[statement][total_in_cents]=6400&payload[statement][memo]=We%20thank%20you%20for%20your%20continued%20business!&payload[statement][events][0][id]=346956565&payload[statement][events][0][key]=renewal_success&payload[statement][events][0][message]=Successful%20renewal%20for%20Pookie%20Test''s%20subscription%20to%20%2410%20Basic%20Plan&payload[statement][events][1][id]=346956579&payload[statement][events][1][key]=payment_success&payload[statement][events][1][message]=Successful%20payment%20of%20%2464.00%20for%20Pookie%20Test''s%20subscription%20to%20%2410%20Basic%20Plan&payload[statement][events][2][id]=347299359&payload[statement][events][2][key]=renewal_success&payload[statement][events][2][message]=Successful%20renewal%20for%20Pookie%20Test''s%20subscription%20to%20%2410%20Basic%20Plan&payload[statement][transactions][0][id]=161537343&payload[statement][transactions][0][subscription_id]=15100141&payload[statement][transactions][0][type]=Charge&payload[statement][transactions][0][kind]=baseline&payload[statement][transactions][0][transaction_type]=charge&payload[statement][transactions][0][success]=true&payload[statement][transactions][0][amount_in_cents]=1000&payload[statement][transactions][0][memo]=%2410%20Basic%20Plan%20(11%2F08%2F2016%20-%2011%2F09%2F2016)&payload[statement][transactions][0][created_at]=2016-11-08%2016%3A22%3A18%20-0500&payload[statement][transactions][0][starting_balance_in_cents]=0&payload[statement][transactions][0][ending_balance_in_cents]=1000&payload[statement][transactions][0][gateway_used]=&payload[statement][transactions][0][gateway_transaction_id]=&payload[statement][transactions][0][gateway_order_id]=&payload[statement][transactions][0][payment_id]=161537369&payload[statement][transactions][0][product_id]=3792003&payload[statement][transactions][0][tax_id]=&payload[statement][transactions][0][component_id]=&payload[statement][transactions][0][statement_id]=80168049&payload[statement][transactions][0][customer_id]=14585695&payload[statement][transactions][0][original_amount_in_cents]=&payload[statement][transactions][0][discount_amount_in_cents]=&payload[statement][transactions][0][taxable_amount_in_cents]=&payload[statement][transactions][1][id]=161537344&payload[statement][transactions][1][subscription_id]=15100141&payload[statement][transactions][1][type]=Charge&payload[statement][transactions][1][kind]=quantity_based_component&payload[statement][transactions][1][transaction_type]=charge&payload[statement][transactions][1][success]=true&payload[statement][transactions][1][amount_in_cents]=5400&payload[statement][transactions][1][memo]=Timesheet%20Users%3A%2018%20Timesheet%20Users&payload[statement][transactions][1][created_at]=2016-11-08%2016%3A22%3A18%20-0500&payload[statement][transactions][1][starting_balance_in_cents]=1000&payload[statement][transactions][1][ending_balance_in_cents]=6400&payload[statement][transactions][1][gateway_used]=&payload[statement][transactions][1][gateway_transaction_id]=&payload[statement][transactions][1][gateway_order_id]=&payload[statement][transactions][1][payment_id]=161537369&payload[statement][transactions][1][product_id]=3792003&payload[statement][transactions][1][tax_id]=&payload[statement][transactions][1][component_id]=277221&payload[statement][transactions][1][statement_id]=80168049&payload[statement][transactions][1][customer_id]=14585695&payload[statement][transactions][1][original_amount_in_cents]=&payload[statement][transactions][1][discount_amount_in_cents]=&payload[statement][transactions][1][taxable_amount_in_cents]=&payload[statement][transactions][2][id]=161537369&payload[statement][transactions][2][subscription_id]=15100141&payload[statement][transactions][2][type]=Payment&payload[statement][transactions][2][kind]=&payload[statement][transactions][2][transaction_type]=payment&payload[statement][transactions][2][success]=true&payload[statement][transactions][2][amount_in_cents]=6400&payload[statement][transactions][2][memo]=Pookie%20Test%20-%20%2410%20Basic%20Plan%3A%20Renewal%20payment&payload[statement][transactions][2][created_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[statement][transactions][2][starting_balance_in_cents]=6400&payload[statement][transactions][2][ending_balance_in_cents]=0&payload[statement][transactions][2][gateway_used]=bogus&payload[statement][transactions][2][gateway_transaction_id]=53433&payload[statement][transactions][2][gateway_order_id]=&payload[statement][transactions][2][payment_id]=&payload[statement][transactions][2][product_id]=3792003&payload[statement][transactions][2][tax_id]=&payload[statement][transactions][2][component_id]=&payload[statement][transactions][2][statement_id]=80168049&payload[statement][transactions][2][customer_id]=14585695&payload[statement][transactions][2][card_number]=XXXX-XXXX-XXXX-1&payload[statement][transactions][2][card_expiration]=10%2F2020&payload[statement][transactions][2][card_type]=bogus&payload[statement][transactions][2][refunded_amount_in_cents]=0&payload[product][id]=3792003&payload[product][name]=%2410%20Basic%20Plan&payload[product_family][id]=527890&payload[product_family][name]=Acme%20Projects&payload[payment_profile][id]=10102821&payload[payment_profile][first_name]=Pookie&payload[payment_profile][last_name]=Test&payload[payment_profile][billing_address]=&payload[payment_profile][billing_address_2]=&payload[payment_profile][billing_city]=&payload[payment_profile][billing_country]=&payload[payment_profile][billing_state]=&payload[payment_profile][billing_zip]=&payload[event_id]=347299384'
                        signature: 7c606ec4628ce75ec46e284097ce163a
                        signature_hmac_sha_256: 40f25e83dd324508bb2149e3e525821922fb210535ebfbfa81e7ab951996b41d
                    - webhook:
                        event: payment_success
                        id: 141765008
                        created_at: '2016-11-08T16:22:25-05:00'
                        last_error: 404 Resource Not Found (retry 5 of 5)
                        last_error_at: '2016-11-08T16:43:54-05:00'
                        accepted_at: null
                        last_sent_at: '2016-11-08T16:43:54-05:00'
                        last_sent_url: 'http://requestb.in/11u45x71'
                        successful: false
                        body: 'id=141765008&event=payment_success&payload[site][id]=31615&payload[site][subdomain]=general-goods&payload[subscription][id]=15100141&payload[subscription][state]=active&payload[subscription][trial_started_at]=&payload[subscription][trial_ended_at]=&payload[subscription][activated_at]=2016-11-04%2017%3A06%3A43%20-0400&payload[subscription][created_at]=2016-11-04%2017%3A06%3A42%20-0400&payload[subscription][updated_at]=2016-11-08%2016%3A22%3A22%20-0500&payload[subscription][expires_at]=&payload[subscription][balance_in_cents]=0&payload[subscription][current_period_ends_at]=2016-11-09%2016%3A06%3A42%20-0500&payload[subscription][next_assessment_at]=2016-11-09%2016%3A06%3A42%20-0500&payload[subscription][canceled_at]=&payload[subscription][cancellation_message]=&payload[subscription][next_product_id]=&payload[subscription][cancel_at_end_of_period]=false&payload[subscription][payment_collection_method]=automatic&payload[subscription][snap_day]=&payload[subscription][cancellation_method]=&payload[subscription][current_period_started_at]=2016-11-08%2016%3A06%3A42%20-0500&payload[subscription][previous_state]=active&payload[subscription][signup_payment_id]=161034048&payload[subscription][signup_revenue]=64.00&payload[subscription][delayed_cancel_at]=&payload[subscription][coupon_code]=&payload[subscription][total_revenue_in_cents]=32000&payload[subscription][product_price_in_cents]=1000&payload[subscription][product_version_number]=7&payload[subscription][payment_type]=credit_card&payload[subscription][referral_code]=pggn84&payload[subscription][coupon_use_count]=&payload[subscription][coupon_uses_allowed]=&payload[subscription][customer][id]=14585695&payload[subscription][customer][first_name]=Test&payload[subscription][customer][last_name]=Test&payload[subscription][customer][organization]=&payload[subscription][customer][email]=pookie999%40example.com&payload[subscription][customer][created_at]=2016-11-04%2017%3A06%3A42%20-0400&payload[subscription][customer][updated_at]=2016-11-04%2017%3A06%3A45%20-0400&payload[subscription][customer][reference]=&payload[subscription][customer][address]=&payload[subscription][customer][address_2]=&payload[subscription][customer][city]=&payload[subscription][customer][state]=&payload[subscription][customer][zip]=&payload[subscription][customer][country]=&payload[subscription][customer][phone]=&payload[subscription][customer][portal_invite_last_sent_at]=2016-11-04%2017%3A06%3A45%20-0400&payload[subscription][customer][portal_invite_last_accepted_at]=&payload[subscription][customer][verified]=false&payload[subscription][customer][portal_customer_created_at]=2016-11-04%2017%3A06%3A45%20-0400&payload[subscription][customer][cc_emails]=&payload[subscription][product][id]=3792003&payload[subscription][product][name]=%2410%20Basic%20Plan&payload[subscription][product][handle]=basic&payload[subscription][product][description]=lorem%20ipsum&payload[subscription][product][accounting_code]=basic&payload[subscription][product][request_credit_card]=false&payload[subscription][product][expiration_interval]=&payload[subscription][product][expiration_interval_unit]=never&payload[subscription][product][created_at]=2016-03-24%2013%3A38%3A39%20-0400&payload[subscription][product][updated_at]=2016-11-03%2013%3A03%3A05%20-0400&payload[subscription][product][price_in_cents]=1000&payload[subscription][product][interval]=1&payload[subscription][product][interval_unit]=day&payload[subscription][product][initial_charge_in_cents]=&payload[subscription][product][trial_price_in_cents]=&payload[subscription][product][trial_interval]=&payload[subscription][product][trial_interval_unit]=month&payload[subscription][product][archived_at]=&payload[subscription][product][require_credit_card]=false&payload[subscription][product][return_params]=&payload[subscription][product][taxable]=false&payload[subscription][product][update_return_url]=&payload[subscription][product][initial_charge_after_trial]=false&payload[subscription][product][version_number]=7&payload[subscription][product][update_return_params]=&payload[subscription][product][product_family][id]=527890&payload[subscription][product][product_family][name]=Acme%20Projects&payload[subscription][product][product_family][description]=&payload[subscription][product][product_family][handle]=billing-plans&payload[subscription][product][product_family][accounting_code]=&payload[subscription][product][public_signup_pages][id]=281054&payload[subscription][product][public_signup_pages][return_url]=http%3A%2F%2Fwww.example.com%3Fsuccessfulsignup&payload[subscription][product][public_signup_pages][return_params]=&payload[subscription][product][public_signup_pages][url]=https%3A%2F%2Fgeneral-goods.chargify.com%2Fsubscribe%2Fkqvmfrbgd89q%2Fbasic&payload[subscription][product][public_signup_pages][id]=281240&payload[subscription][product][public_signup_pages][return_url]=&payload[subscription][product][public_signup_pages][return_params]=&payload[subscription][product][public_signup_pages][url]=https%3A%2F%2Fgeneral-goods.chargify.com%2Fsubscribe%2Fdkffht5dxfd8%2Fbasic&payload[subscription][product][public_signup_pages][id]=282694&payload[subscription][product][public_signup_pages][return_url]=&payload[subscription][product][public_signup_pages][return_params]=&payload[subscription][product][public_signup_pages][url]=https%3A%2F%2Fgeneral-goods.chargify.com%2Fsubscribe%2Fjwffwgdd95s8%2Fbasic&payload[subscription][credit_card][id]=10102821&payload[subscription][credit_card][first_name]=Pookie&payload[subscription][credit_card][last_name]=Test&payload[subscription][credit_card][masked_card_number]=XXXX-XXXX-XXXX-1&payload[subscription][credit_card][card_type]=bogus&payload[subscription][credit_card][expiration_month]=10&payload[subscription][credit_card][expiration_year]=2020&payload[subscription][credit_card][customer_id]=14585695&payload[subscription][credit_card][current_vault]=bogus&payload[subscription][credit_card][vault_token]=1&payload[subscription][credit_card][billing_address]=&payload[subscription][credit_card][billing_city]=&payload[subscription][credit_card][billing_state]=&payload[subscription][credit_card][billing_zip]=&payload[subscription][credit_card][billing_country]=&payload[subscription][credit_card][customer_vault_token]=&payload[subscription][credit_card][billing_address_2]=&payload[subscription][credit_card][payment_type]=credit_card&payload[transaction][id]=161537369&payload[transaction][subscription_id]=15100141&payload[transaction][type]=Payment&payload[transaction][kind]=&payload[transaction][transaction_type]=payment&payload[transaction][success]=true&payload[transaction][amount_in_cents]=6400&payload[transaction][memo]=Pookie%20Test%20-%20%2410%20Basic%20Plan%3A%20Renewal%20payment&payload[transaction][created_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[transaction][starting_balance_in_cents]=6400&payload[transaction][ending_balance_in_cents]=0&payload[transaction][gateway_used]=bogus&payload[transaction][gateway_transaction_id]=53433&payload[transaction][gateway_order_id]=&payload[transaction][payment_id]=&payload[transaction][product_id]=3792003&payload[transaction][tax_id]=&payload[transaction][component_id]=&payload[transaction][statement_id]=80168049&payload[transaction][customer_id]=14585695&payload[transaction][card_number]=XXXX-XXXX-XXXX-1&payload[transaction][card_expiration]=10%2F2020&payload[transaction][card_type]=bogus&payload[transaction][refunded_amount_in_cents]=0&payload[transaction][invoice_id]=&payload[event_id]=347299364'
                        signature: fbcf2f6be579f9658cff90c4373e0ca2
                        signature_hmac_sha_256: db96654f5456c5460062feb944ac8bb1418f9d181ae04a8ed982fe9ffdca8de1
      operationId: get-webhooks.json
      description: |-
        ## Webhooks Intro

        The Webhooks API allows you to view a list of all webhooks and to selectively resend individual or groups of webhooks. Webhooks will be sent on endpoints specified by you. Endpoints can be added via API or Web UI. There is also an option to enable / disable webhooks via API request. 

        We recommend that you review Chargify's webhook documentation located in our help site. The following resources will help guide you on how to use webhooks in Chargify, in addition to these webhook endpoints:

        + [Adding/editing new webhooks](https://help.chargify.com/settings/webhooks.html)
        + [Webhooks introduction and delivery information](https://help.chargify.com/webhooks/introduction.html)
        + [Main webhook overview](https://help.chargify.com/webhooks/webhooks-reference.html)
        + [Available webhooks and payloads](https://help.chargify.com/webhooks/webhooks-reference.html#example-payloads)

        ## List Webhooks for a Site

        This method allows you to fetch data about webhooks. You can pass query parameters if you want to filter webhooks.
      parameters:
        - schema:
            type: string
            enum:
              - successful
              - failed
              - pending
              - paused
          in: query
          name: status
        - schema:
            type: string
          in: query
          name: since_date
          description: Format YYYY-MM-DD. Returns Webhooks with the created_at date greater than or equal to the one specified.
        - schema:
            type: string
          in: query
          name: until_date
          description: Format YYYY-MM-DD. Returns Webhooks with the created_at date less than or equal to the one specified.
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            maximum: 200
            default: 20
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request.
        - schema:
            type: string
            enum:
              - newest_first
              - oldest_first
          in: query
          name: order
          description: The order in which the Webhooks are returned
        - schema:
            type: integer
          in: query
          name: subscription
          description: The Chargify id of a subscription you'd like to filter for
  /webhooks/settings.json:
    put:
      summary: Enable Webhooks
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  webhooks_enabled:
                    type: boolean
              examples:
                Example:
                  value:
                    webhooks_enabled: true
      operationId: put-webhooks-settings.json
      description: |-
        ## Enable webhooks for site

        This method allows you to enable webhooks via API for your site
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                webhooks_enabled:
                  type: boolean
              required:
                - webhooks_enabled
            examples:
              Example:
                value:
                  webhooks_enabled: true
  /webhooks/replay.json:
    post:
      summary: Replay Webhooks
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
              examples:
                Example:
                  value:
                    status: ok
      operationId: post-webhooks-replay.json
      description: |-
        ## Replay Webhooks for Site

        Posting to the replay endpoint does not immediately resend the webhooks. They are added to a queue and will be sent as soon as possible, depending on available system resources.

        You may submit an array of up to 1000 webhook IDs to replay in the request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: integer
              required:
                - ids
            examples:
              Example:
                value:
                  ids:
                    - 123456789
                    - 123456788
  /endpoints.json:
    post:
      summary: Create Endpoint
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoint:
                    $ref: ../models/Endpoint.v1.yaml
              examples:
                Example:
                  value:
                    endpoint:
                      id: 1
                      url: 'https://your.site/webhooks'
                      site_id: 1
                      status: enabled
                      webhook_subscriptions:
                        - payment_success
                        - payment_failure
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                required:
                  - errors
              examples:
                Example:
                  value:
                    errors:
                      - 'URL: invalid, only http and https supported'
      operationId: post-endpoints.json
      description: |-
        ## Endpoint

        The Chargify API allows you to create an endpoint and assign a list of webhooks subscriptions (events) to it.

        You can check available events here.                
        [Event keys](https://help.chargify.com/webhooks/webhooks-reference.html#example-payloads)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                endpoint:
                  $ref: ../models/Create-or-Update-Endpoint.v1.yaml
              required:
                - endpoint
            examples:
              Example:
                value:
                  endpoint:
                    url: 'https://your.site/webhooks'
                    webhook_subscriptions:
                      - payment_success
                      - payment_failure
    get:
      summary: List Endpoints
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Endpoint.v1.yaml
              examples:
                Example:
                  value:
                    - id: 11
                      url: 'https://foobar.com/webhooks'
                      site_id: 1
                      status: enabled
                      webhook_subscriptions:
                        - payment_success
                        - payment_failure
                    - id: 12
                      url: 'https:/example.com/webhooks'
                      site_id: 1
                      status: enabled
                      webhook_subscriptions:
                        - payment_success
                        - payment_failure
                        - refund_failure
      operationId: get-endpoints.json
      description: |-
        ## List of endpoints for site

        This method returns created endpoints for site.
  '/endpoints/{endpoint_id}.json':
    parameters:
      - schema:
          type: integer
        name: endpoint_id
        in: path
        required: true
        description: The Chargify id for the endpoint that should be updated
    put:
      summary: Update Endpoint
      tags:
        - Webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoint:
                    $ref: ../models/Endpoint.v1.yaml
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - Event key is not valid - foobar
      operationId: post-endpoints-endpoint_id-.json
      description: |-
        ## Update an Endpoint

        You can update an Endpoint via the API with a PUT request to the resource endpoint.

        You can change the `url` of your endpoint which consumes webhooks or list of `webhook_subscriptions`.   
        Check available [Event keys](https://help.chargify.com/webhooks/webhooks-reference.html).

        Always send a complete list of events which you want subscribe/watch.
        Sending an PUT request for existing endpoint with empty list of `webhook_subscriptions` will end with unsubscribe from all events.

        If you want unsubscribe from specific event, just send a list of `webhook_subscriptions` without the specific event key.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                endpoint:
                  $ref: ../models/Create-or-Update-Endpoint.v1.yaml
              required:
                - endpoint
            examples:
              Example:
                value:
                  endpoint:
                    url: 'https://yout.site/webhooks/1/json.'
                    webhook_subscriptions:
                      - payment_failure
                      - payment_success
                      - refund_failure
  /site.json:
    get:
      summary: Read Site
      tags:
        - Sites
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  site:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      subdomain:
                        type: string
                      currency:
                        type: string
                      seller_id:
                        type: integer
                      non_primary_currencies:
                        type: array
                        items:
                          type: string
                      relationship_invoicing_enabled:
                        type: boolean
                      customer_hierarchy_enabled:
                        type: boolean
                      whopays_enabled:
                        type: boolean
                      whopays_default_payer:
                        type: string
                        enum:
                          - self-ungrouped
                          - self
                          - parent
                          - eldest
                      default_payment_collection_method:
                        type: string
              examples:
                Example:
                  value:
                    site:
                      id: 68
                      name: Invoice Centric Billing
                      subdomain: invoices
                      currency: USD
                      seller_id: 2
                      non_primary_currencies:
                        - GBP
                      relationship_invoicing_enabled: true
                      customer_hierarchy_enabled: true
                      whopays_enabled: true
                      whopays_default_payer: eldest
      operationId: get-site.json
      description: |-
        ## Read Site Data
        This endpoint allows you to fetch some site data.

        Full documentation on Sites in the Chargify UI can be located [here](http://help.chargify.com/sites/sites-intro.html).

        Specifically, the [Clearing Site Data](http://help.chargify.com/sites/clearing-site-data.html) section is extremely relevant to this endpoint documentation.

        #### Relationship invoicing enabled
        If site has RI enabled then you will see more settings like: 

            "customer_hierarchy_enabled": true,
            "whopays_enabled": true,
            "whopays_default_payer": "self"
        You can read more about these settings here:
         [Who Pays & Customer Hierarchy](https://help.chargify.com/invoices/customer-hierarchies-whopays.html)
  /sites/clear_data.json:
    post:
      summary: Clear Site Data
      tags:
        - Sites
      operationId: post-sites-clear_data.json
      description: |
        ## Clear Site Data

        This call is asynchronous and there may be a delay before the site data is fully deleted. If you are clearing site data for an automated test, you will need to build in a delay and/or check that there are no products, etc., in the site before proceeding.

        **This functionality will only work on sites in TEST mode. Attempts to perform this on sites in “live” mode will result in a response of 403 FORBIDDEN.**
      parameters:
        - schema:
            type: string
            default: all
            enum:
              - all
              - customers
          in: query
          name: cleanup_scope
          description: 'all: Will clear all products, customers, and related subscriptions from the site. customers: Will clear only customers and related subscriptions (leaving the products untouched) for the site. Revenue will also be reset to 0.'
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
  '/subscriptions/{subscription_id}/notes.json':
    parameters:
      - schema:
          type: string
        name: subscription_id
        in: path
        required: true
        description: The Chargify id of the subscription
    post:
      summary: Create Subscription Note
      operationId: post-subscriptions-subscription_id-notes.json
      tags:
        - Subscription Notes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  note:
                    $ref: ../models/Subscription-Note.v1.yaml
                required:
                  - note
      description: |-
        ## Create a Note

        Use the following method to create a note for a subscription.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  $ref: ../models/Create-or-Update-Subscription-Note.v1.yaml
            examples:
              Example:
                value:
                  note:
                    body: New test note.
                    sticky: true
    delete:
      summary: Delete Subscription Note
      operationId: delete-subscriptions-subscription_id-notes.json
      tags:
        - Subscription Notes
      responses:
        '200':
          description: OK
        '422':
          description: Unprocessable Entity (WebDAV)
      description: |-
        ## Delete a Note

        Use the following method to delete a note for a Subscription.
    get:
      summary: List Subscription Notes
      tags:
        - Subscription Notes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    note:
                      $ref: ../models/Subscription-Note.v1.yaml
              examples:
                Example:
                  value:
                    - note:
                        body: Test note.
                        created_at: '2015-06-15T13:26:47-04:00'
                        id: 5
                        sticky: false
                        subscription_id: 100046
                        updated_at: '2015-06-15T13:28:12-04:00'
                    - note:
                        body: Another test note.
                        created_at: '2015-06-15T12:04:46-04:00'
                        id: 4
                        sticky: false
                        subscription_id: 100046
                        updated_at: '2015-06-15T13:26:33-04:00'
      operationId: get-subscriptions-subscription_id-notes.json
      description: |-
        ## List Notes for a Subscription

        Use this method to retrieve a list of Notes associated with a Subscription. The response will be an array of Notes.
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            maximum: 200
            default: 20
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request.
  '/subscriptions/{subscription_id}/notes/{note_id}.json':
    parameters:
      - schema:
          type: string
        name: subscription_id
        in: path
        required: true
        description: The Chargify id of the subscription associated with the note
      - schema:
          type: string
        name: note_id
        in: path
        required: true
        description: The Chargify id of the note
    get:
      summary: Read Subscription Note
      tags:
        - Subscription Notes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  note:
                    $ref: ../models/Subscription-Note.v1.yaml
              examples:
                Example:
                  value:
                    note:
                      body: Test note.
                      created_at: '2015-06-15T13:26:47-04:00'
                      id: 5
                      sticky: false
                      subscription_id: 100046
                      updated_at: '2015-06-15T13:28:12-04:00'
      operationId: get-subscriptions-subscription_id-notes-note_id-.json
      description: |-
        ## Read Specific Note

        Once you have obtained the ID of the note you wish to read, use this method to show a particular note attached to a subscription.
    put:
      summary: Update Subscription Note
      tags:
        - Subscription Notes
      operationId: put-subscriptions-subscription_id-notes-note_id-.json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  note:
                    $ref: ../models/Subscription-Note.v1.yaml
      description: |-
        ## Update a Note

        Use the following method to update a note for a Subscription.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                note:
                  $ref: ../models/Create-or-Update-Subscription-Note.v1.yaml
              required:
                - note
            examples:
              Example:
                value:
                  note:
                    body: Modified test note.
                    sticky: true
  /customers.json:
    post:
      summary: Create Customer
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: ../models/Customer.yaml
              examples:
                Example:
                  value:
                    customer:
                      first_name: Cathryn
                      last_name: Parisian
                      email: Stella.McLaughlin6@example.net
                      cc_emails: null
                      organization: Greenholt - Oberbrunner
                      reference: null
                      id: 76
                      created_at: '2021-03-29T07:47:00-04:00'
                      updated_at: '2021-03-29T07:47:00-04:00'
                      address: 739 Stephon Bypass
                      address_2: Apt. 386
                      city: Sedrickchester
                      state: KY
                      state_name: Kentucky
                      zip: 46979-7719
                      country: US
                      country_name: United States
                      phone: 230-934-3685
                      verified: false
                      portal_customer_created_at: null
                      portal_invite_last_sent_at: null
                      portal_invite_last_accepted_at: null
                      tax_exempt: false
                      vat_number: null
                      parent_id: null
                      locale: en-US
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      errors:
                        type: object
                        properties:
                          customer:
                            type: string
                  - properties:
                      errors:
                        type: array
                        items:
                          type: string
                type: object
              examples:
                Example 1:
                  value:
                    errors:
                      customer: can't be blank
                Example 2:
                  value:
                    errors:
                      - 'First name: cannot be blank.'
                      - 'Last name: cannot be blank.'
                      - 'Email address: cannot be blank.'
      operationId: post-customers.json
      description: |-
        ## Create Customer Customer

        You may create a new Customer at any time, or you may create a Customer at the same time you create a Subscription. The only validation restriction is that you may only create one customer for a given reference value. 

        If provided, the `reference` value must be unique. It represents a unique identifier for the customer from your own app, i.e. the customer’s ID. This allows you to retrieve a given customer via a piece of shared information. Alternatively, you may choose to leave `reference` blank, and store Chargify’s unique ID for the customer, which is in the `id` attribute.

        Full documentation on how to locate, create and edit Customers in the Chargify UI can be located [here](https://help.chargify.com/customers/customers-intro.html).

        ## Required Country Format

        Chargify requires that you use the ISO Standard Country codes when formatting country attribute of the customer.

        Countries should be formatted as 2 characters. For more information, please see the following wikipedia article on [ISO_3166-1.](http://en.wikipedia.org/wiki/ISO_3166-1#Current_codes)

        ## Required State Format

        Chargify requires that you use the ISO Standard State codes when formatting state attribute of the customer.

        + US States (2 characters): [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2:US)

        + States Outside the US (2-3 characters): To find the correct state codes outside of the US, please go to [ISO_3166-1](http://en.wikipedia.org/wiki/ISO_3166-1#Current_codes) and click on the link in the “ISO 3166-2 codes” column next to country you wish to populate.

        ## Locale

        Chargify allows you to attribute a language/region to your customer to deliver invoices in any required language.
        For more: [Customer Locale](https://help.chargify.com/settings/multi-lingual-invoices.html#customer-locale)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                  $ref: ../models/Create-Customer.yaml
            examples:
              Example:
                value:
                  customer:
                    first_name: Martha
                    last_name: Washington
                    email: martha@example.com
                    cc_emails: george@example.com
                    organization: 'ABC, Inc.'
                    reference: '1234567890'
                    address: 123 Main Street
                    address2: Unit 10
                    city: Anytown
                    state: MA
                    zip: '02120'
                    country: US
                    phone: 555-555-1212
                    locale: es-MX
    get:
      summary: List or Find Customers
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Customer.yaml
              examples:
                Example:
                  value:
                    - customer:
                        first_name: Kayla
                        last_name: Test
                        email: kayla@example.com
                        cc_emails: 'john@example.com, sue@example.com'
                        organization: ''
                        reference: null
                        id: 14126091
                        created_at: '2016-10-04T15:22:27-04:00'
                        updated_at: '2016-10-04T15:22:30-04:00'
                        address: ''
                        address_2: ''
                        city: ''
                        state: ''
                        zip: ''
                        country: ''
                        phone: ''
                        verified: null
                        portal_customer_created_at: '2016-10-04T15:22:29-04:00'
                        portal_invite_last_sent_at: '2016-10-04T15:22:30-04:00'
                        portal_invite_last_accepted_at: null
                        tax_exempt: false
                    - customer:
                        first_name: 'Nick '
                        last_name: Test
                        email: nick@example.com
                        cc_emails: 'john@example.com, sue@example.com'
                        organization: ''
                        reference: null
                        id: 14254093
                        created_at: '2016-10-13T16:52:51-04:00'
                        updated_at: '2016-10-13T16:52:54-04:00'
                        address: ''
                        address_2: ''
                        city: ''
                        state: ''
                        zip: ''
                        country: ''
                        phone: ''
                        verified: null
                        portal_customer_created_at: '2016-10-13T16:52:54-04:00'
                        portal_invite_last_sent_at: '2016-10-13T16:52:54-04:00'
                        portal_invite_last_accepted_at: null
                        tax_exempt: false
                        parent_id: 123
                    - customer:
                        first_name: Don
                        last_name: Test
                        email: don@example.com
                        cc_emails: 'john@example.com, sue@example.com'
                        organization: ''
                        reference: null
                        id: 14332342
                        created_at: '2016-10-19T10:49:13-04:00'
                        updated_at: '2016-10-19T10:49:19-04:00'
                        address: 1737 15th St
                        address_2: ''
                        city: Boulder
                        state: CO
                        zip: '80302'
                        country: US
                        phone: ''
                        verified: null
                        portal_customer_created_at: '2016-10-19T10:49:19-04:00'
                        portal_invite_last_sent_at: '2016-10-19T10:49:19-04:00'
                        portal_invite_last_accepted_at: null
                        tax_exempt: false
                        parent_id: null
      operationId: get-customers.json
      description: |-
        ## List Customers

        This request will by default list all customers associated with your Site.

        ## Find Customer

        Use the search feature to retrieve a single or group of customers. 

        Common use cases are:

        + Search by email
        + Search by Chargify ID
        + Search by Reference (Your App)
        + Search by Organization
      parameters:
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          in: query
          name: direction
          description: Direction to sort customers by time of creation
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            maximum: 200
            default: 50
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request.
        - schema:
            type: string
            enum:
              - created_at
              - updated_at
          in: query
          name: date_field
          description: The type of filter you would like to apply to your search.
        - schema:
            type: string
          in: query
          description: 'The start date (format YYYY-MM-DD) with which to filter the date_field. Returns subscriptions with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified'
          name: start_date
        - schema:
            type: string
          in: query
          name: end_date
          description: 'The end date (format YYYY-MM-DD) with which to to filter the date_field. Returns subscriptions with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: start_datetime
          description: 'The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns subscriptions with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date.'
        - schema:
            type: string
          in: query
          description: 'The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns subscriptions with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date.'
          name: end_datetime
        - schema:
            type: string
          in: query
          name: q
          description: 'A search query by which to filter customers (can be an email, an ID, a reference, organization)'
  '/customers/{id}.json':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: The Chargify id of the customer
    get:
      summary: Read Customer
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: ../models/Customer.yaml
      operationId: get-customers-id-.json
      description: |-
        ## Read Customer Data

        This method allows to retrieve the Customer properties by Chargify-generated Customer ID.
      parameters: []
    put:
      summary: Update Customer
      tags:
        - Customers
      operationId: put-customers-id-.json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Customer.yaml
              examples:
                Example:
                  value:
                    customer:
                      first_name: Martha
                      last_name: Washington
                      email: martha.washington@example.com
                      cc_emails: george.washington@example.com
                      organization: null
                      reference: null
                      id: 14967442
                      created_at: '2016-12-05T10:33:07-05:00'
                      updated_at: '2016-12-05T10:38:00-05:00'
                      address: null
                      address_2: null
                      city: null
                      state: null
                      zip: null
                      country: null
                      phone: null
                      verified: false
                      portal_customer_created_at: null
                      portal_invite_last_sent_at: null
                      portal_invite_last_accepted_at: null
                      tax_exempt: false
                      vat_number: '012345678'
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - 'Email: must be a valid email address'
      description: |-
        ## Update Customer

        This method allows to update the Customer.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                  $ref: ../models/Update-Customer.yaml
            examples:
              Example:
                value:
                  customer:
                    first_name: Martha
                    last_name: Washington
                    email: martha.washington@example.com
    delete:
      summary: Delete Customer
      tags:
        - Customers
      operationId: delete-customers-id-.json
      responses:
        '204':
          description: No Content
      description: |-
        ## Delete Customer

        This method allows to delete the Customer.
  /customers/lookup.json:
    get:
      summary: Read Customer by Reference
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: ../models/Customer.yaml
      operationId: get-customers-lookup.json
      description: |-
        ## Read Customer by Reference Value

        Use this method to return the customer object if you have the **Reference ID (Your App)** value.

        ### Endpoint Deprecated

        Use the Find Customer endpoint instead.
      parameters:
        - schema:
            type: string
          in: query
          name: reference
          required: true
      deprecated: true
  '/customers/{customer_id}/subscriptions.json':
    parameters:
      - schema:
          type: integer
        name: customer_id
        in: path
        required: true
        description: The Chargify id of the customer
    get:
      summary: List Customer Subscriptions
      tags:
        - Customers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Subscription.yaml
      operationId: get-customers-customer_id-subscriptions.json
      description: |-
        ## List Subscriptions for a Customer

        This method lists all subscriptions that belong to a customer.
  '/portal/customers/{customer_id}/enable.json':
    parameters:
      - schema:
          type: integer
        name: customer_id
        in: path
        required: true
        description: The Chargify id of the customer
    post:
      summary: Enable Billing Portal for Customer
      tags:
        - Billing Portal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    $ref: ../models/Customer.yaml
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - Portal is already enabled for this customer.
      operationId: post-portal-customers-customer_id-enable.json
      description: |-
        ## Billing Portal Documentation

        Full documentation on how the Billing Portal operates within the Chargify UI can be located [here](https://help.chargify.com/billing-portal/introduction.html).

        This documentation is focused on how the to configure the Billing Portal Settings, as well as Subscriber Interaction and Merchant Management of the Billing Portal. 

        You can use this endpoint to enable Billing Portal access for a Customer, with the option of sending the Customer an Invitation email at the same time.

        ## Billing Portal Security

        If your customer has been invited to the Billing Portal, then they will receive a link to manage their subscription (the “Management URL”) automatically at the bottom of their statements, invoices, and receipts. **This link changes periodically for security and is only valid for 65 days.** 

        If you need to provide your customer their Management URL through other means, you can retrieve it via the API. Because the URL is cryptographically signed with a timestamp, it is not possible for merchants to generate the URL without requesting it from Chargify.

        In order to prevent abuse & overuse, we ask that you request a new URL only when absolutely necessary. Management URLs are good for 65 days, so you should re-use a previously generated one as much as possible. If you use the URL frequently (such as to display on your website), please **do not** make an API request to Chargify every time.
      parameters:
        - schema:
            type: integer
            enum:
              - 0
              - 1
          in: query
          name: auto_invite
          description: 'When set to 1, an Invitation email will be sent to the Customer. When set to 0, or not sent, an email will not be sent.'
  '/portal/customers/{customer_id}/management_link.json':
    parameters:
      - schema:
          type: integer
        name: customer_id
        in: path
        required: true
        description: The Chargify id of the customer
    get:
      summary: Read Billing Portal Management Link
      tags:
        - Billing Portal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fetch_count:
                    type: integer
                  created_at:
                    type: string
                  new_link_available_at:
                    type: string
                  expires_at:
                    type: string
                  last_invite_sent_at:
                    type: string
                    nullable: true
              examples:
                Example:
                  value:
                    url: 'https://www.billingportal.com/manage/19804639/1517596469/bd16498719a7d3e6'
                    fetch_count: 1
                    created_at: '2018-02-02T18:34:29Z'
                    new_link_available_at: '2018-02-17T18:34:29Z'
                    expires_at: '2018-04-08T17:34:29Z'
                    last_invite_sent_at: '2018-02-02T18:34:29Z'
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - Billing Portal is not enabled for this customer.
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      error:
                        type: string
              examples:
                Example:
                  value:
                    errors:
                      error: Too many requests for this customer's management link
      operationId: get-portal-customers-customer_id-management_link.json
      description: |-
        ## Read the Management Link

        This method will provide to the API user the exact URL required for a subscriber to access the Billing Portal.

        ## Rules for Management Link API

        + When retrieving a management URL, multiple requests for the same customer in a short period will return the **same** URL
        + We will not generate a new URL for 15 days
        + You must cache and remember this URL if you are going to need it again within 15 days
        + Only request a new URL after the `new_link_available_at` date
        + You are limited to 15 requests for the same URL. If you make more than 15 requests before `new_link_available_at`, you will be blocked from further Management URL requests (with a response code `429`)
  '/portal/customers/{customer_id}/invitations/invite.json':
    parameters:
      - schema:
          type: integer
        name: customer_id
        in: path
        required: true
        description: The Chargify id of the customer
    post:
      summary: Resend Billing Portal Invitation
      tags:
        - Billing Portal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  last_sent_at:
                    type: string
                  last_accepted_at:
                    type: string
                  send_invite_link_text:
                    type: string
                  uninvited_count:
                    type: integer
              examples:
                Example:
                  value:
                    last_sent_at: enim Duis esse dolore
                    last_accepted_at: adipisicing magna do in irure
                    send_invite_link_text: veniam sit
                    uninvited_count: 66254678
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - 'Too many requests for this customer. You can perform 5 requests within 00:30:00.'
      operationId: post-portal-customers-customer_id-invitations-invite.json
      description: |-
        ## Resend Billing Portal Invitation for Customer

        You can resend a customer's Billing Portal invitation.

        If you attempt to resend an invitation 5 times within 30 minutes, you will receive a `422` response with `error` message in the body.

        If you attempt to resend an invitation when the Billing Portal is already disabled for a Customer, you will receive a `422` error response.

        If you attempt to resend an invitation when the Billing Portal is already disabled for a Customer, you will receive a `422` error response.

        If you attempt to resend an invitation when the Customer does not exist a Customer, you will receive a `404` error response.

        ## Limitations

        This endpoint will only return a JSON response.
  '/portal/customers/{customer_id}/invitations/revoke.json':
    parameters:
      - schema:
          type: integer
        name: customer_id
        in: path
        required: true
        description: The Chargify id of the customer
    delete:
      summary: Revoke Billing Portal Invitation for Customer
      tags:
        - Billing Portal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  last_sent_at:
                    type: string
                  last_accepted_at:
                    type: string
                  uninvited_count:
                    type: integer
              examples:
                Example:
                  value:
                    last_sent_at: Not Invited
                    last_accepted_at: Invite Revoked
                    uninvited_count: 8
        '422':
          description: Unprocessable Entity (WebDAV)
      operationId: delete-portal-customers-customer_id-invitations-revoke.json
      description: |-
        ## Revoke Billing Portal Invitation for Customer

        You can revoke a customer's Billing Portal invitation.

        If you attempt to revoke an invitation when the Billing Portal is already disabled for a Customer, you will receive a 422 error response.

        ## Limitations

        This endpoint will only return a JSON response.
  /stats.json:
    get:
      summary: Read Site Stats
      tags:
        - Insights
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  seller_name:
                    type: string
                  site_name:
                    type: string
                  site_id:
                    type: integer
                  site_currency:
                    type: string
                  stats:
                    type: object
                    properties:
                      total_subscriptions:
                        type: integer
                      subscriptions_today:
                        type: integer
                      total_revenue:
                        type: string
                      revenue_today:
                        type: string
                      revenue_this_month:
                        type: string
                      revenue_this_year:
                        type: string
                      total_canceled_subscriptions:
                        type: integer
                      total_active_subscriptions:
                        type: number
                      total_past_due_subscriptions:
                        type: number
                      total_unpaid_subscriptions:
                        type: number
                      total_dunning_subscriptions:
                        type: number
              examples:
                Example:
                  value:
                    seller_name: 'Acme, Inc.'
                    site_name: Production
                    site_id: 12345
                    site_currency: USD
                    stats:
                      total_subscriptions: 120
                      subscriptions_today: 4
                      total_revenue: '$45,978.81'
                      revenue_today: '$1,405.12'
                      revenue_this_month: '$10,000.00'
                      revenue_this_year: '$27,935.24'
      operationId: get-stats.json
      description: |-
        ## Stats

        The Stats API is a very basic view of some Site-level stats. This API call only answers with JSON responses. An XML version is not provided.

        ## Stats Documentation

        There currently is not a complimentary matching set of documentation that compliments this endpoint. However, each Site's dashboard will reflect the summary of information provided in the Stats reposnse. 

        ```
        https://subdomain.chargify.com/dashboard
        ```
  /referral_codes/validate.json:
    get:
      summary: Validate Referral Code
      tags:
        - Referral Codes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  referral_code:
                    type: object
                    properties:
                      id:
                        type: integer
                      site_id:
                        type: integer
                      subscription_id:
                        type: integer
                      code:
                        type: string
              examples:
                Example:
                  value:
                    referral_code:
                      id: 1032514
                      site_id: 31615
                      subscription_id: 16254270
                      code: 9b6cdw
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
              examples:
                Example:
                  value:
                    errors: Referral code is invalid.
      operationId: get-referral_codes-validate.json
      parameters:
        - schema:
            type: string
          in: query
          required: true
          name: code
          description: The referral code you are trying to validate
      description: |-
        ## Validate Referral Code

        Use this method to determine if the referral code is valid and applicable within your Site. This method is useful for validating referral codes that are entered by a customer.

        ## Referrals Documentation

        Full documentation on how to use the referrals feature in the Chargify UI can be located [here](http://help.chargify.com/referrals/introduction.html).

        ## Server Response

        If the referral code is valid the status code will be `200` and the referral code will be returned. If the referral code is invalid, a `404` response will be returned.
  /reason_codes.json:
    post:
      summary: Create Reason Code
      tags:
        - Reason Codes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason_code:
                    $ref: ../models/Reason-Code.yaml
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - 'Code: cannot be blank.'
                      - 'Code: This code is already in use.'
                      - 'Description: cannot be blank.'
      operationId: post-reason_codes.json
      description: |-
        # Reason Codes Intro

        ReasonCodes are a way to gain a high level view of why your customers are cancelling the subcription to your product or service.

        Add a set of churn reason codes to be displayed in-app and/or the Chargify Billing Portal. As your subscribers decide to cancel their subscription, learn why they decided to cancel. 

        ## Reason Code Documentation

        Full documentation on how Reason Codes operate within Chargify can be located under the following links.

        [Churn Reason Codes](http://help.chargify.com/subscriptions/cancellation.html#churn-reason-codes)

        ## Create Reason Code

        This method gives a merchant the option to create a reason codes for a given Site.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason_code:
                  type: object
                  properties:
                    code:
                      type: string
                      description: The unique identifier for the ReasonCode
                    description:
                      type: string
                      description: The friendly summary of what the code signifies
                    position:
                      type: integer
                      description: The order that code appears in lists
                  required:
                    - code
                    - description
            examples:
              Example:
                value:
                  reason_code:
                    code: NOTHANKYOU
                    description: No thank you!
                    position: 5
    get:
      summary: List Reason Codes
      tags:
        - Reason Codes
      operationId: get-reason_codes.json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Reason-Code.yaml
              examples:
                Example:
                  value:
                    - reason_code:
                        id: 2
                        site_id: 2
                        code: LARGE
                        description: This is too complicated
                        position: 1
                        created_at: '2017-02-16T16:49:07-05:00'
                        updated_at: '2017-02-17T16:29:51-05:00'
                    - reason_code:
                        id: 1
                        site_id: 2
                        code: CH1
                        description: This doesnt meet my needs
                        position: 2
                        created_at: '2017-02-16T16:48:45-05:00'
                        updated_at: '2017-02-17T16:29:59-05:00'
                    - reason_code:
                        id: 5
                        site_id: 2
                        code: HAN99
                        description: Hard to setup
                        position: 3
                        created_at: '2017-02-17T16:29:42-05:00'
                        updated_at: '2017-02-17T16:29:59-05:00'
      description: |-
        ## List Reason Codes for a Site

        This method gives a merchant the option to retrieve a list of all of the current churn codes for a given site.
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
  '/reason_codes/{reason_code_id}.json':
    parameters:
      - schema:
          type: integer
        name: reason_code_id
        in: path
        required: true
        description: The Chargify id of the reason code
    get:
      summary: Read Reason Code
      tags:
        - Reason Codes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason_code:
                    $ref: ../models/Reason-Code.yaml
        '404':
          description: Not Found
      operationId: get-reason_codes-reason_code_id-.json
      description: |-
        ## Read Reason Code

        This method gives a merchant the option to retrieve a list of a particular code for a given Site by providing the unique numerical ID of the code.
    put:
      summary: Update Reason Code
      tags:
        - Reason Codes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason_code:
                    $ref: ../models/Reason-Code.yaml
        '404':
          description: Not Found
      operationId: put-reason_codes-reason_code_id-.json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason_code:
                  type: object
                  properties:
                    code:
                      type: string
                      description: The unique identifier for the ReasonCode
                    description:
                      type: string
                      description: The friendly summary of what the code signifies
                    position:
                      type: integer
                      description: The order that code appears in lists
      description: |-
        ## Update Reason Code

        This method gives a merchant the option to update an existing reason code for a given site.
    delete:
      summary: Delete Reason Code
      tags:
        - Reason Codes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: string
              examples:
                Example:
                  value:
                    ok: ok
        '404':
          description: Not Found
      operationId: delete-reason_codes-reason_code_id-.json
      description: |-
        ## Delete Reason Code

        This method gives a merchant the option to delete one reason code from the Churn Reason Codes. This code will be immediately removed. This action is not reversable.
  '/{resource_type}/metafields.json':
    parameters:
      - schema:
          type: string
          enum:
            - subscriptions
            - customers
        name: resource_type
        in: path
        required: true
        description: the resource type to which the metafields belong
    post:
      summary: Create Metafields
      tags:
        - Custom Fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Metafield.yaml
              examples:
                Example:
                  value:
                    - name: Color
                      scope:
                        hosted: []
                        csv: '0'
                        statements: '0'
                        invoices: '0'
                        portal: '0'
                      data_count: 0
                      input_type: text
                      enum: null
                    - name: Brand
                      scope:
                        hosted: []
                        csv: '0'
                        statements: '0'
                        invoices: '0'
                        portal: '0'
                      data_count: 0
                      input_type: text
                      enum: null
      operationId: post-resource_type-metafields.json
      description: |-
        ## Custom Fields: Metafields Intro

        **Chargify refers to Custom Fields in the API documentation as metafields and metadata.** Within the Chargify UI, metadata and metafields are grouped together under the umbrella of "Custom Fields." All of our UI-based documentation that references custom fields will not cite the terminology metafields or metadata. 

        + **Metafield is the custom field**
        + **Metadata is the data populating the custom field.**

        Chargify Metafields are used to add meaningful attributes to subscription and customer resources. Full documentation on how to create Custom Fields in the Chargify UI can be located [here](https://help.chargify.com/custom-fields/custom-fields-intro.html). For additional documentation on how to record data within custom fields, please see our subscription-based documentation [here.](https://help.chargify.com/subscriptions/subscription-summary.html#custom-fields)

        Metafield are the place where you will set up your resource to accept additional data. It is scoped to the site instead of a specific customer or subscription. Think of it as the key, and Metadata as the value on every record.

        ## Create Metafields

        Use this endpoint to create metafields for your Site. Metafields can be populated with metadata after the fact.

        Each site is limited to 100 unique Metafields (i.e. keys, or names) per resource. This means you can have 100 Metafields for Subscription and another 100 for Customer.

        ### Metafields "On-the-Fly"

        It is possible to create Metafields “on the fly” when you create your Metadata – if a non-existant name is passed when creating Metadata, a Metafield for that key will be automatically created. The Metafield API, however, gives you more control over your “keys”.

        ### Metafield Scope Warning

        If configuring metafields in the Admin UI or via the API, be careful sending updates to metafields with the scope attribute – **if a partial update is sent it will overwrite the current configuration**.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                metafields:
                  oneOf:
                    - $ref: ../models/Create-Metafield.yaml
                    - type: array
                      items:
                        $ref: ../models/Create-Metafield.yaml
            examples:
              Single Metafield:
                value:
                  metafields:
                    name: Dropdown field
                    input_type: dropdown
                    enum:
                      - option 1
                      - option 2
              Multiple Metafields:
                value:
                  metafields:
                    - name: Color
                    - name: Brand
      parameters: []
    get:
      summary: List Metafields
      tags:
        - Custom Fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  current_page:
                    type: integer
                  total_pages:
                    type: integer
                  per_page:
                    type: integer
                  metafields:
                    type: array
                    items:
                      $ref: ../models/Metafield.yaml
      operationId: get-resource_type-metafields.json
      description: |-
        ## List Metafields

        This endpoint lists metafields associated with a Site. The metafield description and usage is contained in the response.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: filter by the name of the metafield
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
    put:
      summary: Update Metafield
      tags:
        - Custom Fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Metafield.yaml
      operationId: put-resource_type-metafields.json
      description: |-
        ## Update Metafield

        Use the following method to update metafields for your Site. Metafields can be populated with metadata after the fact.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                metafields:
                  oneOf:
                    - $ref: ../models/Update-Metafield.yaml
                    - type: array
                      items:
                        $ref: ../models/Update-Metafield.yaml
        description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: name
          required: true
        - schema:
            type: string
          in: query
          name: current_name
          description: This only applies when you are updating an existing record and you wish to rename the field. Note you must supply name and current_name to rename the field
    delete:
      tags:
        - Custom Fields
      summary: Delete Metafield
      operationId: delete-resource_type-metafields.json
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      description: |-
        ## Delete Metafield

        Use the following method to delete a metafield. This will remove the metafield from the Site. 

        Additionally, this will remove the metafield and associated metadata with all Subscriptions on the Site.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: The name of the metafield to be deleted
  '/{resource_type}/{resource_id}/metadata.json':
    parameters:
      - schema:
          type: string
          enum:
            - customers
            - subscriptions
        name: resource_type
        in: path
        required: true
      - schema:
          type: string
        name: resource_id
        in: path
        required: true
        description: The Chargify id of the customer or the subscription for which the metadata applies
    post:
      summary: Create Metadata
      tags:
        - Custom Fields
      operationId: post-resource_type-resource_id-metadata.json
      description: |-
        ## Custom Fields: Metadata Intro

        **Chargify refers to Custom Fields in the API documentation as metafields and metadata.** Within the Chargify UI, metadata and metafields are grouped together under the umbrella of "Custom Fields." All of our UI-based documentation that references custom fields will not cite the terminology metafields or metadata. 

        + **Metafield is the custom field**
        + **Metadata is the data populating the custom field.**

        Chargify Metafields are used to add meaningful attributes to subscription and customer resources. Full documentation on how to create Custom Fields in the Chargify UI can be located [here](https://help.chargify.com/custom-fields/custom-fields-intro.html). For additional documentation on how to record data within custom fields, please see our subscription-based documentation [here.](https://help.chargify.com/subscriptions/subscription-summary.html#custom-fields)

        Metadata is associated to a customer or subscription, and corresponds to a Metafield. When creating a new metadata object for a given record, **if the metafield is not present it will be created**.

        ## Metadata limits

        Metadata values are limited to 2kB in size. Additonally, there are limits on the number of unique metafields available per resource.

        ## Create Metadata

        This method will create a metafield for the site on the fly if it does not already exist, and populate the metadata value.

        ### Subscription or Customer Resource

        Please pay special attention to the resource you use when creating metadata.
      parameters:
        - schema:
            type: string
          in: query
          name: value
          description: Can be a single item or a list of metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      value:
                        type: string
            examples:
              Example:
                value:
                  metadata:
                    - name: Color
                      value: Blue
                    - name: Something
                      value: Useful
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Metadata.yaml
    get:
      summary: List Metadata
      tags:
        - Custom Fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Paginated-Metadata.yaml
      operationId: get-resource_type-resource_id-metadata.json
      description: |-
        ## Read Metadata for a Specific Resource

        This request will list all of the metadata belonging to a particular resource (ie. subscription, customer) that is specified.

        ## Metadata Data

        This endpoint will also display the current stats of your metadata to use as a tool for pagination.
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
    put:
      summary: Update Metadata
      tags:
        - Custom Fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Metadata.yaml
      operationId: put-resource_type-resource_id-metadata.json
      parameters:
        - schema:
            type: string
          in: query
          name: value
          description: Can be a single item or a list of metadata
      description: |-
        ## Update Metadata

        This method allows you to update the existing metadata associated with a subscription or customer.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: object
                  properties:
                    current_name:
                      type: string
                    name:
                      type: string
                    value:
                      type: string
    delete:
      summary: Delete Metadata
      tags:
        - Custom Fields
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: delete-resource_type-resource_id-metadata.json
      description: |-
        ## Delete Metadata

        This method removes the metadata from the subscriber/customer cited.

        ## Query String Usage

        For instance if you wanted to delete the metadata for customer 99 named weight you would request:

        ```
        https://acme.chargify.com/customers/99/metadata.json?name=weight
        ```

        If you want to delete multiple metadata fields for a customer 99 named: `weight` and `age` you wrould request:
        ```
        https://acme.chargify.com/customers/99/metadata.json?names[]=weight&names[]=age
        ```

        ## Successful Response

        For a success, there will be a code `200` and the plain text response `true`.

        ## Unsuccessful Response

        When a failed response is encountered, you will receive a `404` response and the plain text response of `true`.
      parameters:
        - schema:
            type: string
          in: query
          name: name
        - schema:
            type: array
          in: query
          name: 'names[]'
  '/{resource_type}/metadata.json':
    parameters:
      - schema:
          type: string
        name: resource_type
        in: path
        required: true
    get:
      summary: List Metadata for Resource Type
      tags:
        - Custom Fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Paginated-Metadata.yaml
      operationId: get-resource_type-metadata.json
      description: |-
        ## Read Metadata by Resource

        This method will provide you information on usage of metadata across your selected resource (ie. subscriptions, customers)

        ## Metadata Data

        This endpoint will also display the current stats of your metadata to use as a tool for pagination.

        ### Metadata for multiple records

        `https://acme.chargify.com/subscriptions/metadata.json?resource_ids[]=1&resource_ids[]=2`

        ## Read Metadata for a Site 

        This endpoint will list the number of pages of metadata information that are contained within a site.
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
        - schema:
            type: string
            enum:
              - created_at
              - updated_at
          in: query
          name: date_field
          description: The type of filter you would like to apply to your search.
        - schema:
            type: string
          in: query
          name: start_date
          description: 'The start date (format YYYY-MM-DD) with which to filter the date_field. Returns metadata with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: end_date
          description: 'The end date (format YYYY-MM-DD) with which to to filter the date_field. Returns metadata with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: start_datetime
          description: 'The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns metadata with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date.'
        - schema:
            type: string
          in: query
          name: end_datetime
          description: 'The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns metadata with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date.'
        - schema:
            type: boolean
          in: query
          name: with_deleted
          description: 'Allow to fetch deleted metadata. '
        - schema:
            type: array
            maxItems: 50
          in: query
          name: 'resource_ids[]'
          description: Allow to fetch metadata for multiple records based on provided ids.
  '/product_families/{product_family_id}/coupons.json':
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the coupon belongs
    post:
      summary: Create Coupon
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupon:
                    $ref: ../models/Coupon.yaml
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - Expiration Date cannot be in the past
      operationId: post-product_families-product_family_id-coupons.json
      description: |-
        ## Coupons Documentation

        Coupons can be administered in the Chargify application or created via API. Please view our section on [creating coupons](https://help.chargify.com/products/product-coupons.html) for more information. 

        Additionally, for documentation on how to apply a coupon to a subscription within the Chargify UI, please see our documentation [here](https://help.chargify.com/subscriptions/subscription-summary.html#coupon).

        ## Create Coupon

        This request will create a coupon, based on the provided information.

        When creating a coupon, you must specify a product family using the `product_family_id`. If no `product_family_id` is passed, the first product family available is used. You will also need to formulate your URL to cite the Product Family ID in your request.

        You can restrict a coupon to only apply to specific products / components by optionally passing in hashes of `restricted_products` and/or `restricted_components` in the format:
        `{ "<product/component_id>": boolean_value }`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Create-or-Update-Coupon.yaml
            examples:
              Percentage Coupon Example:
                value:
                  coupon:
                    name: 15% off
                    code: 15OFF
                    description: 15% off for life
                    percentage: '15'
                    allow_negative_balance: 'false'
                    recurring: 'false'
                    end_date: '2012-08-29T12:00:00-04:00'
                    product_family_id: '2'
                    stackable: 'true'
                    compounding_strategy: compound
                  restricted_products:
                    '1': true
                  restricted_components:
                    '1': true
                    '2': false
              Flat Amount Coupon Example:
                value:
                  coupon:
                    name: $10 off
                    code: 10OFF
                    description: $10 off for life
                    amount_in_cents: 1000
                    allow_negative_balance: 'false'
                    recurring: 'false'
                    end_date: '2012-08-29T12:00:00-04:00'
                    product_family_id: '2'
                    stackable: 'true'
                    compounding_strategy: compound
                  restricted_products:
                    '1': true
                  restricted_components:
                    '1': true
                    '2': false
        description: ''
    get:
      summary: List Coupons for Product Family
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Coupon.yaml
              examples:
                Example:
                  value:
                    - coupon:
                        id: 999999
                        name: 50% coupon
                        code: 50PERCENT
                        description: 50 PERCENT OFF
                        amount_in_cents: null
                        product_family_id: 527890
                        created_at: '2016-10-21T17:02:08-04:00'
                        updated_at: '2016-10-21T17:06:11-04:00'
                        start_date: '2016-10-21T17:02:08-04:00'
                        end_date: null
                        percentage: 50
                        recurring: true
                        duration_period_count: null
                        duration_interval: 1
                        duration_interval_unit: day
                        allow_negative_balance: true
                        archived_at: null
                        conversion_limit: 100
                        stackable: false
                        compounding_strategy: compound
                        coupon_restrictions: []
                    - coupon:
                        id: 123456
                        name: 100% coupon
                        code: 100PERCENT
                        description: 100 PERCENT OFF
                        amount_in_cents: null
                        product_family_id: 527890
                        created_at: '2016-10-21T17:02:08-04:00'
                        updated_at: '2016-10-21T17:06:11-04:00'
                        start_date: '2016-10-21T17:02:08-04:00'
                        end_date: null
                        percentage: 50
                        recurring: true
                        duration_period_count: null
                        duration_interval: 1
                        duration_interval_unit: day
                        allow_negative_balance: true
                        archived_at: null
                        conversion_limit: 100
                        stackable: false
                        compounding_strategy: compound
                        coupon_restrictions: []
                    - coupon:
                        id: 888888
                        name: 25% coupon
                        code: 25PERCENT
                        description: 25 PERCENT OFF
                        amount_in_cents: null
                        product_family_id: 527890
                        created_at: '2016-10-21T17:02:08-04:00'
                        updated_at: '2016-10-21T17:06:11-04:00'
                        start_date: '2016-10-21T17:02:08-04:00'
                        end_date: null
                        percentage: 25
                        recurring: true
                        duration_period_count: null
                        duration_interval: 1
                        duration_interval_unit: day
                        allow_negative_balance: true
                        archived_at: null
                        conversion_limit: 100
                        stackable: false
                        compounding_strategy: compound
                        coupon_restrictions:
                          - id: 37
                            item_type: Component
                            item_id: 519
                            name: test
                            handle: null
      operationId: get-product_families-product_family_id-coupons.json
      description: |-
        ## List Coupons for Product Family

        List coupons for a specific Product Family in a Site.

        When fetching coupons, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

        If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 30
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 30. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
  /coupons/find.json:
    get:
      summary: Find Coupon
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupon:
                    $ref: ../models/Coupon.yaml
      operationId: get-coupons-find.json
      description: |-
        ## Find Coupon

        You can search for a coupon via the API with the find method. By passing a code parameter, the find will attempt to locate a coupon that matches that code. If no coupon is found, a 404 is returned.

        If you have more than one product family and if the coupon you are trying to find does not belong to the default product family in your site, then you will need to specify (either in the url or as a query string param) the product family id.
      parameters:
        - schema:
            type: integer
          in: query
          name: product_family_id
          description: The Chargify id of the product family to which the coupon belongs
        - schema:
            type: string
          in: query
          name: code
  '/product_families/{product_family_id}/coupons/{coupon_id}.json':
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the coupon belongs
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon
    get:
      summary: Read Coupon
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupon:
                    $ref: ../models/Coupon.yaml
              examples:
                Example:
                  value:
                    coupon:
                      id: 67
                      name: Foo Bar
                      code: YEPPER99934
                      description: my cool coupon
                      amount_in_cents: null
                      product_family_id: 4
                      product_family_name: Billing Plans
                      created_at: '2017-11-08T10:01:15-05:00'
                      updated_at: '2017-11-08T10:01:15-05:00'
                      start_date: '2017-11-08T10:01:15-05:00'
                      end_date: null
                      percentage: 33.3333
                      duration_period_count: null
                      duration_interval: null
                      duration_interval_unit: null
                      allow_negative_balance: false
                      archived_at: null
                      conversion_limit: null
                      stackable: true
                      compounding_strategy: compound
                      coupon_restrictions: []
      operationId: get-product_families-product_family_id-coupons-coupon_id-.json
      description: |-
        ## Read a Coupon

        You can retrieve the Coupon via the API with the Show method. You must identify the Coupon in this call by the ID parameter that Chargify assigns.
        If instead you would like to find a Coupon using a Coupon code, see the Coupon Find method.

        When fetching a coupon, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

        If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters: []
    put:
      summary: Update Coupon
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupon:
                    $ref: ../models/Coupon.yaml
              examples:
                Example:
                  value:
                    coupon:
                      id: 67
                      name: Foo Bar
                      code: YEPPER99934
                      description: my cool coupon
                      amount_in_cents: 10000
                      product_family_id: 4
                      created_at: '2017-11-08T10:01:15-05:00'
                      updated_at: '2017-11-08T10:01:15-05:00'
                      start_date: '2017-11-08T10:01:15-05:00'
                      end_date: null
                      percentage: null
                      recurring: false
                      duration_period_count: null
                      duration_interval: null
                      duration_interval_unit: null
                      allow_negative_balance: false
                      archived_at: null
                      conversion_limit: null
                      stackable: true
                      compounding_strategy: compound
                      coupon_restrictions: []
      operationId: put-product_families-product_family_id-coupons-coupon_id-.json
      description: |-
        ## Update Coupon

        You can update a Coupon via the API with a PUT request to the resource endpoint.

        You can restrict a coupon to only apply to specific products / components by optionally passing in hashes of `restricted_products` and/or `restricted_components` in the format:
        `{ "<product/component_id>": boolean_value }`
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Create-or-Update-Coupon.yaml
            examples:
              Example:
                value:
                  coupon:
                    name: 15% off
                    code: 15OFF
                    description: 15% off for life
                    percentage: '15'
                    allow_negative_balance: 'false'
                    recurring: 'false'
                    end_date: '2012-08-29T12:00:00-04:00'
                    product_family_id: '2'
                    stackable: 'true'
                    compounding_strategy: compound
                  restricted_products:
                    '1': true
                  restricted_components:
                    '1': true
                    '2': false
        description: ''
    delete:
      summary: Archive Coupon
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupon:
                    $ref: ../models/Coupon.yaml
              examples:
                Example:
                  value:
                    coupon:
                      id: 67
                      name: Foo Bar
                      code: YEPPER99934
                      description: my cool coupon
                      amount_in_cents: 10000
                      product_family_id: 4
                      created_at: '2017-11-08T10:01:15-05:00'
                      updated_at: '2017-11-08T10:01:15-05:00'
                      start_date: '2017-11-08T10:01:15-05:00'
                      end_date: null
                      percentage: null
                      recurring: false
                      duration_period_count: null
                      duration_interval: null
                      duration_interval_unit: null
                      allow_negative_balance: false
                      archived_at: '2016-12-02T13:09:33-05:00'
                      conversion_limit: null
                      stackable: true
                      compounding_strategy: compound
                      coupon_restrictions: []
      operationId: delete-product_families-product_family_id-coupons-coupon_id-.json
      description: |-
        ## Archive a Coupon

        You can archive a Coupon via the API with the archive method.
        Archiving makes that Coupon unavailable for future use, but allows it to remain attached and functional on existing Subscriptions that are using it.
        The `archived_at` date and time will be assigned.
  /coupons.json:
    get:
      summary: List Coupons for Default Product Family
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Coupon.yaml
      operationId: get-coupons.json
      description: |-
        ## List Coupons for Default Product Family

        You can retrieve a list of coupons that belong to the default product family for a site via this method.

        The default product family is the one that was created first for the site, (with the lowest ID number) that has not been archived.

        When fetching coupons, if you have defined multiple currencies at the site level, you can optionally pass the `?currency_prices=true` query param to include an array of currency price data in the response.

        If the coupon is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters:
        - schema:
            type: integer
          in: query
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
          name: page
        - schema:
            type: integer
            default: 30
            maximum: 200
          in: query
          description: This parameter indicates how many records to fetch in each request. Default value is 30. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
          name: per_page
        - schema:
            type: string
            enum:
              - created_at
              - updated_at
          in: query
          description: The type of filter you would like to apply to your search.
          name: date_field
        - schema:
            type: string
          in: query
          name: start_date
          description: 'The start date (format YYYY-MM-DD) with which to filter the date_field. Returns coupons with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          description: 'The end date (format YYYY-MM-DD) with which to to filter the date_field. Returns coupons with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified'
          name: end_date
        - schema:
            type: string
          in: query
          description: 'The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns coupons with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date.'
          name: start_datetime
        - schema:
            type: string
          in: query
          description: 'The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns coupons with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date.'
          name: end_datetime
  '/product_families/{product_family_id}/coupons/{coupon_id}/usage.json':
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the coupon belongs
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon
    get:
      summary: List Coupon Usages
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The Chargify id of the product
                    name:
                      type: string
                      description: Name of the product
                    signups:
                      type: integer
                      description: Number of times the coupon has been applied
                    savings:
                      type: integer
                      description: Dollar amount of customer savings as a result of the coupon.
                      nullable: true
                    savings_in_cents:
                      type: integer
                      description: Dollar amount of customer savings as a result of the coupon.
                      nullable: true
                    revenue:
                      type: integer
                      description: Total revenue of the all subscriptions that have received a discount from this coupon.
                      nullable: true
                    revenue_in_cents:
                      type: integer
                      description: Total revenue of the all subscriptions that have received a discount from this coupon.
              examples:
                Example:
                  value:
                    - name: No cost product
                      id: 3903594
                      signups: 0
                      savings: 0
                      savings_in_cents: 0
                      revenue: 0
                      revenue_in_cents: 0
                    - name: Product that expires
                      id: 3853680
                      signups: 0
                      savings: 0
                      savings_in_cents: 0
                      revenue: 0
                      revenue_in_cents: 0
                    - name: Trial Product
                      id: 3861800
                      signups: 1
                      savings: 30
                      savings_in_cents: 3000
                      revenue: 20
                      revenue_in_cents: 2000
      operationId: get-product_families-product_family_id-coupons-coupon_id-usage.json
      description: |-
        ## Read Coupon Usage for a Site

        This request will provide details about the coupon usage as an array of data hashes, one per product.
  /coupons/validate.json:
    get:
      summary: Validate Coupon
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupon:
                    $ref: ../models/Coupon.yaml
              examples:
                Example:
                  value:
                    coupon:
                      id: 66
                      name: Foo Bar
                      code: YEPPER9993
                      description: my cool coupon
                      amount_in_cents: 10000
                      product_family_id: 4
                      created_at: '2017-11-07T14:51:52-05:00'
                      updated_at: '2017-11-07T15:14:24-05:00'
                      start_date: '2017-11-07T14:51:52-05:00'
                      end_date: null
                      percentage: null
                      recurring: false
                      duration_period_count: null
                      duration_interval: null
                      duration_interval_unit: null
                      allow_negative_balance: false
                      archived_at: null
                      conversion_limit: null
                      stackable: true
                      compounding_strategy: full-price
                      coupon_restrictions: []
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
              examples:
                Example:
                  value:
                    errors: Coupon code could not be found.
      operationId: get-coupons-validate.json
      description: |-
        ## Validate Coupon

        You can verify if a specific coupon code is valid using the `validate` method. This method is useful for validating coupon codes that are entered by a customer. If the coupon is found and is valid, the coupon will be returned with a 200 status code.

        If the coupon is invalid, the status code will be 404 and the response will say why it is invalid. If the coupon is valid, the status code will be 200 and the coupon will be returned. The following reasons for invalidity are supported:

        + Coupon not found
        + Coupon is invalid
        + Coupon expired

        If you have more than one product family and if the coupon you are validating does not belong to the first product family in your site, then you will need to specify the product family, either in the url or as a query string param. This can be done by supplying the id or the handle in the `handle:my-family` format.

        Eg.

        ```
        https://<subdomain>.chargify.com/product_families/handle:<product_family_handle>/coupons/validate.<format>?code=<coupon_code>
        ```

        Or:

        ```
        https://<subdomain>.chargify.com/coupons/validate.<format>?code=<coupon_code>&product_family_id=<id>
        ```
      parameters:
        - schema:
            type: integer
          in: query
          name: product_family_id
          description: The Chargify id of the product family to which the coupon belongs
        - schema:
            type: string
          in: query
          name: code
          required: true
          description: The code of the coupon
  '/coupon/{coupon_id}/currency_prices.json':
    parameters:
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon
    put:
      summary: Create / Update Currency Prices
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    currency:
                      type: string
                    price:
                      type: integer
                    coupon_id:
                      type: integer
      operationId: put-coupon-coupon_id-currency_prices.json
      description: |-
        This endpoint allows you to create and/or update currency prices for an existing coupon. Multiple prices can be created or updated in a single request but each of the currencies must be defined on the site level already and the coupon must be an amount-based coupon, not percentage.

        Currency pricing for coupons must mirror the setup of the primary coupon pricing - if the primary coupon is percentage based, you will not be able to define pricing in non-primary currencies.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency_prices:
                  type: array
                  items:
                    type: object
                    properties:
                      currency:
                        type: string
                        description: ISO code for the site defined currency.
                      price:
                        type: integer
                        description: |
                          Price for the given currency.
                    required:
                      - currency
                      - price
              required:
                - currency_prices
            examples:
              Example:
                value:
                  currency_prices:
                    - currency: EUR
                      price: 10
                    - currency: GBP
                      price: 9
  '/coupons/{coupon_id}/codes.json':
    parameters:
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon
    post:
      summary: Create Coupon Subcodes
      tags:
        - Coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_codes:
                    type: array
                    items:
                      type: string
                  duplicate_codes:
                    type: array
                    items:
                      type: string
                  invalid_codes:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    created_codes:
                      - BALTIMOREFALL
                      - ORLANDOFALL
                      - DETROITFALL
                    duplicate_codes: []
                    invalid_codes: []
      operationId: post-coupons-coupon_id-codes.json
      description: |-
        ## Coupon Subcodes Intro

        Coupon Subcodes allow you to create a set of unique codes that allow you to expand the use of one coupon.

        For example:

        Master Coupon Code: 

        + SPRING2020

        Coupon Subcodes: 

        + SPRING90210
        + DP80302
        + SPRINGBALTIMORE

        Coupon subcodes can be administered in the Admin Interface or via the API.

        When creating a coupon subcode, you must specify a coupon to attach it to using the coupon_id. Valid coupon subcodes are all capital letters, contain only letters and numbers, and do not have any spaces. Lowercase letters will be capitalized before the subcode is created.

        ## Coupon Subcodes Documentation

        Full documentation on how to create coupon subcodes in the Chargify UI can be located [here](https://help.chargify.com/products/product-coupons.html#coupon-codes).

        Additionally, for documentation on how to apply a coupon to a Subscription within the Chargify UI, please see our documentation [here](https://help.chargify.com/subscriptions/subscription-summary.html#coupon).

        ## Create Coupon Subcode

        This request allows you to create specific subcodes underneath an existing coupon code.

        *Note*: If you are using any of the allowed special characters ("%", "@", "+", "-", "_", and "."), you must encode them for use in the URL.

            % to %25
            @ to %40
            + to %2B
            - to %2D
            _ to %5F
            . to %2E
            
        So, if the coupon subcode is `20%OFF`, the URL to delete this coupon subcode would be: `https://<subdomain>.chargify.com/coupons/567/codes/20%25OFF.<format>`
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                codes:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  codes:
                    - BALTIMOREFALL
                    - ORLANDOFALL
                    - DETROITFALL
    get:
      summary: List Coupon Subcodes
      tags:
        - Coupons
      operationId: get-coupons-coupon_id-codes.json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  codes:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    codes:
                      - 3JU6PR
                      - 9RO6MP
                      - 8OG1VV
                      - 5FL7VV
                      - 2SV8XK
                      - 4LW8LH
                      - 3VL4GZ
                      - 9UI9XO
                      - 0LZ0CC
                      - 8XI9JV
                      - 9UV5YE
                      - 3UI4GX
                      - 6SL5ST
                      - 9WC8IJ
                      - 2KA3PZ
                      - 7WR1VR
                      - 3VY7MN
                      - 6KC3KB
                      - 7DF7YT
                      - 9FH1ED
      description: |-
        ## List Coupon Subcodes for a Site

        This request allows you to request the subcodes that are attached to a coupon.
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
    put:
      summary: Update Coupon Subcodes
      tags:
        - Coupons
      operationId: put-coupons-coupon_id-codes.json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_codes:
                    type: array
                    items:
                      type: string
                  duplicate_codes:
                    type: array
                    items:
                      type: string
                  invalid_codes:
                    type: array
                    items:
                      type: string
      description: |-
        ## Update Coupon Subcodes

        You can update the subcodes for the given Coupon via the API with a PUT request to the resource endpoint.
        Send an array of new coupon subcodes.

        **Note**: All current subcodes for that Coupon will be deleted first, and replaced with the list of subcodes sent to this endpoint.
        The response will contain:

        + The created subcodes,

        + Subcodes that were not created because they already exist,

        + Any subcodes not created because they are invalid.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                codes:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  codes:
                    - AAAA
                    - BBBB
                    - CCCC
  '/coupons/{coupon_id}/codes/{subcode}.json':
    parameters:
      - schema:
          type: integer
        name: coupon_id
        in: path
        required: true
        description: The Chargify id of the coupon to which the subcode belongs
      - schema:
          type: string
        name: subcode
        in: path
        required: true
    delete:
      summary: Delete Coupon Subcode
      tags:
        - Coupons
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      operationId: delete-coupons-coupon_id-codes-subcode-.json
      description: |-
        ## Example

        Given a coupon with an ID of 567, and a coupon subcode of 20OFF, the URL to `DELETE` this coupon subcode would be: 

        ```
        http://subdomain.chargify.com/coupons/567/codes/20OFF.<format>
        ```

        Note: If you are using any of the allowed special characters (“%”, “@”, “+”, “-”, “_”, and “.”), you must encode them for use in the URL.

        | Special character | Encoding |
        |-------------------|----------|
        | %                 | %25      |
        | @                 | %40      |
        | +                 | %2B      |
        | –                 | %2D      |
        | _                 | %5F      |
        | .                 | %2E      |

        ## Percent Encoding Example

        Or if the coupon subcode is 20%OFF, the URL to delete this coupon subcode would be: @https://<subdomain>.chargify.com/coupons/567/codes/20%25OFF.<format>
  /events.json:
    get:
      summary: List Events
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Event.yaml
              examples:
                Example:
                  value:
                    - event:
                        id: 343087780
                        key: subscription_state_change
                        message: State changed on Test subscription to Monthly Product from active to past_due
                        subscription_id: 14950962
                        created_at: '2016-10-27T16:42:22-04:00'
                        event_specific_data:
                          previous_subscription_state: active
                          new_subscription_state: past_due
                    - event:
                        id: 343087742
                        key: billing_date_change
                        message: Billing date changed on Test's subscription to Monthly Product from 11/27/2016 to 10/27/2016
                        subscription_id: 14950962
                        created_at: '2016-10-27T16:42:19-04:00'
                        event_specific_data: null
                    - event:
                        id: 343085267
                        key: statement_closed
                        message: Statement 79401838 closed (but not settled) for Test's subscription to ANNUAL product
                        subscription_id: 14950975
                        created_at: '2016-10-27T16:40:40-04:00'
                        event_specific_data: null
      operationId: get-events.json
      description: |-
        ## Events Intro

        Chargify Events include various activity that happens around a Site. This information is **especially** useful to track down issues that arise when subscriptions are not created due to errors.

        Within the Chargify UI, "Events" are referred to as "Site Activity".  Full documentation on how to record view Events / Site Activty in the Chargify UI can be located [here](https://help.chargify.com/sites/site-activity.html).

        ## List Events for a Site

        This method will retrieve a list of events for a site. Use query string filters to narrow down results. You may use the `key` filter as part of your query string to narrow down results.

        ### Legacy Filters

        The following keys are no longer supported.

        + `payment_failure_recreated`
        + `payment_success_recreated`
        + `renewal_failure_recreated`
        + `renewal_success_recreated`
        + `zferral_revenue_post_failure` - [Specific to the Zferral integration](https://help.chargify.com/integrations/zferral.html)
        + `zferral_revenue_post_success` - [Specific to the Zferral integration](https://help.chargify.com/integrations/zferral.html)

        ## Event Specific Data

        Event Specific Data

        Each event type has its own `event_specific_data` specified.

        Here’s an example event for the `subscription_product_change` event:

        ```
        {
            "event": {
                "id": 351,
                "key": "subscription_product_change",
                "message": "Product changed on Marky Mark's subscription from 'Basic' to 'Pro'",
                "subscription_id": 205,
                "event_specific_data": {
                    "new_product_id": 3,
                    "previous_product_id": 2
                },
                "created_at": "2012-01-30T10:43:31-05:00"
            }
        }
        ```

        Here’s an example event for the `subscription_state_change` event:

        ```
         {
             "event": {
                 "id": 353,
                 "key": "subscription_state_change",
                 "message": "State changed on Marky Mark's subscription to Pro from trialing to active",
                 "subscription_id": 205,
                 "event_specific_data": {
                     "new_subscription_state": "active",
                     "previous_subscription_state": "trialing"
                 },
                 "created_at": "2012-01-30T10:43:33-05:00"
             }
         }
        ```
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
        - schema:
            type: integer
          in: query
          name: since_id
        - schema:
            type: integer
          in: query
          name: max_id
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: direction
        - schema:
            type: string
            enum:
              - account_transaction_changed
              - billing_date_change
              - component_allocation_change
              - customer_update
              - customer_create
              - dunning_step_reached
              - expiration_date_change
              - expiring_card
              - metered_usage
              - payment_success
              - payment_success_recreated
              - payment_failure
              - payment_failure_recreated
              - refund_failure
              - refund_success
              - renewal_success
              - renewal_success_recreated
              - renewal_failure
              - signup_success
              - signup_failure
              - statement_closed
              - statement_settled
              - subscription_bank_account_update
              - subscription_deletion
              - subscription_paypal_account_update
              - subscription_product_change
              - subscription_state_change
              - trial_end_notice
              - upgrade_downgrade_success
              - upgrade_downgrade_failure
              - upcoming_renewal_notice
          in: query
          name: filter
          description: 'You can pass multiple event keys after comma. Example: /events.json?filter=signup_success,payment_success'
        - schema:
            type: string
            enum:
              - created_at
          in: query
          name: date_field
          description: The type of filter you would like to apply to your search.
        - schema:
            type: string
          in: query
          name: start_date
          description: 'The start date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: end_date
          description: 'The end date (format YYYY-MM-DD) with which to to filter the date_field. Returns components with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: start_datetime
          description: 'The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date.'
        - schema:
            type: string
          in: query
          name: end_datetime
          description: 'The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date.'
  '/subscriptions/{subscription_id}/events.json':
    parameters:
      - schema:
          type: integer
        name: subscription_id
        in: path
        required: true
        description: The Chargify id of the subscription
    get:
      summary: List Events for Subscription
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Event.yaml
              examples:
                Example:
                  value:
                    - event:
                        id: 344799837
                        key: statement_settled
                        message: Statement 79702531 settled successfully for Amelia Example's subscription to Basic Plan
                        subscription_id: 14900541
                        created_at: '2016-11-01T12:41:29-04:00'
                        event_specific_data: null
                    - event:
                        id: 344799815
                        key: renewal_success
                        message: Successful renewal for Amelia Example's subscription to Basic Plan
                        subscription_id: 14900541
                        created_at: '2016-11-01T12:41:28-04:00'
                        event_specific_data:
                          product_id: 3792003
                          account_transaction_id: null
                    - event:
                        id: 344799705
                        key: billing_date_change
                        message: Billing date changed on Amelia Example's subscription to Basic Plan from 11/26/2016 to 11/01/2016
                        subscription_id: 14900541
                        created_at: '2016-11-01T12:41:25-04:00'
                        event_specific_data: null
      operationId: get-subscriptions-subscription_id-events.json
      description: |-
        ## List Events for Subscription

        The following request will return a list of events for a subscription.

        Each event type has its own `event_specific_data` specified.
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
        - schema:
            type: integer
          in: query
          name: since_id
        - schema:
            type: integer
          in: query
          name: max_id
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: direction
        - schema:
            type: string
            enum:
              - account_transaction_changed
              - billing_date_change
              - component_allocation_change
              - customer_update
              - customer_create
              - dunning_step_reached
              - expiration_date_change
              - expiring_card
              - metered_usage
              - payment_success
              - payment_success_recreated
              - payment_failure
              - payment_failure_recreated
              - refund_failure
              - refund_success
              - renewal_success
              - renewal_success_recreated
              - renewal_failure
              - signup_success
              - signup_failure
              - statement_closed
              - statement_settled
              - subscription_bank_account_update
              - subscription_deletion
              - subscription_paypal_account_update
              - subscription_product_change
              - subscription_state_change
              - trial_end_notice
              - upgrade_downgrade_success
              - upgrade_downgrade_failure
              - upcoming_renewal_notice
          in: query
          name: filter
          description: 'You can pass multiple event keys after comma. Example: /events.json?filter=signup_success,payment_success'
  /events/count.json:
    get:
      summary: Total Event Count
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
              examples:
                Example:
                  value:
                    count: 144
      operationId: get-events-count.json
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
        - schema:
            type: integer
          in: query
          name: since_id
        - schema:
            type: integer
          in: query
          name: max_id
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          in: query
          name: direction
        - schema:
            type: string
            enum:
              - account_transaction_changed
              - billing_date_change
              - component_allocation_change
              - customer_update
              - customer_create
              - dunning_step_reached
              - expiration_date_change
              - expiring_card
              - metered_usage
              - payment_success
              - payment_success_recreated
              - payment_failure
              - payment_failure_recreated
              - refund_failure
              - refund_success
              - renewal_success
              - renewal_success_recreated
              - renewal_failure
              - signup_success
              - signup_failure
              - statement_closed
              - statement_settled
              - subscription_bank_account_update
              - subscription_deletion
              - subscription_paypal_account_update
              - subscription_product_change
              - subscription_state_change
              - trial_end_notice
              - upgrade_downgrade_success
              - upgrade_downgrade_failure
              - upcoming_renewal_notice
          in: query
          name: filter
          description: 'You can pass multiple event keys after comma. Example: /events.json?filter=signup_success,payment_success'
      description: |-
        ## Read the Total Event Count for a Site

        Obtain a count of the entire events for a given site by using this method.
  /mrr.json:
    get:
      summary: Read MRR
      tags:
        - Insights
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mrr:
                    type: object
                    properties:
                      amount_in_cents:
                        type: integer
                      amount_formatted:
                        type: string
                      currency:
                        type: string
                      currency_symbol:
                        type: string
                      breakouts:
                        type: object
                        properties:
                          plan_amount_in_cents:
                            type: integer
                          plan_amount_formatted:
                            type: string
                          usage_amount_in_cents:
                            type: integer
                          usage_amount_formatted:
                            type: string
                          '':
                            type: string
                      at_time:
                        type: string
                        description: ISO8601 timestamp
                      '':
                        type: string
              examples:
                Example:
                  value:
                    mrr:
                      amount_in_cents: 9915593
                      amount_formatted: '$99,155.93'
                      currency: USD
                      currency_symbol: $
                      at_time: '2021-02-03T14:23:17-05:00'
                      breakouts:
                        plan_amount_in_cents: 9913593
                        plan_amount_formatted: '$99,135.93'
                        usage_amount_in_cents: 2000
                        usage_amount_formatted: $20.00
      operationId: get-mrr.json
      description: 'This endpoint returns your site''s current MRR, including plan and usage breakouts.'
      parameters:
        - schema:
            type: string
            format: date-time
          in: query
          name: at_time
          description: submit a timestamp in ISO8601 format to request MRR for a historic time
        - schema:
            type: integer
          in: query
          name: subscription_id
          description: submit the id of a subscription in order to limit results
  '/product_families/{product_family_id}/{plural_kind}.json':
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the component belongs
      - schema:
          type: string
          enum:
            - metered_components
            - quantity_based_components
            - on_off_components
            - prepaid_usage_components
        name: plural_kind
        in: path
        required: true
        description: The component kind
    post:
      summary: Create Component
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  component:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique ID assigned to the component by Chargify. This ID can be used to fetch the component from the API.
                      name:
                        type: string
                        description: 'The name of the Component, suitable for display on statements. i.e. Text Messages.'
                      pricing_scheme:
                        type: string
                        description: 'The handle for the pricing scheme. Available options: per_unit, volume, tiered, stairstep. See [Price Bracket Rules](https://help.chargify.com/products/product-components.html#price-bracket-rules) for an overview of pricing schemes.'
                      unit_name:
                        type: string
                        description: The name of the unit that the component’s usage is measured in. i.e. message
                      unit_price:
                        type: string
                        description: 'The amount the customer will be charged per unit. This field is only populated for ‘per_unit’ pricing schemes, otherwise it may be null.'
                        nullable: true
                      product_family_id:
                        type: integer
                        description: The id of the Product Family to which the Component belongs
                      price_per_unit_in_cents:
                        type: integer
                        description: deprecated - use unit_price instead
                        nullable: true
                      kind:
                        type: string
                        description: A handle for the component type
                        enum:
                          - metered_component
                          - quantity_based_component
                          - on_off_component
                          - prepaid_usage_component
                      archived:
                        type: boolean
                        description: Boolean flag describing whether a component is archived or not.
                      taxable:
                        type: boolean
                        description: Boolean flag describing whether a component is taxable or not.
                      description:
                        type: string
                        description: The description of the component.
                        nullable: true
                      default_price_point_id:
                        type: integer
                      price_point_count:
                        type: integer
                        description: Count for the number of of amount of price points associated with the the component
                      price_points_url:
                        type: string
                        description: URL that points to the location to read the existing price points via GET request
                      tax_code:
                        type: string
                        description: A string representing the tax code related to the component type. This is especially important when using the Avalara service to tax based on locale. This attribute has a max length of 10 characters.
                      recurring:
                        type: boolean
                      upgrade_charge:
                        type: string
                        nullable: true
                      downgrade_credit:
                        type: string
                        nullable: true
                      created_at:
                        type: string
                      prices:
                        type: array
                        nullable: true
                        description: 'An array of price brackets. If the component uses the ‘per_unit’ pricing scheme, this array will be empty.'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            component_id:
                              type: integer
                            starting_quantity:
                              type: integer
                            ending_quantity:
                              type: integer
                              nullable: true
                            unit_price:
                              type: string
                            price_point_id:
                              type: integer
                            formatted_unit_price:
                              type: string
                      default_price_point_name:
                        type: string
                      product_family_name:
                        type: string
                      hide_date_range_on_invoice:
                        type: boolean
                        description: (Only available on Relationship Invoicing sites) Boolean flag describing if the service date range should show for the component on generated invoices.
              examples:
                Example:
                  value:
                    component:
                      id: 292609
                      name: Text messages
                      pricing_scheme: stairstep
                      unit_name: text message
                      unit_price: null
                      product_family_id: 528484
                      price_per_unit_in_cents: null
                      kind: metered_component
                      archived: false
                      taxable: false
                      description: null
                      created_at: '2019-08-02T05:54:53-04:00'
                      prices:
                        - id: 47
                          component_id: 292609
                          starting_quantity: 1
                          ending_quantity: null
                          unit_price: '1.0'
                          price_point_id: 173
                          formatted_unit_price: $1.00
                      default_price_point_name: Original
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - 'Name: cannot be blank.'
                      - 'Unit name: cannot be blank.'
                      - 'Pricing scheme: cannot be blank.'
                      - At least 1 price bracket must be defined
      operationId: post-product_families-product_family_id-plural_kind-.json
      parameters: []
      description: |-
        ## Create Component

        This request will create a component definition under the specified product family. These component definitions determine what components are named, how they are measured, and how much they cost.

        Components can then be added and “allocated” for each subscription to a product in the product family. These component line-items affect how much a subscription will be charged, depending on the current allocations (i.e. 4 IP Addresses, or SSL “enabled”)

        This documentation covers both component definitions and component line-items. Please understand the difference.

        Please note that you may not edit components via API. To do so, please log into the application.

        ### Component Documentation

        For more information on components, please see our documentation [here](https://help.chargify.com/products/product-components.html).

        For information on how to record component usage against a subscription, please see the following resources:

        + [Proration and Component Allocations](https://help.chargify.com/subscriptions/setting-component-allocations.html)
        + [Recording component usage against a subscription](https://help.chargify.com/subscriptions/subscription-summary.html#components-line-items)
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - properties:
                    metered_component:
                      type: object
                      description: ''
                      required:
                        - name
                        - unit_name
                        - pricing_scheme
                      properties:
                        name:
                          type: string
                          description: 'A name for this component that is suitable for showing customers and displaying on billing statements, ie. "Minutes".'
                        unit_name:
                          type: string
                          description: 'The name of the unit of measurement for the component. It should be singular since it will be automatically pluralized when necessary. i.e. “message”, which may then be shown as “5 messages” on a subscription’s component line-item'
                        description:
                          type: string
                          description: A description for the component that will be displayed to the user on the hosted signup page.
                        handle:
                          type: string
                          description: 'A unique identifier for your use that can be used to retrieve this component is subsequent requests.  Must start with a letter or number and may only contain lowercase letters, numbers, or the characters ''.'', '':'', ''-'', or ''_''.'
                          pattern: '\A[a-z0-9][a-z0-9\-_:.]*\z'
                        taxable:
                          type: boolean
                          description: Boolean flag describing whether a component is taxable or not.
                        pricing_scheme:
                          type: string
                          description: 'The identifier for the pricing scheme. See [Product Components](https://help.chargify.com/products/product-components.html) for an overview of pricing schemes.'
                          enum:
                            - per_unit
                            - volume
                            - tiered
                            - stairstep
                        prices:
                          type: array
                          description: '(Not required for ‘per_unit’ pricing schemes) One or more price brackets. See [Price Bracket Rules](https://help.chargify.com/products/product-components.html#general-price-bracket-rules) for an overview of how price brackets work for different pricing schemes.'
                          items:
                            type: object
                            properties:
                              starting_quantity:
                                type: integer
                              unit_price:
                                type: integer
                              component:
                                nullable: true
                        upgrade_charge:
                          type: string
                        downgrade_credit:
                          type: string
                        price_points:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              handle:
                                type: string
                              pricing_scheme:
                                type: string
                              prices:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    starting_quantity:
                                      type: string
                                    unit_price:
                                      type: string
                        unit_price:
                          type: number
                          description: 'The amount the customer will be charged per unit when the pricing scheme is “per_unit”. For On/Off Components, this is the amount that the customer will be charged when they turn the component on for the subscription. The price can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or 0.00000065'
                        tax_code:
                          type: string
                          description: A string representing the tax code related to the component type. This is especially important when using the Avalara service to tax based on locale. This attribute has a max length of 10 characters.
                        hide_date_range_on_invoice:
                          type: boolean
                          description: (Only available on Relationship Invoicing sites) Boolean flag describing if the service date range should show for the component on generated invoices.
                        price_in_cents:
                          type: string
                          description: deprecated May 2011 - use unit_price instead
                  required:
                    - metered_component
                - properties:
                    quantity_based_component:
                      type: object
                      properties:
                        name:
                          type: string
                          description: 'A name for this component that is suitable for showing customers and displaying on billing statements, ie. "Minutes".'
                        unit_name:
                          type: string
                          description: 'The name of the unit of measurement for the component. It should be singular since it will be automatically pluralized when necessary. i.e. “message”, which may then be shown as “5 messages” on a subscription’s component line-item'
                        description:
                          type: string
                          description: A description for the component that will be displayed to the user on the hosted signup page.
                        handle:
                          type: string
                          description: 'A unique identifier for your use that can be used to retrieve this component is subsequent requests.  Must start with a letter or number and may only contain lowercase letters, numbers, or the characters ''.'', '':'', ''-'', or ''_''.'
                          pattern: '\A[a-z0-9][a-z0-9\-_:.]*\z'
                        taxable:
                          type: boolean
                          description: Boolean flag describing whether a component is taxable or not.
                        pricing_scheme:
                          type: string
                          description: 'The identifier for the pricing scheme. See [Product Components](https://help.chargify.com/products/product-components.html) for an overview of pricing schemes.'
                          enum:
                            - per_unit
                            - volume
                            - tiered
                            - stairstep
                        prices:
                          type: array
                          description: '(Not required for ‘per_unit’ pricing schemes) One or more price brackets. See [Price Bracket Rules](https://help.chargify.com/products/product-components.html#general-price-bracket-rules) for an overview of how price brackets work for different pricing schemes.'
                          items:
                            type: object
                            properties:
                              starting_quantity:
                                type: integer
                              unit_price:
                                type: integer
                              component:
                                nullable: true
                        upgrade_charge:
                          type: string
                        downgrade_credit:
                          type: string
                        price_points:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              handle:
                                type: string
                              pricing_scheme:
                                type: string
                              prices:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    starting_quantity:
                                      type: string
                                    unit_price:
                                      type: string
                        unit_price:
                          type: number
                          description: 'The amount the customer will be charged per unit when the pricing scheme is “per_unit”. For On/Off Components, this is the amount that the customer will be charged when they turn the component on for the subscription. The price can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or 0.00000065'
                        tax_code:
                          type: string
                          description: A string representing the tax code related to the component type. This is especially important when using the Avalara service to tax based on locale. This attribute has a max length of 10 characters.
                        hide_date_range_on_invoice:
                          type: boolean
                          description: (Only available on Relationship Invoicing sites) Boolean flag describing if the service date range should show for the component on generated invoices.
                        price_in_cents:
                          type: string
                          description: deprecated May 2011 - use unit_price instead
                        recurring:
                          type: boolean
                      required:
                        - name
                        - unit_name
                        - pricing_scheme
                - properties:
                    on_off_component:
                      type: object
                      description: ''
                      required:
                        - name
                        - pricing_scheme
                      properties:
                        name:
                          type: string
                          description: 'A name for this component that is suitable for showing customers and displaying on billing statements, ie. "Minutes".'
                        unit_name:
                          type: string
                          description: 'The name of the unit of measurement for the component. It should be singular since it will be automatically pluralized when necessary. i.e. “message”, which may then be shown as “5 messages” on a subscription’s component line-item'
                        description:
                          type: string
                          description: A description for the component that will be displayed to the user on the hosted signup page.
                        handle:
                          type: string
                          description: 'A unique identifier for your use that can be used to retrieve this component is subsequent requests.  Must start with a letter or number and may only contain lowercase letters, numbers, or the characters ''.'', '':'', ''-'', or ''_''.'
                          pattern: '\A[a-z0-9][a-z0-9\-_:.]*\z'
                        taxable:
                          type: boolean
                          description: Boolean flag describing whether a component is taxable or not.
                        pricing_scheme:
                          type: string
                          description: 'The identifier for the pricing scheme. See [Product Components](https://help.chargify.com/products/product-components.html) for an overview of pricing schemes.'
                          enum:
                            - per_unit
                            - volume
                            - tiered
                            - stairstep
                        prices:
                          type: array
                          description: '(Not required for ‘per_unit’ pricing schemes) One or more price brackets. See [Price Bracket Rules](https://help.chargify.com/products/product-components.html#general-price-bracket-rules) for an overview of how price brackets work for different pricing schemes.'
                          items:
                            type: object
                            properties:
                              starting_quantity:
                                type: integer
                              unit_price:
                                type: integer
                              component:
                                nullable: true
                        upgrade_charge:
                          type: string
                        downgrade_credit:
                          type: string
                        price_points:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              handle:
                                type: string
                              pricing_scheme:
                                type: string
                              prices:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    starting_quantity:
                                      type: string
                                    unit_price:
                                      type: string
                        unit_price:
                          type: number
                          description: 'The amount the customer will be charged per unit when the pricing scheme is “per_unit”. For On/Off Components, this is the amount that the customer will be charged when they turn the component on for the subscription. The price can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or 0.00000065'
                        tax_code:
                          type: string
                          description: A string representing the tax code related to the component type. This is especially important when using the Avalara service to tax based on locale. This attribute has a max length of 10 characters.
                        hide_date_range_on_invoice:
                          type: boolean
                          description: (Only available on Relationship Invoicing sites) Boolean flag describing if the service date range should show for the component on generated invoices.
                        price_in_cents:
                          type: string
                          description: deprecated May 2011 - use unit_price instead
                  required:
                    - on_off_component
                - properties:
                    prepaid_usage_component:
                      type: object
                      properties:
                        name:
                          type: string
                          description: 'A name for this component that is suitable for showing customers and displaying on billing statements, ie. "Minutes".'
                        unit_name:
                          type: string
                          description: 'The name of the unit of measurement for the component. It should be singular since it will be automatically pluralized when necessary. i.e. “message”, which may then be shown as “5 messages” on a subscription’s component line-item'
                        description:
                          type: string
                          description: A description for the component that will be displayed to the user on the hosted signup page.
                        handle:
                          type: string
                          description: 'A unique identifier for your use that can be used to retrieve this component is subsequent requests.  Must start with a letter or number and may only contain lowercase letters, numbers, or the characters ''.'', '':'', ''-'', or ''_''.'
                          pattern: '\A[a-z0-9][a-z0-9\-_:.]*\z'
                        taxable:
                          type: boolean
                          description: Boolean flag describing whether a component is taxable or not.
                        pricing_scheme:
                          type: string
                          description: 'The identifier for the pricing scheme. See [Product Components](https://help.chargify.com/products/product-components.html) for an overview of pricing schemes.'
                          enum:
                            - per_unit
                            - volume
                            - tiered
                            - stairstep
                        prices:
                          type: array
                          description: '(Not required for ‘per_unit’ pricing schemes) One or more price brackets. See [Price Bracket Rules](https://help.chargify.com/products/product-components.html#general-price-bracket-rules) for an overview of how price brackets work for different pricing schemes.'
                          items:
                            type: object
                            properties:
                              starting_quantity:
                                type: integer
                              unit_price:
                                type: integer
                        upgrade_charge:
                          type: string
                        downgrade_credit:
                          type: string
                        price_points:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              handle:
                                type: string
                              pricing_scheme:
                                type: string
                              prices:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    starting_quantity:
                                      type: string
                                    unit_price:
                                      type: string
                              overage_pricing:
                                $ref: ../models/Overage-Pricing.yaml
                        unit_price:
                          type: number
                          description: 'The amount the customer will be charged per unit when the pricing scheme is “per_unit”. For On/Off Components, this is the amount that the customer will be charged when they turn the component on for the subscription. The price can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or 0.00000065'
                        tax_code:
                          type: string
                          description: A string representing the tax code related to the component type. This is especially important when using the Avalara service to tax based on locale. This attribute has a max length of 10 characters.
                        hide_date_range_on_invoice:
                          type: boolean
                          description: (Only available on Relationship Invoicing sites) Boolean flag describing if the service date range should show for the component on generated invoices.
                        price_in_cents:
                          type: string
                          description: deprecated May 2011 - use unit_price instead
                        overage_pricing:
                          $ref: ../models/Overage-Pricing.yaml
                        rollover_prepaid_remainder:
                          type: boolean
                          description: Boolean which controls whether or not remaining units should be rolled over to the next period
                        renew_prepaid_allocation:
                          type: boolean
                          description: Boolean which controls whether or not the allocated quantity should be renewed at the beginning of each period
                        expiration_interval:
                          type: number
                          description: (only for prepaid usage components where rollover_prepaid_remainder is true) The number of `expiration_interval_unit`s after which rollover amounts should expire
                        expiration_interval_unit:
                          type: string
                          description: ''
                          enum:
                            - day
                            - month
                  required:
                    - prepaid_usage_component
              type: object
            examples:
              Metered:
                value:
                  metered_component:
                    name: Text messages
                    unit_name: text message
                    taxable: false
                    pricing_scheme: stairstep
                    prices:
                      - starting_quantity: 1
                        unit_price: 1
                        component: null
              Quantity Based (per unit):
                value:
                  quantity_based_component:
                    name: Quantity Based Component
                    unit_name: Component
                    description: Example of JSON per-unit component example
                    pricing_scheme: per_unit
                    unit_price: '10'
                    taxable: '1'
                    display_on_hosted_page: '1'
                    allow_fractional_quantities: '1'
                    public_signup_page_ids:
                      - '323397'
              Quantity Based (stairstep):
                value:
                  quantity_based_component:
                    name: Quantity Based Component
                    unit_name: Quantity Based Component
                    description: Example of JSON stairstep example
                    pricing_scheme: stairstep
                    taxable: '1'
                    prices_attributes:
                      - starting_quantity: '1'
                        ending_quantity: '100'
                        unit_price: '50'
                      - starting_quantity: '101'
                        ending_quantity: '200'
                        unit_price: '10'
                    display_on_hosted_page: '1'
                    allow_fractional_quantities: '1'
                    public_signup_page_ids:
                      - '323397'
              Quantity Based (volume):
                value:
                  quantity_based_component:
                    name: Quantity Based Component
                    unit_name: Quantity Based Component
                    description: Example of JSON volume component example
                    pricing_scheme: volume
                    taxable: '1'
                    prices_attributes:
                      - starting_quantity: '1'
                        ending_quantity: '10'
                        unit_price: '10'
                      - starting_quantity: '11'
                        ending_quantity: '20'
                        unit_price: '5'
                    display_on_hosted_page: '1'
                    allow_fractional_quantities: '1'
                    public_signup_page_ids:
                      - '323397'
              Quantity Based (tiered):
                value:
                  quantity_based_component:
                    name: Quantity Based Component
                    unit_name: Quantity Based Component
                    description: Example of JSON for tiered quantity based component
                    taxable: '1'
                    pricing_scheme: tiered
                    prices_attributes:
                      - starting_quantity: '1'
                        ending_quantity: '20'
                        unit_price: '50'
                      - starting_quantity: '21'
                        ending_quantity: '40'
                        unit_price: '25'
                    display_on_hosted_page: '1'
                    allow_fractional_quantities: '1'
                    public_signup_page_ids:
                      - '323397'
              On/Off:
                value:
                  on_off_component:
                    name: Annual Support Services
                    description: Prepay for support services
                    taxable: '1'
                    price_attributes:
                      unit_price: '100.00'
                      starting_quantity: '0'
                    display_on_hosted_page: '1'
                    public_signup_page_ids:
                      - '320495'
              Prepaid Usage:
                value:
                  prepaid_usage_component:
                    name: Minutes
                    unit_name: minutes
                    unit_price: 2
                    pricing_scheme: per_unit
                    rollover_prepaid_remainder: true
                    renew_prepaid_allocation: true
                    expiration_interval: 15
                    expiration_interval_unit: day
                    overage_pricing:
                      pricing_scheme: stairstep
                      prices:
                        - starting_quantity: 1
                          ending_quantity: 100
                          unit_price: 3
                          formatted_unit_price: $3.00
                        - starting_quantity: 101
                          unit_price: 5
                          formatted_unit_price: $5.00
              On/Off with Price Points:
                value:
                  on_off_component:
                    name: Annual Support Services
                    description: Prepay for support services
                    taxable: '1'
                    pricing_scheme: per_unit
                    price_attributes:
                      unit_price: '100.00'
                      starting_quantity: '0'
                    display_on_hosted_page: '1'
                    public_signup_page_ids:
                      - '320495'
                    price_points:
                      - name: Wholesale
                        handle: wholesale-handle
                        pricing_scheme: per_unit
                        prices:
                          - starting_quantity: '0'
                            unit_price: '89.00'
              On/Off with Default Proration Schemes:
                value:
                  on_off_component:
                    name: Annual Support Services
                    description: Prepay for support services
                    taxable: '1'
                    price_attributes:
                      unit_price: '100.00'
                      starting_quantity: '0'
                    display_on_hosted_page: '1'
                    public_signup_page_ids:
                      - '320495'
                    upgrade_charge: full
                    downgrade_credit: prorated
        description: ''
  /components/lookup.json:
    get:
      summary: Find Component
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Component.yaml
              examples:
                Example:
                  value:
                    component:
                      id: 399853
                      name: Annual Support Services
                      pricing_scheme: null
                      unit_name: on/off
                      unit_price: '100.0'
                      product_family_id: 997233
                      price_per_unit_in_cents: null
                      kind: on_off_component
                      archived: false
                      taxable: true
                      description: Prepay for support services
                      default_price_point_id: 121003
                      price_point_count: 4
                      price_points_url: 'https://general-goods.chargify.com/components/399853/price_points'
                      tax_code: D0000000
                      recurring: true
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: '2019-08-02T05:54:53-04:00'
                      default_price_point_name: Original
                      product_family_name: Chargify
      operationId: get-components-lookup.json
      parameters:
        - schema:
            type: string
          in: query
          required: true
          name: handle
          description: The handle of the component to find
      description: |-
        ## Find Component by Handle

        This request will return information regarding a component having the handle you provide. You can identify your components with a handle so you don't have to save or reference the IDs we generate.
  '/product_families/{product_family_id}/components/{component_id}.json':
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the component belongs
      - schema:
          type: string
          pattern: '/\A(?:\d+|handle:(?:uuid:|[a-z])(?:\w|-)+)\z/'
        name: component_id
        in: path
        required: true
        description: 'Either the Chargify id of the component or the handle for the component prefixed with `handle:`'
    get:
      summary: Read Component
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Component.yaml
              examples:
                Example:
                  value:
                    component:
                      id: 399853
                      name: Annual Support Services
                      pricing_scheme: null
                      unit_name: on/off
                      unit_price: '100.0'
                      product_family_id: 997233
                      price_per_unit_in_cents: null
                      kind: on_off_component
                      archived: false
                      taxable: true
                      description: Prepay for support services
                      default_price_point_id: 121003
                      price_point_count: 4
                      price_points_url: 'https://general-goods.chargify.com/components/399853/price_points'
                      tax_code: D0000000
                      recurring: true
                      upgrade_charge: null
                      downgrade_credit: null
                      created_at: '2019-08-02T05:54:53-04:00'
                      default_price_point_name: Original
                      product_family_name: Chargify
      operationId: get-product_families-product_family_id-components-component_id-.json
      description: |-
        ## Read Component

        This request will return information regarding a component from a specific product family.

        You may read the component by either the component's id or handle. When using the handle, it must be prefixed with `handle:`.
    delete:
      summary: Archive Component
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Component.yaml
              examples:
                Example:
                  value:
                    component:
                      id: 25407138
                      name: cillum aute
                      pricing_scheme: in incididu
                      unit_name: nulla in
                      unit_price: Excepteur veniam
                      product_family_id: -56705047
                      kind: prepaid_usage_component
                      archived: true
                      taxable: false
                      description: reprehenderit laborum qui fugiat
                      default_price_point_id: -64328176
                      price_point_count: 15252407
                      price_points_url: dolor mollit consequat
                      tax_code: ea nisi
                      recurring: false
                      created_at: dolor qui deserunt tempor
                      default_price_point_name: cupidatat Lorem non aliqua
                      product_family_name: do elit
                      hide_date_range_on_invoice: false
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - Component cannot be archived. Please make sure it hasn't already been archived.
      operationId: delete-product_families-product_family_id-components-component_id-.json
      description: |-
        # Archive Component

        Sending a DELETE request to this endpoint will archive the component. All current subscribers will be unffected; their subscription/purchase will continue to be charged as usual.
  /components.json:
    get:
      summary: List Components
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Component.yaml
              examples:
                Example:
                  value:
                    - component:
                        id: 399850
                        name: $1.00 component
                        pricing_scheme: per_unit
                        unit_name: Component
                        unit_price: '1.0'
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: quantity_based_component
                        archived: false
                        taxable: false
                        description: Component
                        default_price_point_id: 121000
                        prices:
                          - id: 630687
                            component_id: 399850
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: '1.0'
                            price_point_id: 121000
                            formatted_unit_price: $1.00
                        price_point_count: 2
                        price_points_url: 'https://general-goods.chargify.com/components/399850/price_points'
                        tax_code: null
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: '2019-08-01T09:35:38-04:00'
                        default_price_point_name: Original
                        product_family_name: Chargify
                    - component:
                        id: 399853
                        name: Annual Support Services
                        pricing_scheme: null
                        unit_name: on/off
                        unit_price: '100.0'
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: on_off_component
                        archived: false
                        taxable: true
                        description: Prepay for support services
                        default_price_point_id: 121003
                        price_point_count: 4
                        price_points_url: 'https://general-goods.chargify.com/components/399853/price_points'
                        tax_code: D0000000
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: '2019-08-01T09:35:37-04:00'
                        default_price_point_name: Original
                        product_family_name: Chargify
                    - component:
                        id: 386937
                        name: Cancellation fee
                        pricing_scheme: null
                        unit_name: on/off
                        unit_price: '35.0'
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: on_off_component
                        archived: false
                        taxable: false
                        description: ''
                        default_price_point_id: 108307
                        price_point_count: 1
                        price_points_url: 'https://general-goods.chargify.com/components/386937/price_points'
                        tax_code: null
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: '2019-08-01T09:35:38-04:00'
                        default_price_point_name: Original
                        product_family_name: Chargify
      operationId: get-components.json
      parameters:
        - schema:
            type: string
            enum:
              - created_at
              - updated_at
          in: query
          name: date_field
          description: The type of filter you would like to apply to your search.
        - schema:
            type: string
          in: query
          name: start_date
          description: 'The start date (format YYYY-MM-DD) with which to filter the date_field. Returns components with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: end_date
          description: 'The end date (format YYYY-MM-DD) with which to to filter the date_field. Returns components with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: start_datetime
          description: 'The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date.'
        - schema:
            type: string
          in: query
          name: end_datetime
          description: 'The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns components with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date.  optional'
        - schema:
            type: boolean
          in: query
          name: include_archived
          description: Include archived items
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
      description: |-
        ## List Components for a Site

        This request will return a list of components for a site.
  '/components/{component_id}/price_points/{price_point_id}/default.json':
    parameters:
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the price point
    put:
      summary: Promote Price Point to Default
      tags:
        - Components
      responses:
        '201':
          description: Created
      operationId: put-components-component_id-price_points-price_point_id-default.json
      description: |-
        Sets a new default price point for the component. This new default will apply to all new subscriptions going forward - existing subscriptions will remain on their current price point.

        See [Price Points Documentation](https://help.chargify.com/products/product-components.html#price-points) for more information on price points and moving subscriptions between price points.
  '/product_families/{product_family_id}/components.json':
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family
    get:
      summary: List Components for Product Family
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Component.yaml
              examples:
                Example:
                  value:
                    - component:
                        id: 399850
                        name: $1.00 component
                        pricing_scheme: per_unit
                        unit_name: Component
                        unit_price: '1.0'
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: quantity_based_component
                        archived: false
                        taxable: false
                        description: Component
                        default_price_point_id: 121000
                        prices:
                          - id: 630687
                            component_id: 399850
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: '1.0'
                            price_point_id: 121000
                            formatted_unit_price: $1.00
                        price_point_count: 2
                        price_points_url: 'https://general-goods.chargify.com/components/399850/price_points'
                        tax_code: null
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: '2019-08-01T09:35:38-04:00'
                        default_price_point_name: Original
                        product_family_name: Chargify
                    - component:
                        id: 399853
                        name: Annual Support Services
                        pricing_scheme: null
                        unit_name: on/off
                        unit_price: '100.0'
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: on_off_component
                        archived: false
                        taxable: true
                        description: Prepay for support services
                        default_price_point_id: 121003
                        price_point_count: 4
                        price_points_url: 'https://general-goods.chargify.com/components/399853/price_points'
                        tax_code: D0000000
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: '2019-08-01T09:35:37-04:00'
                        default_price_point_name: Original
                        product_family_name: Chargify
                    - component:
                        id: 386937
                        name: Cancellation fee
                        pricing_scheme: null
                        unit_name: on/off
                        unit_price: '35.0'
                        product_family_id: 997233
                        price_per_unit_in_cents: null
                        kind: on_off_component
                        archived: false
                        taxable: false
                        description: ''
                        default_price_point_id: 108307
                        price_point_count: 1
                        price_points_url: 'https://general-goods.chargify.com/components/386937/price_points'
                        tax_code: null
                        recurring: true
                        upgrade_charge: null
                        downgrade_credit: null
                        created_at: '2019-08-01T09:35:38-04:00'
                        default_price_point_name: Original
                        product_family_name: Chargify
      operationId: get-product_families-product_family_id-components.json
      description: |-
        ## List Components for a Product Family

        This request will return a list of components for a particular product family.
      parameters:
        - schema:
            type: boolean
          in: query
          name: include_archived
          description: Include archived items
  '/components/{component_id}/price_points.json':
    parameters:
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component
    post:
      summary: Create Component Price Point
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Component-Price-Point.yaml
              examples: {}
      operationId: post-components-component_id-price_points.json
      description: |-
        ## Create Component Price Point

        This endpoint can be used to create a new price point for an existing component.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - properties:
                    price_point:
                      $ref: ../models/Create-Component-Price-Point.yaml
                - properties:
                    price_point:
                      $ref: ../models/Create-Prepaid-Usage-Component-Price-Point.yaml
              type: object
            examples:
              Example:
                value:
                  price_point:
                    name: Wholesale
                    handle: wholesale-handle
                    pricing_scheme: stairstep
                    prices:
                      - starting_quantity: '1'
                        ending_quantity: '100'
                        unit_price: '5.00'
                      - starting_quantity: '101'
                        ending_quantity: null
                        unit_price: '4.00'
              Prepaid Usage Component:
                value:
                  price_point:
                    name: MSRP
                    handle: msrp
                    pricing_scheme: stairstep
                    renew_prepaid_allocation: false
                    rollover_prepaid_remainder: true
                    expiration_interval: 2
                    expiration_interval_unit: month
                    prices:
                      - starting_quantity: 1
                        ending_quantity: 100
                        unit_price: 5
                      - starting_quantity: 101
                        ending_quantity: null
                        unit_price: 4
                    overage_pricing:
                      pricing_scheme: stairstep
                      prices:
                        - starting_quantity: 1
                          ending_quantity: 100
                          unit_price: 4
    get:
      summary: List Price Points
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_points:
                    type: array
                    items:
                      $ref: ../models/Component-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_points:
                      - id: 80
                        default: false
                        name: Wholesale Two
                        pricing_scheme: per_unit
                        component_id: 74
                        handle: wholesale-two
                        archived_at: null
                        created_at: '2017-07-05T13:55:40-04:00'
                        updated_at: '2017-07-05T13:55:40-04:00'
                        prices:
                          - id: 121
                            component_id: 74
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: '5.0'
                      - id: 81
                        default: false
                        name: MSRP
                        pricing_scheme: per_unit
                        component_id: 74
                        handle: msrp
                        archived_at: null
                        created_at: '2017-07-05T13:55:40-04:00'
                        updated_at: '2017-07-05T13:55:40-04:00'
                        prices:
                          - id: 122
                            component_id: 74
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: '4.0'
      operationId: get-components-component_id-price_points.json
      description: |-
        ## List Price Points

        Use this endpoint to read current price points that are associated with a component.

        You may specify the component by using either the numeric id or the `handle:gold` syntax.

        If the price point is set to `use_site_exchange_rate: true`, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.
      parameters:
        - schema:
            type: boolean
          in: query
          name: currency_prices
          description: Include an array of currency price data
  '/components/{component_id}/price_points/bulk.json':
    parameters:
      - schema:
          type: string
        name: component_id
        in: path
        required: true
    post:
      summary: Bulk Create Component Price Points
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_points:
                    type: array
                    items:
                      $ref: ../models/Component-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_points:
                      - id: 80
                        default: false
                        name: Wholesale Two
                        pricing_scheme: per_unit
                        component_id: 74
                        handle: wholesale-two
                        archived_at: null
                        created_at: '2017-07-05T13:55:40-04:00'
                        updated_at: '2017-07-05T13:55:40-04:00'
                        prices:
                          - id: 121
                            component_id: 74
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: '5.0'
                      - id: 81
                        default: false
                        name: MSRP
                        pricing_scheme: per_unit
                        component_id: 74
                        handle: msrp
                        archived_at: null
                        created_at: '2017-07-05T13:55:40-04:00'
                        updated_at: '2017-07-05T13:55:40-04:00'
                        prices:
                          - id: 122
                            component_id: 74
                            starting_quantity: 1
                            ending_quantity: null
                            unit_price: '4.0'
      operationId: post-components-component_id-price_points-bulk.json
      description: '# Bulk Create Component Price Points'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                price_points:
                  type: array
                  items:
                    anyOf:
                      - $ref: ../models/Create-Component-Price-Point.yaml
                      - $ref: ../models/Create-Prepaid-Usage-Component-Price-Point.yaml
            examples:
              Example:
                value:
                  price_points:
                    - name: Wholesale
                      handle: wholesale
                      pricing_scheme: per_unit
                      prices:
                        - starting_quantity: 1
                          unit_price: 5
                    - name: MSRP
                      handle: msrp
                      pricing_scheme: per_unit
                      prices:
                        - starting_quantity: 1
                          unit_price: 4
  '/components/{component_id}/price_points/{price_point_id}.json':
    parameters:
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the price point
    put:
      summary: Update Price Point
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_point:
                    $ref: ../models/Component-Price-Point.yaml
      operationId: put-components-component_id-price_points-price_point_id-.json
      description: |-
        # Update Price Point

        When updating a price point, it's prices can be updated as well by creating new prices or editing / removing existing ones.

        Passing in a price bracket without an `id` will attempt to create a new price. 

        Including an `id` will update the corresponding price, and including the `_destroy` flag set to true along with the `id` will remove that price.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                price_point:
                  type: object
                  properties:
                    name:
                      type: string
                    prices:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          ending_quantity:
                            type: integer
                          unit_price:
                            type: integer
                          _destroy:
                            type: string
                          starting_quantity:
                            type: integer
            examples:
              Example:
                value:
                  price_point:
                    name: Default
                    prices:
                      - id: 1
                        ending_quantity: 100
                        unit_price: 5
                      - id: 2
                        _destroy: 'true'
                      - starting_quantity: 101
                        unit_price: 4
    delete:
      summary: Archive Price Point
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_point:
                    $ref: ../models/Component-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_point:
                      id: 79
                      default: false
                      name: Wholesale
                      pricing_scheme: stairstep
                      component_id: 74
                      handle: wholesale-handle
                      archived_at: '2017-07-06T15:04:00-04:00'
                      created_at: '2017-07-05T13:44:30-04:00'
                      updated_at: '2017-07-05T13:44:30-04:00'
                      prices:
                        - id: 119
                          component_id: 74
                          starting_quantity: 1
                          ending_quantity: 100
                          unit_price: '5.0'
                        - id: 120
                          component_id: 74
                          starting_quantity: 101
                          ending_quantity: null
                          unit_price: '4.0'
      operationId: delete-components-component_id-price_points-price_point_id-.json
      description: |-
        # Archive Price Point

        A price point can be archived at any time. Subscriptions using a price point that has been archived will continue using it until they're moved to another price point.
  '/components/{component_id}/price_points/{price_point_id}/unarchive.json':
    parameters:
      - schema:
          type: integer
        name: component_id
        in: path
        required: true
        description: The Chargify id of the component to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the price point
    put:
      summary: Unarchive Price Point
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_point:
                    $ref: ../models/Component-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_point:
                      id: 79
                      default: false
                      name: Wholesale
                      pricing_scheme: stairstep
                      component_id: 74
                      handle: wholesale-handle
                      archived_at: null
                      created_at: '2017-07-05T13:44:30-04:00'
                      updated_at: '2017-07-05T13:44:30-04:00'
                      prices:
                        - id: 119
                          component_id: 74
                          starting_quantity: 1
                          ending_quantity: 100
                          unit_price: '5.0'
                        - id: 120
                          component_id: 74
                          starting_quantity: 101
                          ending_quantity: null
                          unit_price: '4.0'
      operationId: put-components-component_id-price_points-price_point_id-unarchive.json
      description: '# Unarchive Price Point'
  '/price_points/{price_point_id}/currency_prices.json':
    parameters:
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the price point
    post:
      summary: Create Currency Prices
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Currency-Price.yaml
      operationId: post-price_points-price_point_id-currency_prices.json
      description: |-
        # Create Currency Prices

        This endpoint allows you to create currency prices for a given currency that has been defined on the site level in your settings.

        When creating currency prices, they need to mirror the structure of your primary pricing. For each price level defined on the component price point, there should be a matching price level created in the given currency.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency_prices:
                  type: array
                  items:
                    type: object
                    properties:
                      currency:
                        type: string
                        description: ISO code for a currency defined on the site level
                      price:
                        type: integer
                        description: Price for the price level in this currency
                      price_id:
                        type: integer
                        description: ID of the price that this corresponds with
            examples:
              Example:
                value:
                  currency_prices:
                    - currency: EUR
                      price: 50
                      price_id: 20
                    - currency: EUR
                      price: 40
                      price_id: 21
    put:
      summary: Update Currency Prices
      tags:
        - Components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Currency-Price.yaml
      operationId: put-price_points-price_point_id-currency_prices.json
      description: |-
        # Update Currency Prices

        This endpoint allows you to update currency prices for a given currency that has been defined on the site level in your settings.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency_prices:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: ID of the currency price record being updated
                      price:
                        type: integer
                        description: New price for the given currency
            examples:
              Example:
                value:
                  currency_prices:
                    - id: 100
                      price: 51
                    - id: 101
                      price: 41
  /mrr_movements.json:
    get:
      summary: List MRR Movements
      tags:
        - Insights
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mrr:
                    type: object
                    properties:
                      page:
                        type: integer
                      per_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_entries:
                        type: integer
                      currency:
                        type: string
                      currency_symbol:
                        type: string
                      movements:
                        type: array
                        items:
                          type: object
                          properties:
                            timestamp:
                              type: string
                            amount_in_cents:
                              type: integer
                            amount_formatted:
                              type: string
                            description:
                              type: string
                            category:
                              type: string
                            breakouts:
                              type: object
                              properties:
                                plan_amount_in_cents:
                                  type: integer
                                plan_amount_formatted:
                                  type: string
                                usage_amount_in_cents:
                                  type: integer
                                usage_amount_formatted:
                                  type: string
                            line_items:
                              type: array
                              items:
                                type: object
                                properties:
                                  product_id:
                                    type: integer
                                  component_id:
                                    type: integer
                                    description: 'For Product (or "baseline") line items, this field will have a value of `0`.'
                                  name:
                                    type: string
                                  mrr:
                                    type: integer
                                  mrr_movements:
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        amount:
                                          type: integer
                                        category:
                                          type: string
                                  quantity:
                                    type: integer
                                  prev_quantity:
                                    type: integer
                                  recurring:
                                    type: boolean
                                    description: 'When `true`, the line item''s MRR value will contribute to the `plan` breakout. When `false`, the line item contributes to the `usage` breakout.'
                            subscription_id:
                              type: integer
                            subscriber_name:
                              type: string
              examples:
                Example:
                  value:
                    mrr:
                      page: 0
                      per_page: 10
                      total_pages: 80
                      total_entries: 791
                      currency: USD
                      currency_symbol: $
                      movements:
                        - timestamp: '2014-12-03T13:59:46-05:00'
                          amount_in_cents: 2173
                          amount_formatted: $21.73
                          description: Awesome Company signed up for Super Product ($21.73/mo)
                          category: new_business
                          breakouts:
                            plan_amount_in_cents: 2173
                            plan_amount_formatted: $21.73
                            usage_amount_in_cents: 0
                            usage_amount_formatted: $0.00
                          line_items:
                            - product_id: 306386
                              component_id: 0
                              price_point_id: 3856987
                              name: string
                              mrr: 2173
                              mrr_movements:
                                - amount: 2173
                                  category: new_business
                              quantity: 1
                              prev_quantity: 0
                              recurring: true
                          subscription_id: 12355
                          subscriber_name: Amy Smith
      operationId: get-mrr_movements.json
      description: |-
        # List MRR Movements

        This endpoint returns your site's MRR movements.
      parameters:
        - schema:
            type: integer
          in: query
          name: subscription_id
          description: optionally filter results by subscription
        - schema:
            type: integer
            default: 1
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned. '
        - schema:
            type: integer
            default: 10
            maximum: 50
          in: query
          name: per_page
          description: ' This parameter indicates how many records to fetch in each request. Default value is 10. The maximum allowed values is 50; any per_page value over 50 will be changed to 10.'
        - schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          name: direction
          description: The sort direction of the returned records.
  '/product_families/{product_family_id}/products.json':
    parameters:
      - schema:
          type: integer
        name: product_family_id
        in: path
        required: true
        description: The Chargify id of the product family to which the product belongs
    post:
      summary: Create Product
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                Example:
                  value:
                    product:
                      id: 4364984
                      name: Gold Plan
                      handle: gold
                      description: This is our gold plan.
                      accounting_code: '123'
                      request_credit_card: true
                      expiration_interval: null
                      expiration_interval_unit: null
                      created_at: '2016-11-04T16:31:15-04:00'
                      updated_at: '2016-11-04T16:31:15-04:00'
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents: null
                      trial_price_in_cents: null
                      trial_interval: null
                      trial_interval_unit: null
                      archived_at: null
                      require_credit_card: true
                      return_params: null
                      taxable: false
                      update_return_url: null
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: null
                      product_family:
                        id: 527890
                        name: Acme Projects
                        description: ''
                        handle: billing-plans
                        accounting_code: null
                      public_signup_pages:
                        - id: 301078
                          return_url: null
                          return_params: null
                          url: 'https://general-goods.chargify.com/subscribe/ftgbpq7f5qpr/gold'
                      product_price_point_name: Default
              schema:
                type: object
                properties:
                  product:
                    $ref: ../models/Product.yaml
      operationId: post-product_families-product_family_id-products.json
      description: |-
        # Create Product

        Use this method to create a product within your Chargify site.

        + [Products Documentation](http://help.chargify.com/products/products-intro.html)
        + [Changing a Subscription's Product](http://help.chargify.com/subscriptions/subscription-summary.html#product)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  $ref: ../models/Create-or-Update-Product.yaml
            examples:
              Example:
                value:
                  product:
                    name: Gold Plan
                    handle: gold
                    description: This is our gold plan.
                    accounting_code: '123'
                    request_credit_card: true
                    price_in_cents: 1000
                    interval: 1
                    interval_unit: month
                    auto_create_signup_page: true
                    tax_code: D0000000
    get:
      tags:
        - Products
      summary: Read Products
      operationId: get-product_families-product_family_id-products.json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    product:
                      $ref: ../models/Product.yaml
              examples:
                Example:
                  value:
                    - product:
                        id: 3801242
                        name: Free product
                        handle: zero-dollar-product
                        description: ''
                        accounting_code: ''
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: '2016-04-21T16:08:39-04:00'
                        updated_at: '2016-08-03T11:27:53-04:00'
                        price_in_cents: 10000
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: 0
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: false
                        return_params: ''
                        taxable: false
                        update_return_url: ''
                        initial_charge_after_trial: false
                        version_number: 4
                        update_return_params: ''
                        product_family:
                          id: 527890
                          name: Acme Projects
                          description: ''
                          handle: billing-plans
                          accounting_code: null
                        public_signup_pages:
                          - id: 283460
                            return_url: null
                            return_params: ''
                            url: 'https://general-goods.chargify.com/subscribe/smcc4j3d2w6h/zero-dollar-product'
                        product_price_point_name: Default
                    - product:
                        id: 3858146
                        name: Calendar Billing Product
                        handle: calendar-billing-product
                        description: ''
                        accounting_code: ''
                        request_credit_card: true
                        expiration_interval: null
                        expiration_interval_unit: never
                        created_at: '2016-07-05T13:07:38-04:00'
                        updated_at: '2016-07-05T13:07:38-04:00'
                        price_in_cents: 10000
                        interval: 1
                        interval_unit: month
                        initial_charge_in_cents: null
                        trial_price_in_cents: null
                        trial_interval: null
                        trial_interval_unit: month
                        archived_at: null
                        require_credit_card: true
                        return_params: ''
                        taxable: false
                        update_return_url: ''
                        initial_charge_after_trial: false
                        version_number: 1
                        update_return_params: ''
                        product_family:
                          id: 527890
                          name: Acme Projects
                          description: ''
                          handle: billing-plans
                          accounting_code: null
                        public_signup_pages:
                          - id: 289193
                            return_url: ''
                            return_params: ''
                            url: 'https://general-goods.chargify.com/subscribe/gxdbfxzxhcjq/calendar-billing-product'
                        product_price_point_name: Default
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: string
              examples:
                Example:
                  value: A valid product_family_id is required
      description: |-
        ## Read Products

        This method allows to retrieve a list of Products belonging to a Product Family.
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: ' This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.'
        - schema:
            type: string
            enum:
              - created_at
              - updated_at
          in: query
          name: date_field
          description: The type of filter you would like to apply to your search.
        - schema:
            type: string
          in: query
          name: start_date
          description: 'The start date (format YYYY-MM-DD) with which to filter the date_field. Returns products with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: end_date
          description: 'The end date (format YYYY-MM-DD) with which to to filter the date_field. Returns products with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: start_datetime
          description: 'The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date.'
        - schema:
            type: string
          in: query
          name: end_datetime
          description: 'The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date.'
        - schema:
            type: boolean
          in: query
          name: include_archibed
          description: Include archived products
  '/products/{product_id}.json':
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product
    get:
      summary: Read Product
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: ../models/Product.yaml
              examples:
                Example:
                  value:
                    product:
                      id: 4535635
                      name: Paid Annual Seats
                      handle: paid-annual-seats
                      description: Paid annual seats for our commercial enterprise product
                      accounting_code: paid-annual-seats
                      request_credit_card: true
                      expiration_interval: 1
                      expiration_interval_unit: day
                      created_at: '2017-08-25T10:25:31-05:00'
                      updated_at: '2018-01-16T12:58:04-06:00'
                      price_in_cents: 10000
                      interval: 12
                      interval_unit: month
                      initial_charge_in_cents: 4900
                      trial_price_in_cents: 1000
                      trial_interval: 14
                      trial_interval_unit: day
                      archived_at: null
                      require_credit_card: true
                      return_params: 'id={subscription_id}&ref={customer_reference}'
                      taxable: true
                      update_return_url: 'http://www.example.com'
                      tax_code: D0000000
                      initial_charge_after_trial: false
                      version_number: 4
                      update_return_params: 'id={subscription_id}&ref={customer_reference}'
                      product_family:
                        id: 1025627
                        name: Acme Products
                        description: ''
                        handle: acme-products
                        accounting_code: null
                      public_signup_pages: []
                      product_price_point_name: Default
      operationId: get-products-product_id-.json
      description: |-
        ## Read Product

        This endpoint allows you to read the current details of a product that you've created in Chargify.
    put:
      summary: Update Product
      tags:
        - Products
      operationId: put-products-product_id-.json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: ../models/Product.yaml
              examples:
                Example:
                  value:
                    product:
                      id: 4365034
                      name: Platinum Plan
                      handle: platinum
                      description: This is our platinum plan.
                      accounting_code: '123'
                      request_credit_card: true
                      expiration_interval: null
                      expiration_interval_unit: null
                      created_at: '2016-11-04T16:34:29-04:00'
                      updated_at: '2016-11-04T16:37:11-04:00'
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents: null
                      trial_price_in_cents: null
                      trial_interval: null
                      trial_interval_unit: null
                      archived_at: null
                      require_credit_card: true
                      return_params: null
                      taxable: false
                      update_return_url: null
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: null
                      product_family:
                        id: 527890
                        name: Acme Projects
                        description: ''
                        handle: billing-plans
                        accounting_code: null
                      public_signup_pages:
                        - id: 301079
                          return_url: null
                          return_params: null
                          url: 'https://general-goods.chargify.com/subscribe/wgyd96tb5pj9/platinum'
                      product_price_point_name: Original
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - 'Name: cannot be blank.'
      description: |-
        ## Update Product

        Use this method to change aspects of an existing product. 

        ### Input Attributes Update Notes

        + `update_return_params` The parameters we will append to your `update_return_url`. See Return URLs and Parameters

        ### Product Price Point

        Updating a product using this endpoint will create a new price point and set it as the default price point for this product. If you should like to update an existing product price point, that must be done separately.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  $ref: ../models/Create-or-Update-Product.yaml
    delete:
      summary: Archive Product
      tags:
        - Products
      operationId: delete-products-product_id-.json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: ../models/Product.yaml
              examples:
                Example:
                  value:
                    product:
                      id: 4535638
                      name: Business Monthly
                      handle: null
                      description: Business Monthly
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval: null
                      expiration_interval_unit: never
                      created_at: '2017-08-25T10:25:31-05:00'
                      updated_at: '2018-01-16T13:02:44-06:00'
                      price_in_cents: 4900
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents: null
                      trial_price_in_cents: 0
                      trial_interval: 1
                      trial_interval_unit: day
                      archived_at: '2018-01-16T13:02:44-06:00'
                      require_credit_card: false
                      return_params: ''
                      taxable: false
                      update_return_url: ''
                      tax_code: ''
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: ''
                      product_family:
                        id: 1025627
                        name: Acme Products
                        description: ''
                        handle: acme-products
                        accounting_code: null
                      public_signup_pages: []
                      product_price_point_name: Default
      description: |-
        ## Archive Product

        Sending a DELETE request to this endpoint will archive the product. All current subscribers will be unffected; their subscription/purchase will continue to be charged monthyl. 

        This will restrict the option to chose the product for purchase via the Billing Portal, as well as disable Public Signup Pages for the product.
  '/products/handle/{api_handle}.json':
    parameters:
      - schema:
          type: string
        name: api_handle
        in: path
        required: true
        description: The handle of the product
    get:
      summary: Read Product by Handle
      tags:
        - Products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: ../models/Product.yaml
              examples:
                Example:
                  value:
                    product:
                      id: 3903594
                      name: No cost product
                      handle: no-cost-product
                      description: ''
                      accounting_code: ''
                      request_credit_card: true
                      expiration_interval: null
                      expiration_interval_unit: never
                      created_at: '2016-09-02T17:11:29-04:00'
                      updated_at: '2016-11-30T11:46:13-05:00'
                      price_in_cents: 0
                      interval: 1
                      interval_unit: month
                      initial_charge_in_cents: null
                      trial_price_in_cents: 5
                      trial_interval: 1
                      trial_interval_unit: month
                      archived_at: null
                      require_credit_card: false
                      return_params: reference=5678
                      taxable: false
                      update_return_url: ''
                      initial_charge_after_trial: false
                      version_number: 1
                      update_return_params: reference=5678
                      product_family:
                        id: 527890
                        name: Acme Projects
                        description: ''
                        handle: billing-plans
                        accounting_code: null
                      public_signup_pages:
                        - id: 281174
                          return_url: ''
                          return_params: ''
                          url: 'https://general-goods.chargify.com/subscribe/xgdxtk4vhtbz/no-cost-product'
                        - id: 282270
                          return_url: ''
                          return_params: ''
                          url: 'https://general-goods.chargify.com/subscribe/xxqmrgtsbd9k/no-cost-product'
                        - id: 291587
                          return_url: ''
                          return_params: ''
                          url: 'https://general-goods.chargify.com/subscribe/pvhwss7zjjnh/no-cost-product'
                        - id: 294832
                          return_url: 'http://www.example.com/'
                          return_params: engine=md7a
                          url: 'https://general-goods.chargify.com/subscribe/m6tbcq4mcgpw/no-cost-product'
                      product_price_point_name: Default
      operationId: get-products-handle-api_handle-.json
      description: |-
        ## Read Product via API Handle

        This method allows to retrieve a Product object by its `api_handle`.
  /product_families.json:
    post:
      summary: Create Product Family
      tags:
        - Product Families
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_family:
                    $ref: ../models/Product-Family.yaml
              examples:
                Example:
                  value:
                    product_family:
                      id: 933860
                      name: Acme Projects
                      description: Amazing project management tool
                      handle: acme-projects
                      accounting_code: null
      operationId: post-product_families.json
      description: |-
        ## Create Product Family

        This method will create a Product Family within your Chargify site. Create a Product Family to act as a container for your products, components and coupons.

        Full documentation on how Product Families operate within the Chargify UI can be located [here](http://help.chargify.com/products/product-families.html).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_family:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
            examples:
              Example:
                value:
                  product_family:
                    name: Acme Projects
                    description: Amazing project management tool
    get:
      summary: List Product Families
      tags:
        - Product Families
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    product_family:
                      $ref: ../models/Product-Family.yaml
              examples:
                Example:
                  value:
                    - product_family:
                        id: 37
                        name: Acme Projects
                        description: null
                        handle: acme-projects
                        accounting_code: null
                        created_at: '2013-02-20T15:05:51-07:00'
                        updated_at: '2013-02-20T15:05:51-07:00'
                    - product_family:
                        id: 155
                        name: Bat Family
                        description: Another family.
                        handle: bat-family
                        accounting_code: null
                        created_at: '2014-04-16T12:41:13-06:00'
                        updated_at: '2014-04-16T12:41:13-06:00'
      operationId: get-product_families.json
      description: |-
        ## List Product Families

        This method allows to retrieve a list of Product Families for a site.
      parameters:
        - schema:
            type: string
            enum:
              - created_at
              - updated_at
          in: query
          name: date_field
          description: The type of filter you would like to apply to your search.
        - schema:
            type: string
          in: query
          name: start_date
          description: ' The start date (format YYYY-MM-DD) with which to filter the date_field. Returns products with a timestamp at or after midnight (12:00:00 AM) in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: end_date
          description: 'The end date (format YYYY-MM-DD) with which to to filter the date_field. Returns products with a timestamp up to and including 11:59:59PM in your site’s time zone on the date specified'
        - schema:
            type: string
          in: query
          name: start_datetime
          description: 'The start date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or after exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of start_date.'
        - schema:
            type: string
          in: query
          name: end_datetime
          description: 'The end date and time (format YYYY-MM-DD HH:MM:SS) with which to filter the date_field. Returns products with a timestamp at or before exact time provided in query. You can specify timezone in query - otherwise your site''s time zone will be used. If provided, this parameter will be used instead of end_date.'
  '/product_families/{id}.json':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: The Chargify id of the product family
    get:
      summary: Read Product Family
      tags:
        - Product Families
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_family:
                    $ref: ../models/Product-Family.yaml
              examples:
                Example:
                  value:
                    product_family:
                      id: 527890
                      name: Acme Projects
                      description: ''
                      handle: billing-plans
                      accounting_code: null
      operationId: get-product_families-id-.json
      description: |-
        ## Read Product Family

        This method allows to retrieve a Product Family via the `product_family_id`. The response will contain a Product Family object.

        The product family can be specified either with the id number, or with the `handle:my-family` format.
  '/products/{product_id}/price_points.json':
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product to which the price point belongs
    post:
      summary: Create Product Price Point
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_point:
                    $ref: ../models/Product-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 'Tue, 30 Oct 2018 18:49:47 EDT -04:00'
                      created_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
                      updated_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
      operationId: post-products-product_id-price_points.json
      description: '# Create Product Price Point'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                price_point:
                  $ref: ../models/Create-Product-Price-Point.yaml
            examples:
              Example:
                value:
                  price_point:
                    name: Educational
                    handle: educational
                    price_in_cents: 1000
                    interval: 1
                    interval_unit: month
                    trial_price_in_cents: 4900
                    trial_interval: 1
                    trial_interval_unit: month
                    trial_type: payment_expected
                    initial_charge_in_cents: 120000
                    initial_charge_after_trial: false
                    expiration_interval: 12
                    expiration_interval_unit: month
    get:
      summary: List Product Price Points
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_points:
                    type: array
                    items:
                      $ref: ../models/Product-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_points:
                      - id: 283
                        name: Educational
                        handle: educational
                        price_in_cents: 1000
                        interval: 1
                        interval_unit: month
                        trial_price_in_cents: 4900
                        trial_interval: 1
                        trial_interval_unit: month
                        trial_type: payment_expected
                        initial_charge_in_cents: 120000
                        initial_charge_after_trial: false
                        expiration_interval: 12
                        expiration_interval_unit: month
                        product_id: 901
                        archived_at: 'Tue, 30 Oct 2018 18:49:47 EDT -04:00'
                        created_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
                        updated_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
      operationId: get-products-product_id-price_points.json
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: ' Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            maximum: 200
            default: 10
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 10. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
        - schema:
            type: boolean
          in: query
          name: currency_prices
          description: 'When fetching a product''s price points, if you have defined multiple currencies at the site level, you can optionally pass the ?currency_prices=true query param to include an array of currency price data in the response. If the product price point is set to use_site_exchange_rate: true, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.'
      description: '# List Product Price Points'
  '/products/{product_id}/price_points/{price_point_id}.json':
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the product price point
    put:
      summary: Update Product Price Point
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_point:
                    $ref: ../models/Product-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 'Tue, 30 Oct 2018 18:49:47 EDT -04:00'
                      created_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
                      updated_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
      operationId: put-products-product_id-price_points-price_point_id-.json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                price_point:
                  type: object
                  properties:
                    handle:
                      type: string
                    price_in_cents:
                      type: integer
            examples:
              Example:
                value:
                  price_point:
                    handle: educational
                    price_in_cents: 1250
      description: '# Update Product Price Point'
    get:
      summary: Read Product Price Point
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_point:
                    $ref: ../models/Product-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 'Tue, 30 Oct 2018 18:49:47 EDT -04:00'
                      created_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
                      updated_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
      operationId: get-products-product_id-price_points-price_point_id-.json
      description: '# Read Product Price Point'
      parameters:
        - schema:
            type: boolean
          in: query
          name: currency_prices
          description: 'When fetching a product''s price points, if you have defined multiple currencies at the site level, you can optionally pass the ?currency_prices=true query param to include an array of currency price data in the response. If the product price point is set to use_site_exchange_rate: true, it will return pricing based on the current exchange rate. If the flag is set to false, it will return all of the defined prices for each currency.'
    delete:
      summary: Archive Product Price Point
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_point:
                    $ref: ../models/Product-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 'Tue, 30 Oct 2018 18:49:47 EDT -04:00'
                      created_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
                      updated_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
      operationId: delete-products-product_id-price_points-price_point_id-.json
      description: '# Archive Product Price Point'
  '/products/{product_id}/price_points/{price_point_id}/unarchive.json':
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the product price point
    patch:
      summary: Unarchive Product Price Point
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_point:
                    $ref: ../models/Product-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 'Tue, 30 Oct 2018 18:49:47 EDT -04:00'
                      created_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
                      updated_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
      operationId: patch-products-product_id-price_points-price_point_id-unarchive.json
      description: '# Unarchive Product Price Point'
  '/products/{product_id}/price_points/{price_point_id}/default.json':
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product to which the price point belongs
      - schema:
          type: integer
        name: price_point_id
        in: path
        required: true
        description: The Chargify id of the product price point
    patch:
      summary: Promote Product Price Point to Default
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_point:
                    $ref: ../models/Product-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_point:
                      id: 283
                      name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                      product_id: 901
                      archived_at: 'Tue, 30 Oct 2018 18:49:47 EDT -04:00'
                      created_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
                      updated_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
      operationId: patch-products-product_id-price_points-price_point_id-default.json
      description: '# Promote Product Price Point to Default'
  '/products/{product_id}/price_points/bulk.json':
    parameters:
      - schema:
          type: integer
        name: product_id
        in: path
        required: true
        description: The Chargify id of the product to which the price points belong
    post:
      summary: Bulk Create Product Price Points
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  price_points:
                    type: array
                    items:
                      $ref: ../models/Product-Price-Point.yaml
              examples:
                Example:
                  value:
                    price_points:
                      - id: 283
                        name: Educational
                        handle: educational
                        price_in_cents: 1000
                        interval: 1
                        interval_unit: month
                        trial_price_in_cents: 4900
                        trial_interval: 1
                        trial_interval_unit: month
                        trial_type: payment_expected
                        initial_charge_in_cents: 120000
                        initial_charge_after_trial: false
                        expiration_interval: 12
                        expiration_interval_unit: month
                        product_id: 901
                        archived_at: 'Tue, 30 Oct 2018 18:49:47 EDT -04:00'
                        created_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
                        updated_at: 'Tue, 23 Oct 2018 18:49:47 EDT -04:00'
      operationId: post-products-product_id-price_points-bulk.json
      description: '# Bulk Create Product Price Points'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                price_points:
                  type: array
                  items:
                    $ref: ../models/Create-Product-Price-Point.yaml
            examples:
              Example:
                value:
                  price_points:
                    - name: Educational
                      handle: educational
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
                    - name: More Educational
                      handle: more-educational
                      price_in_cents: 2000
                      interval: 1
                      interval_unit: month
                      trial_price_in_cents: 4900
                      trial_interval: 1
                      trial_interval_unit: month
                      trial_type: payment_expected
                      initial_charge_in_cents: 120000
                      initial_charge_after_trial: false
                      expiration_interval: 12
                      expiration_interval_unit: month
  '/product_price_points/{product_price_point_id}/currency_prices.json':
    parameters:
      - schema:
          type: integer
        name: product_price_point_id
        in: path
        required: true
        description: The Chargify id of the product price point
    post:
      summary: Create Currency Prices
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/Product-Price-Point-Currency-Price.yaml
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      base:
                        type: array
                        items:
                          type: string
              examples:
                Example:
                  value:
                    errors:
                      base:
                        - A baseline price must be defined for this product price point.
      operationId: post-product_price_points-product_price_point_id-currency_prices.json
      description: |-
        # Create Currency Prices

        This endpoint allows you to create currency prices for a given currency that has been defined on the site level in your settings.

        When creating currency prices, they need to mirror the structure of your primary pricing. If the product price point defines a trial and/or setup fee, each currency must also define a trial and/or setup fee.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency_prices:
                  type: array
                  items:
                    type: object
                    properties:
                      currency:
                        type: string
                        description: |
                          ISO code for one of the site level currencies.
                      price:
                        type: integer
                        description: |
                          Price for the given role.
                      role:
                        type: string
                        description: Role for the price.
                        enum:
                          - baseline
                          - trial
                          - initial
                    required:
                      - currency
                      - price
                      - role
              required:
                - currency_prices
            examples:
              Example:
                value:
                  currency_prices:
                    - currency: EUR
                      price: 60
                      role: baseline
                    - currency: EUR
                      price: 30
                      role: trial
                    - currency: EUR
                      price: 100
                      role: initial
    put:
      summary: Update Currency Prices
      tags:
        - 'Product: Price Points'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/Product-Price-Point-Currency-Price.yaml
      operationId: put-product_price_points-product_price_point_id-currency_prices.json
      description: |-
        # Update Currency Prices

        This endpoint allows you to update the `price`s of currency prices for a given currency that exists on the product price point.

        When updating the pricing, it needs to mirror the structure of your primary pricing. If the product price point defines a trial and/or setup fee, each currency must also define a trial and/or setup fee.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currency_prices:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: |
                          ID of the currency price record being updated.
                      price:
                        type: integer
                        description: |
                          New price for the currency price.
                    required:
                      - id
                      - price
              required:
                - currency_prices
            examples:
              Example:
                value:
                  currency_prices:
                    - id: 200
                      price: 15
                    - id: 201
                      price: 5
  /payment_profiles.json:
    post:
      summary: Create Payment Profile
      tags:
        - Payment Profiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  first_name:
                    type: string
                  last_name:
                    type: string
                  masked_card_number:
                    type: string
                    nullable: true
                  card_type:
                    type: string
                  expiration_month:
                    type: integer
                  expiration_year:
                    type: integer
                  customer_id:
                    type: integer
                  current_vault:
                    type: string
                  vault_token:
                    type: string
                  billing_address:
                    type: string
                  billing_city:
                    type: string
                  billing_state:
                    type: string
                  billing_zip:
                    type: string
                  billing_country:
                    type: string
                  customer_vault_token:
                    type: string
                    nullable: true
                  billing_address_2:
                    type: string
                    nullable: true
                  payment_type:
                    type: string
              examples:
                Example:
                  value:
                    payment_profile:
                      first_name: Jessica
                      last_name: Test
                      last_four: '1111'
                      card_type: visa
                      expiration_month: 10
                      expiration_year: 2018
                      customer_id: 19195410
                      current_vault: bogus
                      vault_token: '1'
                      billing_address: 123 Main St.
                      billing_city: Boston
                      billing_state: MA
                      billing_zip: '02120'
                      billing_country: US
                      customer_vault_token: null
                      billing_address_2: null
                      payment_type: credit_card
        '404':
          description: Not Found
      operationId: post-payment_profiles.json
      description: |-
        # Create Payment Profile

        Use this endpoint to create a payment profile for a customer.

        ## Active Payment Methods

        Creating a new payment profile for a Customer via the API will not make that Payment Profile current for any of the Customer’s Subscriptions. In order to utilize the payment profile as the default, it must be set as the default payment profile for the subscription or subscription group.

        ## Requirements

        Either the full_number, expiration_month, and expiration_year or if you have an existing vault_token from your gateway, that vault_token and the current_vault are required.

        ## BraintreeBlue
        Some merchants use Braintree JavaScript libraries directly and then pass `payment_method_nonce` and/or `paypal_email` to create a payment profile. This implementation is deprecated and does not handle 3D Secure.  Instead, we have provided  [Chargify.js](https://developer.chargify.com/content/chargify-js/chargify-js.html) which is continuously improved and supports Credit Cards (along with 3D Secure), PayPal and ApplePay payment types.

        ## GoCardless
        + [Full documentation on GoCardless](https://help.chargify.com/payment-gateways/gocardless.html)

        + [Using Chargify.js with GoCardless - minimal example](https://developer.chargify.com/content/chargify-js/example.html#minimal-example-with-gocardless)

        + [Using Chargify.js with GoCardless - full example](https://developer.chargify.com/content/chargify-js/example.html#full-example-with-gocardless)

        ## SEPA Direct Debit
        + [Full documentation on Stripe SEPA Direct Debit](https://help.chargify.com/payment-gateways/stripe-direct-debit.html)

        + [Using Chargify.js with Stripe Direct Debit - minimal example](https://developer.chargify.com/content/chargify-js/example.html#minimal-example-with-sepa-or-becs-direct-debit-stripe-gateway)

        + [Using Chargify.js with Stripe Direct Debit - full example](https://developer.chargify.com/content/chargify-js/example.html#full-example-with-sepa-direct-debit-stripe-gateway)

        ## BECS Direct Debit

        + [Full documentation on Stripe BECS Direct Debit](https://help.chargify.com/payment-gateways/stripe-direct-debit.html)

        + [Using Chargify.js with Stripe BECS Direct Debit - minimal example](https://developer.chargify.com/content/chargify-js/example.html#minimal-example-with-sepa-or-becs-direct-debit-stripe-gateway)

        + [Using Chargify.js with Stripe BECS Direct Debit - full example](https://developer.chargify.com/content/chargify-js/example.html#full-example-with-becs-direct-debit-stripe-gateway)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_profile:
                  type: object
                  properties:
                    first_name:
                      type: string
                    last_name:
                      type: string
                    last_four:
                      type: string
                    card_type:
                      type: string
                    expiration_month:
                      type: integer
                    expiration_year:
                      type: integer
                    customer_id:
                      type: integer
                    current_vault:
                      type: string
                      description: Use bogus for testing
                      enum:
                        - bogus
                        - authorizenet
                        - authorizenet_cim
                        - beanstream
                        - bpoint
                        - braintree_blue
                        - cybersource
                        - elavon
                        - eway
                        - eway_rapid_std
                        - firstdata
                        - forte
                        - fusebox
                        - gocardless
                        - litle
                        - moneris
                        - moneris_us
                        - orbital
                        - payment_express
                        - paymill
                        - pin
                        - quickpay
                        - square
                        - stripe_connect
                        - trust_commerce
                        - wirecard
                    vault_token:
                      type: string
                    billing_address:
                      type: string
                    billing_city:
                      type: string
                    billing_state:
                      type: string
                    billing_zip:
                      type: string
                    billing_country:
                      type: string
                    customer_vault_token:
                      type:
                        - string
                        - 'null'
                    billing_address_2:
                      type:
                        - string
                        - 'null'
                    payment_type:
                      type: string
                    bank_name:
                      type: string
                      description: (Required for ACH and GoCardless. Optional for SEPA and BECS Direct Debit) The name of the bank where the customerʼs account resides
                    bank_routing_number:
                      type: string
                      description: (Required when creating a subscription with ACH. Optional when creating a subscription with GoCardless). The routing number of the bank. It becomes bank_code while passing via GoCardless API
                    bank_account_number:
                      type: string
                      description: (Required when creating a subscription with ACH and BECS Direct Debit. Required when creating a subscription with GoCardless and bank_iban is blank) The customerʼs bank account number
                    bank_account_type:
                      type: string
                    bank_account_holder_type:
                      type: string
                    bank_iban:
                      type: string
                      description: (Optional when creating a subscription with GoCardless. Required for SEPA Direct Debit.) International Bank Account Number
                    bank_branch_code:
                      type: string
                      description: '(Optional when creating a subscription with GoCardless. Required for BECS Direct Debit.) Branch code. Alternatively, an IBAN can be provided'
                    chargify_token:
                      type: string
            examples:
              ACH:
                value:
                  payment_profile:
                    customer_id: 123
                    bank_name: Best Bank
                    bank_routing_number: '021000089'
                    bank_account_number: '111111111111'
                    bank_account_type: checking
                    bank_account_holder_type: business
                    payment_type: bank_account
              Chargify.js:
                value:
                  payment_profile:
                    customer_id: 1036
                    chargify_token: tok_w68qcpnftyv53jk33jv6wk3w
              Card:
                value:
                  payment_profile:
                    first_name: Jessica
                    last_name: Test
                    last_four: '1111'
                    card_type: visa
                    expiration_month: 10
                    expiration_year: 2018
                    customer_id: 19195410
                    current_vault: bogus
                    vault_token: '1'
                    billing_address: 123 Main St.
                    billing_city: Boston
                    billing_state: MA
                    billing_zip: '02120'
                    billing_country: US
                    customer_vault_token: null
                    billing_address_2: null
                    payment_type: credit_card
              Local Bank Details:
                value:
                  payment_profile:
                    customer_id: 123
                    bank_name: Royal Bank of France
                    bank_account_number: '0000000'
                    bank_routing_number: '0003'
                    bank_branch_code: '00006'
                    payment_type: bank_account
                    billing_address: 20 Place de la Gare
                    billing_city: Colombes
                    billing_state: Île-de-France
                    billing_zip: '92700'
                    billing_country: FR
              IBAN:
                value:
                  payment_profile:
                    customer_id: 24907598
                    bank_name: French Bank
                    bank_iban: FR1420041010050500013M02606
                    payment_type: bank_account
                    billing_address: 20 Place de la Gare
                    billing_city: Colombes
                    billing_state: Île-de-France
                    billing_zip: '92700'
                    billing_country: FR
              Import Payment Profile:
                value:
                  payment_profile:
                    customer_id: 24907598
                    customer_vault_token: '[Existing Vault Customer ID]'
                    vault_token: '[Existing Vault Mandate ID]'
                    current_vault: gocardless
                    bank_name: French Bank
                    payment_type: bank_account
                    billing_address: 20 Place de la Gare
                    billing_city: Colombes
                    billing_state: Île-de-France
                    billing_zip: '92700'
                    billing_country: FR
        description: 'When following the IBAN or the Local Bank details examples, a customer, bank account and mandate will be created in your current vault. If the customer, bank account, and mandate already exist in your vault, follow the Import example to link the payment profile into Chargify.'
    get:
      summary: List Payment Profiles
      tags:
        - Payment Profiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    first_name:
                      type: string
                    last_name:
                      type: string
                    customer_id:
                      type: integer
                    current_vault:
                      type: string
                    vault_token:
                      type: string
                    billing_address:
                      type: string
                    billing_city:
                      type: string
                    billing_state:
                      type: string
                    billing_zip:
                      type: string
                    billing_country:
                      type: string
                    customer_vault_token:
                      type: 'null'
                    billing_address_2:
                      type: string
                    bank_name:
                      type: string
                    masked_bank_routing_number:
                      type: string
                    masked_bank_account_number:
                      type: string
                    bank_account_type:
                      type: string
                    bank_account_holder_type:
                      type: string
                    payment_type:
                      type: string
              examples:
                Example:
                  value:
                    - payment_profile:
                        id: 10089892
                        first_name: Chester
                        last_name: Tester
                        customer_id: 14543792
                        current_vault: bogus
                        vault_token: '0011223344'
                        billing_address: 456 Juniper Court
                        billing_city: Boulder
                        billing_state: CO
                        billing_zip: '80302'
                        billing_country: US
                        customer_vault_token: null
                        billing_address_2: ''
                        bank_name: Bank of Kansas City
                        masked_bank_routing_number: XXXX6789
                        masked_bank_account_number: XXXX3344
                        bank_account_type: checking
                        bank_account_holder_type: personal
                        payment_type: bank_account
                    - payment_profile:
                        id: 10188522
                        first_name: Frankie
                        last_name: Tester
                        customer_id: 14543712
                        current_vault: bogus
                        vault_token: '123456789'
                        billing_address: 123 Montana Way
                        billing_city: Los Angeles
                        billing_state: CA
                        billing_zip: '90210'
                        billing_country: US
                        customer_vault_token: null
                        billing_address_2: ''
                        bank_name: Bank of Kansas City
                        masked_bank_routing_number: XXXX6789
                        masked_bank_account_number: XXXX6789
                        bank_account_type: checking
                        bank_account_holder_type: personal
                        payment_type: bank_account
      operationId: get-payment_profiles.json
      description: '# List Payment Profiles'
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: 'Result records are organized in pages. By default, the first page of results is displayed. The page parameter specifies a page number of results to fetch. You can start navigating through the pages to consume the results. You do this by passing in a page parameter. Retrieve the next page by adding ?page=2 to the query string. If there are no results to return, then an empty result set will be returned.'
        - schema:
            type: integer
            default: 20
            maximum: 200
          in: query
          name: per_page
          description: This parameter indicates how many records to fetch in each request. Default value is 20. The maximum allowed values is 200; any per_page value over 200 will be changed to 200.
        - schema:
            type: integer
          in: query
          name: customer_id
          description: The ID of the customer for which you wish to list payment profiles
  '/payment_profiles/{payment_profile_id}.json':
    parameters:
      - schema:
          type: integer
        name: payment_profile_id
        in: path
        required: true
        description: The Chargify id of the payment profile
    get:
      summary: Read Payment Profile
      tags:
        - Payment Profiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payment_profile:
                    oneOf:
                      - properties:
                          id:
                            type: integer
                          first_name:
                            type: string
                          last_name:
                            type: string
                          customer_id:
                            type: integer
                          current_vault:
                            type: string
                          vault_token:
                            type: string
                          billing_address:
                            type: string
                          billing_city:
                            type: string
                          billing_state:
                            type: string
                          billing_zip:
                            type: string
                          billing_country:
                            type: string
                          customer_vault_token:
                            type: 'null'
                          billing_address_2:
                            type: string
                          bank_name:
                            type: string
                          masked_bank_routing_number:
                            type: string
                          masked_bank_account_number:
                            type: string
                          bank_account_type:
                            type: string
                          bank_account_holder_type:
                            type: string
                          payment_type:
                            type: string
                          verified:
                            type: boolean
                            default: false
                            description: denotes whether a bank account has been verified by providing the amounts of two small deposits made into the account
                      - properties:
                          id:
                            type: integer
                          first_name:
                            type: string
                          last_name:
                            type: string
                          masked_card_number:
                            type: string
                          card_type:
                            type: string
                          expiration_month:
                            type: integer
                          expiration_year:
                            type: integer
                          customer_id:
                            type: integer
                          current_vault:
                            type: string
                          vault_token:
                            type: string
                          billing_address:
                            type: string
                          billing_city:
                            type: string
                          billing_state:
                            type: string
                          billing_zip:
                            type: string
                          billing_country:
                            type: string
                          customer_vault_token:
                            type: 'null'
                          billing_address_2:
                            type: string
                          payment_type:
                            type: string
                          disabled:
                            type: boolean
                    type: object
              examples:
                Card:
                  value:
                    payment_profile:
                      id: 10088716
                      first_name: Test
                      last_name: Subscription
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 1
                      expiration_year: 2022
                      customer_id: 14543792
                      current_vault: bogus
                      vault_token: '1'
                      billing_address: 123 Montana Way
                      billing_city: Billings
                      billing_state: MT
                      billing_zip: '59101'
                      billing_country: US
                      customer_vault_token: null
                      billing_address_2: ''
                      payment_type: credit_card
                Bank Account:
                  value:
                    payment_profile:
                      id: 10089892
                      first_name: Chester
                      last_name: Tester
                      customer_id: 14543792
                      current_vault: bogus
                      vault_token: '0011223344'
                      billing_address: 456 Juniper Court
                      billing_city: Boulder
                      billing_state: CO
                      billing_zip: '80302'
                      billing_country: US
                      customer_vault_token: null
                      billing_address_2: ''
                      bank_name: Bank of Kansas City
                      masked_bank_routing_number: XXXX6789
                      masked_bank_account_number: XXXX3344
                      bank_account_type: checking
                      bank_account_holder_type: personal
                      payment_type: bank_account
      operationId: get-payment_profiles-payment_profile_id-.json
      description: '# Read Payment Profile'
    put:
      summary: Update Payment Profile
      tags:
        - Payment Profiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payment_profile:
                    type: object
                    properties:
                      id:
                        type: integer
                      first_name:
                        type: string
                      last_name:
                        type: string
                      card_type:
                        type: string
                      expiration_month:
                        type: integer
                      expiration_year:
                        type: integer
                      customer_id:
                        type: integer
                      current_vault:
                        type: string
                      vault_token:
                        type: string
                      billing_address:
                        type: string
                      billing_city:
                        type: string
                      billing_state:
                        type: string
                      billing_zip:
                        type: string
                      billing_country:
                        type: string
                      payment_type:
                        type: string
              examples:
                Example:
                  value:
                    payment_profile:
                      id: -1174743
                      first_name: et
                      last_name: Duis
                      card_type: dolor dolor reprehenderi
                      expiration_month: -78560474
                      expiration_year: -17552129
                      customer_id: -92719007
                      current_vault: anim aliqua incididunt nisi
                      vault_token: velit id
                      billing_address: quis laboris dolore dolor
                      billing_city: Ut ut occaecat
                      billing_state: occaecat quis
                      billing_zip: voluptate tempor consectetur nostrud eu
                      billing_country: nostrud qui voluptate Duis est
                      payment_type: exercitation eiusmod tempor eu in
      operationId: put-payment_profiles-payment_profile_id-.json
      description: |-
        # Update Payment Profile

        ## Partial Card Updates

        In the event that you are using the Authorize.net, Stripe, Cybersource, Forte or Braintree Blue payment gateways, you can update just the billing and contact information for a payment method. Note the lack of credit-card related data contained in the JSON payload. 

        In this case, the following JSON is acceptable:

        ```
        {
          "payment_profile": {
            "first_name": "Kelly",
            "last_name": "Test",
            "billing_address": "789 Juniper Court",
            "billing_city": "Boulder",
            "billing_state": "CO",
            "billing_zip": "80302",
            "billing_country": "US",
            "billing_address_2": null
          }
        }
        ```

        The result will be that you have updated the billing information for the card, yet retained the original card number data. 

        ## Specific notes on updating payment profiles

        - Merchants with **Authorize.net**, **Cybersource**, **Forte**, **Braintree Blue** or **Stripe** as their payment gateway can update their Customer’s credit cards without passing in the full credit card number and CVV.

        - If you are using **Authorize.net**, **Cybersource**, **Forte**, **Braintree Blue** or **Stripe**, Chargify will ignore the credit card number and CVV when processing an update via the API, and attempt a partial update instead. If you wish to change the card number on a payment profile, you will need to create a new payment profile for the given customer.

        - A Payment Profile cannot be updated with the attributes of another type of Payment Profile. For example, if the payment profile you are attempting to update is a credit card, you cannot pass in bank account attributes (like `bank_account_number`), and vice versa.

        - Updating a payment profile directly will not trigger an attempt to capture a past-due balance. If this is the intent, update the card details via the Subscription instead.

        - If you are using Authorize.net or Stripe, you may elect to manually trigger a retry for a past due subscription after a partial update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_profile:
                  type: object
                  properties:
                    first_name:
                      type: string
                    last_name:
                      type: string
                    full_number:
                      type: string
                    card_type:
                      type: string
                    expiration_month:
                      type: string
                    expiration_year:
                      type: string
                    current_vault:
                      type: string
                    billing_address:
                      type: string
                    billing_city:
                      type: string
                    billing_state:
                      type: string
                    billing_zip:
                      type: string
                    billing_country:
                      type: string
                    billing_address_2:
                      type: string
                      nullable: true
            examples:
              Example:
                value:
                  payment_profile:
                    first_name: Graham
                    last_name: Test
                    full_number: '4111111111111111'
                    card_type: master
                    expiration_month: '04'
                    expiration_year: '2030'
                    current_vault: bogus
                    vault_token: '1'
                    billing_address: 456 Juniper Court
                    billing_city: Boulder
                    billing_state: CO
                    billing_zip: '80302'
                    billing_country: US
                    billing_address_2: null
    delete:
      summary: Delete Unused Payment Profile
      tags:
        - Payment Profiles
      responses:
        '204':
          description: No Content
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - The payment profile is in use by one or more subscriptions and cannot be deleted
      operationId: delete-payment_profiles-payment_profile_id-.json
      description: |-
        # Delete Unused Payment profile.

        Deletes an unused payment profile.

        If the payment profile is in use by one or more subscriptions or groups, a 422 and error message will be returned.
  '/subscriptions/{subscription_id}/payment_profiles/{payment_profile_id}.json':
    parameters:
      - schema:
          type: integer
        name: subscription_id
        in: path
        required: true
        description: The Chargify id of the subscription to which the payment profile belongs
      - schema:
          type: integer
        name: payment_profile_id
        in: path
        required: true
        description: The Chargify id of the payment profile
    delete:
      summary: Delete Subscription Payment Profile
      tags:
        - Payment Profiles
      responses:
        '204':
          description: No Content
      operationId: delete-subscriptions-subscription_id-payment_profiles-payment_profile_id-.json
      description: |-
        ## Delete Subscription Payment Profile

        This will delete a payment profile belonging to the customer on the subscription.

        + If the customer has multiple subscriptions, the payment profile will be removed from all of them.

        + If you delete the default payment profile for a subscription, you will need to specify another payment profile to be the default through the api, or either prompt the user to enter a card in the billing portal or on the self-service page, or visit the Payment Details tab on the subscription in the Admin UI and use the “Add New Credit Card” or “Make Active Payment Method” link, (depending on whether there are other cards present).
  '/bank_accounts/{bank_account_id}/verification.json':
    parameters:
      - schema:
          type: integer
        name: bank_account_id
        in: path
        required: true
    put:
      summary: Verify Bank Account
      tags:
        - Payment Profiles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payment_profile:
                    type: object
                    properties:
                      id:
                        type: integer
                      first_name:
                        type: string
                      last_name:
                        type: string
                      customer_id:
                        type: integer
                      current_vault:
                        type: string
                      vault_token:
                        type: string
                      billing_address:
                        type: string
                      billing_city:
                        type: string
                      billing_state:
                        type: string
                      billing_zip:
                        type: string
                      billing_country:
                        type: string
                      customer_vault_token:
                        type: 'null'
                      billing_address_2:
                        type: string
                      bank_name:
                        type: string
                      masked_bank_routing_number:
                        type: string
                      masked_bank_account_number:
                        type: string
                      bank_account_type:
                        type: string
                      bank_account_holder_type:
                        type: string
                      payment_type:
                        type: string
                      verified:
                        type: boolean
                        default: false
                        description: denotes whether a bank account has been verified by providing the amounts of two small deposits made into the account
              examples:
                Example:
                  value:
                    payment_profile:
                      id: 10089892
                      first_name: Chester
                      last_name: Tester
                      customer_id: 14543792
                      current_vault: stripe_connect
                      vault_token: cus_0123abc456def
                      billing_address: 456 Juniper Court
                      billing_city: Boulder
                      billing_state: CO
                      billing_zip: '80302'
                      billing_country: US
                      customer_vault_token: null
                      billing_address_2: ''
                      bank_name: Bank of Kansas City
                      masked_bank_routing_number: XXXX6789
                      masked_bank_account_number: XXXX3344
                      bank_account_type: checking
                      bank_account_holder_type: personal
                      payment_type: bank_account
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
              examples:
                Example:
                  value:
                    errors:
                      - 'You have tried to verify this bank account 10 times. To continue trying to verify the account, please reach out to us directly.'
      operationId: put-bank_accounts-bank_account_id-verification.json
      description: |-
        # Verify Bank Account

        Submit the two small deposit amounts the customer received in their bank account in order to verify the bank account. (Stripe only)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bank_account_verification:
                  type: object
                  properties:
                    deposit_1_in_cents:
                      type: integer
                    deposit_2_in_cents:
                      type: integer
            examples:
              Example:
                value:
                  bank_account_verification:
                    deposit_1_in_cents: 32
                    deposit_2_in_cents: 45
components:
  schemas: {}
servers:
  - url: 'https://subdomain.chargify.com'
