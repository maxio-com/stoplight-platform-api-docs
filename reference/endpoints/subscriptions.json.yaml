---
"/subscriptions.json":
  post:
    summary: Create Subscription
    tags:
    - Subscriptions
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Subscription-Response"
            examples:
              Example:
                value:
                  subscription:
                    id: 15236915
                    state: active
                    balance_in_cents: 0
                    total_revenue_in_cents: 14000
                    product_price_in_cents: 1000
                    product_version_number: 7
                    current_period_ends_at: '2016-11-15T14:48:10-05:00'
                    next_assessment_at: '2016-11-15T14:48:10-05:00'
                    trial_started_at:
                    trial_ended_at:
                    activated_at: '2016-11-14T14:48:12-05:00'
                    expires_at:
                    created_at: '2016-11-14T14:48:10-05:00'
                    updated_at: '2016-11-14T15:24:41-05:00'
                    cancellation_message:
                    cancellation_method: merchant_api
                    cancel_at_end_of_period:
                    canceled_at:
                    current_period_started_at: '2016-11-14T14:48:10-05:00'
                    previous_state: active
                    signup_payment_id: 162269766
                    signup_revenue: '260.00'
                    delayed_cancel_at:
                    coupon_code: 5SNN6HFK3GBH
                    payment_collection_method: automatic
                    snap_day:
                    reason_code:
                    receives_invoice_emails: false
                    customer:
                      first_name: Curtis
                      last_name: Test
                      email: curtis@example.com
                      cc_emails: jeff@example.com
                      organization: ''
                      reference:
                      id: 14714298
                      created_at: '2016-11-14T14:48:10-05:00'
                      updated_at: '2016-11-14T14:48:13-05:00'
                      address: 123 Anywhere Street
                      address_2: ''
                      city: Boulder
                      state: CO
                      zip: '80302'
                      country: US
                      phone: ''
                      verified: false
                      portal_customer_created_at: '2016-11-14T14:48:13-05:00'
                      portal_invite_last_sent_at: '2016-11-14T14:48:13-05:00'
                      portal_invite_last_accepted_at:
                      tax_exempt: false
                      vat_number: '012345678'
                    product:
                      id: 3792003
                      name: "$10 Basic Plan"
                      handle: basic
                      description: lorem ipsum
                      accounting_code: basic
                      price_in_cents: 1000
                      interval: 1
                      interval_unit: day
                      initial_charge_in_cents:
                      expiration_interval:
                      expiration_interval_unit: never
                      trial_price_in_cents:
                      trial_interval:
                      trial_interval_unit: month
                      initial_charge_after_trial: false
                      return_params: ''
                      request_credit_card: false
                      require_credit_card: false
                      created_at: '2016-03-24T13:38:39-04:00'
                      updated_at: '2016-11-03T13:03:05-04:00'
                      archived_at:
                      update_return_url: ''
                      update_return_params: ''
                      product_family:
                        id: 527890
                        name: Acme Projects
                        handle: billing-plans
                        accounting_code:
                        description: ''
                      public_signup_pages:
                      - id: 281054
                        url: https://general-goods.chargify.com/subscribe/kqvmfrbgd89q/basic
                      - id: 281240
                        url: https://general-goods.chargify.com/subscribe/dkffht5dxfd8/basic
                      - id: 282694
                        url: https://general-goods.chargify.com/subscribe/jwffwgdd95s8/basic
                      taxable: false
                      version_number: 7
                      product_price_point_name: Default
                    credit_card:
                      id: 10191713
                      payment_type: credit_card
                      first_name: Curtis
                      last_name: Test
                      masked_card_number: XXXX-XXXX-XXXX-1
                      card_type: bogus
                      expiration_month: 1
                      expiration_year: 2026
                      billing_address: 123 Anywhere Street
                      billing_address_2: ''
                      billing_city: Boulder
                      billing_state:
                      billing_country: ''
                      billing_zip: '80302'
                      current_vault: bogus
                      vault_token: '1'
                      customer_vault_token:
                      customer_id: 14714298
                    payment_type: credit_card
                    referral_code: w7kjc9
                    next_product_id:
                    coupon_use_count: 1
                    coupon_uses_allowed: 1
                    next_product_handle:
                    stored_credential_transaction_id: 125566112256688
                    dunning_communication_delay_enabled: true
                    dunning_communication_delay_time_zone: Eastern Time (US & Canada)
      '422':
        description: Unprocessable Entity (WebDAV)
        content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: array
                  items:
                    type: string
            examples:
              Example:
                value:
                  errors:
                  - 'Bank routing number: cannot be blank.'
                  - 'Bank account number: cannot be blank. '
    operationId: createSubscription
    description: "Full documentation on how subscriptions operate within Chargify
      can be located under the following topics:\n\n+ [Subscriptions Reference](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405577172749-Subscription-Introduction)\n+
      [Subscriptions Actions](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405510556557-Actions)\n+
      [Subscription Cancellation](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405510556557-Actions#initiate-cancellation)\n+
      [Subscription Reactivation](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404559291021-Reactivating-and-Resuming)\n+
      [Subscription Import](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404863655821-Imports)\n\nWhen
      creating a subscription, you must specify a product and a customer. Credit card
      details may be required, depending on the options for the Product being subscribed
      ([see Product Options](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405246782221#payment-method-settings)).\n\nThe
      product may be specified by `product_id` or by `product_handle` (API Handle).
      In similar fashion, to pass a particular product price point, you may either
      use `product_price_point_handle` or `product_price_point_id`.\n\nAn existing
      customer may be specified by a `customer_id` (ID within Chargify) or a `customer_reference`
      (unique value within your app that you have shared with Chargify via the reference
      attribute on a customer). You may also pass in an existing payment profile for
      that customer with `payment_profile_id`. A new customer may be created by providing
      `customer_attributes`.\n\nCredit card details may be required, depending on
      the options for the product being subscribed. The product can be specified by
      `product_id` or by `product_handle` (API Handle).\n\nIf you are creating a subscription
      with a payment profile, the attribute to send will be `credit_card_attributes`
      or `bank_account_attributes` for ACH and Direct Debit. That said, when you read
      the subscription after creation, we return the profile details under `credit_card`
      or `bank_account`.\n\n## Taxable Subscriptions\n\nIf your intent is to charge
      your subscribers tax via [Avalara Taxes](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405275711885-Avalara-VAT-Tax)
      or [Custom Taxes](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405069041549-Custom-Taxes),
      there are a few considerations to be made regarding collecting subscription
      data.\nFor subscribers to be eligible to be taxed, the following information
      for the `customer` object or `payment_profile` object must by supplied:\n\n+
      A subscription to a [taxable product](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405246782221-Product-Editing#tax-settings)\n+
      [Full valid billing or shipping address](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405356114317#full-address-required-for-taxable-subscriptions)
      to identify the tax locale\n+ The portion of the address that houses the [state
      information](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405356114317#required-state-format-for-taxable-subscriptions)
      of either adddress must adhere to the ISO standard of a 2-3 character limit/format.\n+
      The portion of the address that houses the [country information](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405356114317#required-country-format-for-taxable-subscriptions)
      must adhere to the ISO standard of a 2 character limit/format.\n\n## Subscription
      Request Examples\n\nThe subscription examples below will be split into two sections.\n\nThe
      first section, \"Subscription Customization\", will focus on passing different
      information with a subscription, such as components, calendar billing, and custom
      fields. These examples will presume you are using a secure `chargify_token`
      generated by Chargify.js.\n\nThe second section, \"Passing Payment Information\",
      will focus on passing payment information into Chargify. Please be aware that
      <b>collecting and sending Chargify raw card details requires PCI compliance
      on your end</b>; these examples are provided as guidance. If your business is
      not PCI compliant, we recommend using Chargify.js to collect credit cards or
      bank accounts.\n\n# Subscription Customization\n\n## With Components\n\nDifferent
      components require slightly different data. For example, quantity-based and
      on/off components accept `allocated_quantity`, while metered components accept
      `unit_balance`.\n\nWhen creating a subscription with a component, a `price_point_id`
      can be passed in along with the `component_id` to specify which price point
      to use. If not passed in, the default price point will be used.\n\nNote: if
      an invalid `price_point_id` is used, the subscription will still proceed but
      will use the component's default price point.\n\nComponents and their price
      points may be added by ID or by handle. See the example request body labeled
      \"Components By Handle (Quantity-Based)\"; the format will be the same for other
      component types.\n\n## With Coupon(s)\n\nPass an array of `coupon_codes`. See
      the example request body \"With Coupon\".\n\n## With Manual Invoice Collection\n\nThe
      `invoice` collection method works only on legacy Statement Architecture.\n\nOn
      Relationship Invoicing Architecture use the `remittance` collection method.\n\n##
      Prepaid Subscription\n\nA prepaid subscription can be created with the usual
      subscription creation parameters, specifying `prepaid` as the `payment_collection_method`
      and including a nested `prepaid_subscription_configuration`.\n\nAfter a prepaid
      subscription has been created, additional funds can be manually added to the
      prepayment account through the [Create Prepayment Endpoint](https://developers.chargify.com/docs/api-docs/7ec482de77ba7-create-prepayment).\n\nPrepaid
      subscriptions do not work on legacy Statement Architecture.\n\n## With Metafields\n\nMetafields
      can either attach to subscriptions or customers. Metafields are popuplated with
      the supplied metadata to the resource specified.\n\nIf the metafield doesn't
      exist yet, it will be created on-the-fly.\n\n## With Custom Pricing\n\nCustom
      pricing is pricing specific to the subscription in question.\nCreate a subscription
      with custom pricing by passing pricing information instead of a price point.\nFor
      a custom priced product, pass the custom_price object in place of `product_price_point_id`.
      For a custom priced component, pass the `custom_price` object within the component
      object.\nCustom prices and price points can exist in harmony on a subscription.\n\n#
      Passing Payment Information\n\n## Subscription with Chargify.js token\n\nThe
      `chargify_token` can be obtained using [chargify.js](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDI0-overview).
      The token represents payment profile attributes that were provided by the customer
      in their browser and stored at the payment gateway.\n\nThe `payment_type` attribute
      may either be `credit_card` or `bank_account`, depending on the type of payment
      method being added. If a bank account is being passed, the payment attributes
      should be changed to `bank_account_attributes`.\n\n```json\n{\n  \"subscription\":
      {\n    \"product_handle\": \"pro-plan\",\n    \"customer_attributes\": {\n      \"first_name\":
      \"Joe\",\n      \"last_name\": \"Smith\",\n      \"email\": \"j.smith@example.com\"\n
      \   },\n    \"credit_card_attributes\": {\n      \"chargify_token\": \"tok_cwhvpfcnbtgkd8nfkzf9dnjn\",\n
      \     \"payment_type\": \"credit_card\"\n    }\n  }\n}\n```\n\n## Subscription
      with vault token\n\nIf you already have a customer and card stored in your payment
      gateway, you may create a subscription with a `vault_token`.  Providing the
      last_four, card type and expiration date will allow the card to be displayed
      properly in the Chargify UI.\n\n```json\n{\n  \"subscription\": {\n    \"product_handle\":
      \"pro-plan\",\n    \"customer_attributes\": {\n      \"first_name\": \"Joe\",\n
      \     \"last_name\": \"Smith\",\n      \"email\": \"j.smith@example.com\"\n
      \   },\n    \"credit_card_attributes\": {\n      first_name: \"Joe,\n      last_name:
      \"Smith\",\n      card_type: \"visa\",\n      expiration_month: \"05\",\n      expiration_year:
      \"2025\",\n      last_four: \"1234\",\n      vault_token: \"12345abc\",\n      current_vault:
      \"braintree_blue\"\n  }\n}\n```\n\n## Subscription with Credit Card\n\n```json\n\"subscription\":
      {\n    \"product_handle\": \"basic\",\n    \"customer_attributes\": {\n      \"first_name\":
      \"Joe\",\n      \"last_name\": \"Blow\",\n      \"email\": \"joe@example.com\",\n
      \     \"zip\": \"02120\",\n      \"state\": \"MA\",\n      \"reference\": \"XYZ\",\n
      \     \"phone\": \"(617) 111 - 0000\",\n      \"organization\": \"Acme\",\n
      \     \"country\": \"US\",\n      \"city\": \"Boston\",\n      \"address_2\":
      null,\n      \"address\": \"123 Mass Ave.\"\n    },\n    \"credit_card_attributes\":
      {\n      \"last_name\": \"Smith\",\n      \"first_name\": \"Joe\",\n      \"full_number\":
      \"4111111111111111\",\n      \"expiration_year\": \"2021\",\n      \"expiration_month\":
      \"1\",\n      \"card_type\": \"visa\",\n      \"billing_zip\": \"02120\",\n
      \     \"billing_state\": \"MA\",\n      \"billing_country\": \"US\",\n      \"billing_city\":
      \"Boston\",\n      \"billing_address_2\": null,\n      \"billing_address\":
      \"123 Mass Ave.\"\n    }\n}\n```\n\n## Subscription with ACH as Payment Profile\n\n```json\n{\n
      \ \"subscription\": {\n    \"product_handle\": \"gold-product\",\n    \"customer_attributes\":
      {\n      \"first_name\": \"Joe\",\n      \"last_name\": \"Blow\",\n      \"email\":
      \"joe@example.com\",\n      \"zip\": \"02120\",\n      \"state\": \"MA\",\n
      \     \"reference\": \"XYZ\",\n      \"phone\": \"(617) 111 - 0000\",\n      \"organization\":
      \"Acme\",\n      \"country\": \"US\",\n      \"city\": \"Boston\",\n      \"address_2\":
      null,\n      \"address\": \"123 Mass Ave.\"\n    },\n    \"bank_account_attributes\":
      {\n      \"bank_name\": \"Best Bank\",\n      \"bank_routing_number\": \"021000089\",\n
      \     \"bank_account_number\": \"111111111111\",\n      \"bank_account_type\":
      \"checking\",\n      \"bank_account_holder_type\": \"business\",\n      \"payment_type\":
      \"bank_account\"\n    }\n  }\n}\n```\n\n## Subscription with PayPal payment
      profile\n\n### With the nonce from Braintree JS\n\n```json\n{ \"subscription\":
      {\n    \"product_handle\":\"test-product-b\",\n    \"customer_attributes\":
      {\n      \"first_name\":\"Amelia\",\n      \"last_name\":\"Johnson\",\n      \"email\":\"amelia@example.com\",\n
      \     \"organization\":\"My Awesome Company\"\n    },\n    \"payment_profile_attributes\":{\n
      \     \"paypal_email\": \"amelia@example.com\",\n      \"current_vault\": \"braintree_blue\",\n
      \     \"payment_method_nonce\":\"abc123\",\n      \"payment_type\":\"paypal_account\"\n
      \   }\n  }\n```\n\n\n### With the Braintree Customer ID as the vault token:\n\n```json\n{
      \"subscription\": {\n    \"product_handle\":\"test-product-b\",\n    \"customer_attributes\":
      {\n      \"first_name\":\"Amelia\",\n      \"last_name\":\"Johnson\",\n      \"email\":\"amelia@example.com\",\n
      \     \"organization\":\"My Awesome Company\"\n    },\n    \"payment_profile_attributes\":{\n
      \     \"paypal_email\": \"amelia@example.com\",\n      \"current_vault\": \"braintree_blue\",\n
      \     \"vault_token\":\"58271347\",\n      \"payment_type\":\"paypal_account\"\n
      \   }\n  }\n```\n\n## Subscription using GoCardless Bank Number\n\nThese examples
      creates a customer, bank account and mandate in GoCardless.\n\nFor more information
      on GoCardless, please view the following two resources:\n\n+ [Payment Profiles
      via API for GoCardless](https://developers.chargify.com/docs/api-docs/1f10a4f170405-create-payment-profile#gocardless)\n+
      [Full documentation on GoCardless](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404501889677)\n\n+
      [Using Chargify.js with GoCardless - minimal example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#minimal-example-with-direct-debit-gocardless-gateway)\n\n+
      [Using Chargify.js with GoCardless - full example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#full-example-with-direct-debit-gocardless-gateway)\n\n```json\n{\n
      \ \"subscription\": {\n    \"product_handle\": \"gold-product\",\n    \"customer_attributes\":
      {\n      \"first_name\": \"Jane\",\n      \"last_name\": \"Doe\",\n      \"email\":
      \"jd@chargify.test\"\n    },\n    \"bank_account_attributes\": {\n      \"bank_name\":
      \"Royal Bank of France\",\n      \"bank_account_number\": \"0000000\",\n      \"bank_routing_number\":
      \"0003\",\n      \"bank_branch_code\": \"00006\",\n      \"payment_type\": \"bank_account\",\n
      \     \"billing_address\": \"20 Place de la Gare\",\n      \"billing_city\":
      \"Colombes\",\n      \"billing_state\": \"Île-de-France\",\n      \"billing_zip\":
      \"92700\",\n      \"billing_country\": \"FR\"\n    }\n  }\n}\n```\n\n## Subscription
      using GoCardless IBAN Number\n\n```json\n{\n  \"subscription\": {\n    \"product_handle\":
      \"gold-product\",\n    \"customer_attributes\": {\n      \"first_name\": \"Jane\",\n
      \     \"last_name\": \"Doe\",\n      \"email\": \"jd@chargify.test\"\n    },\n
      \   \"bank_account_attributes\": {\n      \"bank_name\": \"French Bank\",\n
      \     \"bank_iban\": \"FR1420041010050500013M02606\",\n      \"payment_type\":
      \"bank_account\",\n      \"billing_address\": \"20 Place de la Gare\",\n      \"billing_city\":
      \"Colombes\",\n      \"billing_state\": \"Île-de-France\",\n      \"billing_zip\":
      \"92700\",\n      \"billing_country\": \"FR\"\n    }\n  }\n}\n```\n\n## Subscription
      using Stripe SEPA Direct Debit\n\nFor more information on Stripe Direct Debit,
      please view the following two resources:\n\n+ [Payment Profiles via API for
      Stripe SEPA Direct Debit](https://developers.chargify.com/docs/api-docs/1f10a4f170405-create-payment-profile#sepa-direct-debit)\n+
      [Full documentation on Stripe Direct Debit](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405050826765-Stripe-SEPA-and-BECS-Direct-Debit)\n\n+
      [Using Chargify.js with Stripe SEPA or BECS Direct Debit - minimal example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#minimal-example-with-sepa-or-becs-direct-debit-stripe-gateway)\n\n+
      [Using Chargify.js with Stripe SEPA Direct Debit - full example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#full-example-with-sepa-direct-debit-stripe-gateway)\n\n\n```json\n{\n
      \ \"subscription\": {\n    \"product_handle\": \"gold-product\",\n    \"customer_attributes\":
      {\n      \"first_name\": \"Jane\",\n      \"last_name\": \"Doe\",\n      \"email\":
      \"jd@chargify.test\"\n    },\n    \"bank_account_attributes\": {\n      \"bank_name\":
      \"Test Bank\",\n      \"bank_iban\": \"DE89370400440532013000\",\n      \"payment_type\":
      \"bank_account\"\n    }\n  }\n}\n```\n\n## Subscription using Stripe BECS Direct
      Debit\n\nFor more information on Stripe Direct Debit, please view the following
      two resources:\n\n+ [Payment Profiles via API for Stripe BECS Direct Debit](https://developers.chargify.com/docs/api-docs/1f10a4f170405-create-payment-profile#stripe-becs-direct-debit)\n+
      [Full documentation on Stripe Direct Debit](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405050826765-Stripe-SEPA-and-BECS-Direct-Debit)\n\n+
      [Using Chargify.js with Stripe SEPA or BECS Direct Debit - minimal example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#minimal-example-with-sepa-or-becs-direct-debit-stripe-gateway)\n\n+
      [Using Chargify.js with Stripe BECS Direct Debit - full example](https://developers.chargify.com/docs/developer-docs/ZG9jOjE0NjAzNDIy-examples#full-example-with-becs-direct-debit-stripe-gateway)\n\n\n```json\n{\n
      \ \"subscription\": {\n    \"product_handle\": \"gold-product\",\n    \"customer_attributes\":
      {\n      \"first_name\": \"Jane\",\n      \"last_name\": \"Doe\",\n      \"email\":
      \"jd@chargify.test\"\n    },\n    \"bank_account_attributes\": {\n      \"bank_name\":
      \"Test Bank\",\n      \"bank_branch_code\": \"000000\",\n      \"bank_account_number\":
      \"000123456\",\n      \"payment_type\": \"bank_account\"\n    }\n  }\n}\n```\n\n##
      3D Secure - Stripe\n\nIt may happen that a payment needs 3D Secure Authentication
      when the subscription is created; this is referred to in our help docs as a
      [post-authentication flow](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405177432077#psd2-flows-pre-authentication-and-post-authentication).
      The server returns `422 Unprocessable Entity` in this case with the following
      response:\n\n```json\n{\n  \"errors\": [\n    \"Your card was declined. This
      transaction requires 3D secure authentication.\"\n  ],\n  \"gateway_payment_id\":
      \"pi_1F0aGoJ2UDb3Q4av7zU3sHPh\",\n  \"description\": \"This card requires 3D
      secure authentication. Redirect the customer to the URL from the action_link
      attribute to authenticate. Attach callback_url param to this URL if you want
      to be notified about the result of 3D Secure authentication. Attach redirect_url
      param to this URL if you want to redirect a customer back to your page after
      3D Secure authentication. Example: https://mysite.chargify.com/3d-secure/pi_1FCm4RKDeye4C0XfbqquXRYm?one_time_token_id=128&callback_url=https://localhost:4000&redirect_url=https://yourpage.com
      will do a POST request to https://localhost:4000 after payment is authenticated
      and will redirect a customer to https://yourpage.com after 3DS authentication.\",\n
      \ \"action_link\": \"http://acme.chargify.com/3d-secure/pi_1F0aGoJ2UDb3Q4av7zU3sHPh?one_time_token_id=242\"\n}\n```\n\nTo
      let the customer go through 3D Secure Authentication, they need to be redirected
      to the URL specified in `action_link`.\nOptionally, you can specify `callback_url`
      parameter in the `action_link` URL if you’d like to be notified about the result
      of 3D Secure Authentication. The `callback_url` will return the following information:\n\n-
      whether the authentication was successful (`success`)\n- the gateway ID for
      the payment (`gateway_payment_id`)\n- the subscription ID (`subscription_id`)\n\nLastly,
      you can also specify a `redirect_url` within the `action_link` URL if you’d
      like to redirect a customer back to your site.\n\nIt is not possible to use
      `action_link` in an iframe inside a custom application. You have to redirect
      the customer directly to the `action_link`, then, to be notified about the result,
      use `redirect_url` or `callback_url`.\n\nThe final URL that you send a customer
      to to complete 3D Secure may resemble the following, where the first half is
      the `action_link` and the second half contains a `redirect_url` and `callback_url`:
      `https://mysite.chargify.com/3d-secure/pi_1FCm4RKDeye4C0XfbqquXRYm?one_time_token_id=128&callback_url=https://localhost:4000&redirect_url=https://yourpage.com`\n\n##
      3D Secure - Checkout\n\nIt may happen that a payment needs 3D Secure Authentication
      when the subscription is created; this is referred to in our help docs as a
      [post-authentication flow](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405177432077#psd2-flows-pre-authentication-and-post-authentication).
      The server returns `422 Unprocessable Entity` in this case with the following
      response:\n\n```json\n{\n  \"errors\": [\n    \"Your card was declined. This
      transaction requires 3D secure authentication.\"\n  ],\n  \"gateway_payment_id\":
      \"pay_6gjofv7dlyrkpizlolsuspvtiu\",\n  \"description\": \"This card requires
      3D secure authentication. Redirect the customer to the URL from the action_link
      attribute to authenticate. Attach callback_url param to this URL if you want
      to be notified about the result of 3D Secure authentication. Attach redirect_url
      param to this URL if you want to redirect a customer back to your page after
      3D Secure authentication. Example: https://mysite.chargify.com/3d-secure/pay_6gjofv7dlyrkpizlolsuspvtiu?one_time_token_id=123&callback_url=https://localhost:4000&redirect_url=https://yourpage.com
      will do a POST request to https://localhost:4000 after payment is authenticated
      and will redirect a customer to https://yourpage.com after 3DS authentication.\",\n
      \ \"action_link\": \"http://mysite.chargify.com/3d-secure/pay_6gjofv7dlyrkpizlolsuspvtiu?one_time_token_id=123\"\n}\n```\n\nTo
      let the customer go through 3D Secure Authentication, they need to be redirected
      to the URL specified in `action_link`.\nOptionally, you can specify `callback_url`
      parameter in the `action_link` URL if you’d like to be notified about the result
      of 3D Secure Authentication. The `callback_url` will return the following information:\n\n-
      whether the authentication was successful (`success`)\n- the gateway ID for
      the payment (`gateway_payment_id`)\n- the subscription ID (`subscription_id`)\n\nLastly,
      you can also specify a `redirect_url` parameter within the `action_link` URL
      if you’d like to redirect a customer back to your site.\n\nIt is not possible
      to use `action_link` in an iframe inside a custom application. You have to redirect
      the customer directly to the `action_link`, then, to be notified about the result,
      use `redirect_url` or `callback_url`.\n\nThe final URL that you send a customer
      to complete 3D Secure may resemble the following, where the first half is the
      `action_link` and the second half contains a `redirect_url` and `callback_url`:
      `https://mysite.chargify.com/3d-secure/pay_6gjofv7dlyrkpizlolsuspvtiu?one_time_token_id=123&callback_url=https://localhost:4000&redirect_url=https://yourpage.com`\n\n###
      Example Redirect Flow\n\nYou may wish to redirect customers to different pages
      depending on whether their SCA was performed successfully. Here's an example
      flow to use as a reference:\n\n1. Create a subscription via API; it requires
      3DS\n2. You receive a `gateway_payment_id` in the `action_link` along other
      params in the response.\n3. Use this `gateway_payment_id` to, for example, connect
      with your internal resources or generate a session_id\n4. Include 1 of those
      attributes inside the `callback_url` and `redirect_url` to be aware which “session”
      this applies to\n5. Redirect the customer to the `action_link` with `callback_url`
      and `redirect_url` applied\n6. After the customer finishes 3DS authentication,
      we let you know the result by making a request to applied `callback_url`.\n7.
      After that, we redirect the customer to the `redirect_url`; at this point the
      result of authentication is known\n8. Optionally, you can use the applied \"msg\"
      param in the `redirect_url` to determine whether it was successful or not\n\n###
      Example Redirect Flow\n\nYou may wish to redirect customers to different pages
      depending on whether their SCA was performed successfully. Here's an example
      flow to use as a reference:\n\n1. Create a subscription via API; it requires
      3DS\n2. You receive a `gateway_payment_id` in the `action_link` along other
      params in the response.\n3. Use this `gateway_payment_id` to, for example, connect
      with your internal resources or generate a session_id\n4. Include 1 of those
      attributes inside the `callback_url` and `redirect_url` to be aware which “session”
      this applies to\n5. Redirect the customer to the `action_link` with `callback_url`
      and `redirect_url` applied\n6. After the customer finishes 3DS authentication,
      we let you know the result by making a request to applied `callback_url`.\n7.
      After that, we redirect the customer to the `redirect_url`; at this point the
      result of authentication is known\n8. Optionally, you can use the applied \"msg\"
      param in the `redirect_url` to determine whether it was successful or not\n\n##
      Subscriptions Import\n\nSubscriptions can be “imported” via the API to handle
      the following scenarios:\n\n+ You already have existing subscriptions with specific
      start and renewal dates that you would like to import to Chargify\n+ You already
      have credit cards stored in your provider’s vault and you would like to create
      subscriptions using those tokens\n\nBefore importing, you should have already
      set up your products to match your offerings. Then, you can create Subscriptions
      via the API just like you normally would, but using a few special attributes.\n\nFull
      documentation on how import Subscriptions using the **import tool** in the Chargify
      UI can be located [here](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404863655821#imports-0-0).\n\n###
      Important Notices and Disclaimers regarding Imports\n\nBefore performing a bulk
      import of subscriptions via the API, we suggest reading the [Subscriptions Import](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404863655821#important-notices-and-disclaimers)
      instructions to understand the repurcussions of a large import.\n\n### Subscription
      Input Attributes\n\nThe following _additional_ attributes to the subscription
      input attributes make imports possible: `next_billing_at`, `previous_billing_at`,
      and `import_mrr`.\n\n### Current Vault\n\nIf you are using a Legacy gateway
      such as \"eWAY Rapid (Legacy)\" or \"Stripe (Legacy)\" then please contact Support
      for further instructions on subscription imports.\n\n### Braintree Blue (Braintree
      v2) Imports\n\nBraintree Blue is Braintree’s newer (version 2) API. For this
      gateway, please provide the `vault_token` parameter with the value from Braintree’s
      “Customer ID” rather than the “Payment Profile Token”. At this time we do not
      use `current_vault_token` with the Braintree Blue gateway, and we only support
      a single payment profile per Braintree Customer.\n\nWhen importing PayPal type
      payment profiles, please set `payment_type` to `paypal_account`.\n\n### Stripe
      ACH Imports\n\nIf the bank account has already been verified, currently you
      will need to create the customer, create the payment profile in Chargify - setting
      verified=true, then create a subscription using the customer_id and payment_profile_id.\n\n###
      Webhooks During Import\n\nIf no `next_billing_at` is provided, webhooks will
      be fired as normal. If you do set a future `next_billing_at`, only a subset
      of the webhooks are fired when the subscription is created. Keep reading for
      more information as to what webhooks will be fired under which scenarios.\n\n####
      Successful creation with Billing Date\n\nScenario: If `next_billing_at` provided\n\n+
      `signup_success`\n+ `billing_date_change`\n\n#### Successful creation without
      Billing Date\n\nScenario: If no `next_billing_at` provided\n\n+ `signup_success`\n+
      `payment_success`\n\n#### Unsuccessful creation\n\nScenario: If card can’t be
      charged, and no `next_billing_at` provided\n\n+ signup_failure\n\n#### Webhooks
      fired when next_billing_at is reached:\n\n+ `renewal_success or renewal_failure`\n+
      `payment_success or payment_failure`\n\n### Date and Time Formats\n\nWe will
      attempt to parse any string you send as the value of next_billing_at in to a
      date or time. For best results, use a known format like described in “Date and
      Time Specification” of RFC 2822 or ISO 8601 .\n\nThe following are all equivalent
      and will work as input to `next_billing_at`:\n\n```\nAug 06 2030 11:34:00 -0400\nAug
      06 2030 11:34 -0400\n2030-08-06T11:34:00-04:00\n8/6/2030 11:34:00 EDT\n8/6/2030
      8:34:00 PDT\n2030-08-06T15:34:00Z\n```\nYou may also pass just a date, in which
      case we will assume the time to be noon\n\n```\n2010-08-06\n```\n\n## Subscription
      Hierarchies & WhoPays\n\nWhen subscription groups were first added to our Relationship
      Invoicing architecture, to group together invoices for related subscriptions
      and allow for complex customer hierarchies and WhoPays scenarios, they were
      designed to consist of a primary and a collection of group members. The primary
      would control many aspects of the group, such as when the consolidated invoice
      is generated. As of today, groups still function this way.\n\nIn the future,
      the concept of a \"primary\" will be removed in order to offer more flexibility
      into group management and reduce confusion concerning what actions must be done
      on a primary level, rather than a member level.\n\nWe have introduced a two
      scheme system as a bridge between these two group organizations. Scheme 1, which
      is relevant to all subscription groups today, marks the group as being \"ruled\"
      by a primary.\n\nWhen reading a subscription via API, they will return a top-level
      attribute called `group`, which will denote which scheme is being used. At this
      time, the `scheme` attribute will always be 1.\n\n### Subscription in a Customer
      Hierarchy\n\nFor sites making use of the [Relationship Billing](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405078794253-Introduction-to-Invoices)
      and [Customer Hierarchy](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404900384141)
      features, it is possible to create subscriptions within a customer hierarchy.
      \ This can be achieved through the API by passing group parameters in the **Create
      Subscription** request.\n\n+ The `group` parameters are optional and consist
      of the required `target` and optional `billing` parameters.\n\nWhen the `target`
      parameter specifies a customer that is already part of a hierarchy, the new
      subscription will become a member of the customer hierarchy as well.  If the
      target customer is not part of a hierarchy, a new customer hierarchy will be
      created and both the target customer and the new subscription will become part
      of the hierarchy with the specified target customer set as the responsible payer
      for the hierarchy's subscriptions.\n\nRather than specifying a customer, the
      `target` parameter could instead simply have a value of `self` which indicates
      the subscription will be paid for not by some other customer, but by the subscribing
      customer.  This will be true whether the customer is being created new, is already
      part of a hierarchy, or already exists outside a hierarchy.  A valid payment
      method must also be specified in the subscription parameters.\n\nNote that when
      creating subscriptions in a customer hierarchy, if the customer hierarchy does
      not already have a payment method, passing valid credit card attributes in the
      subscription parameters will also result in the payment method being established
      as the default payment method for the customer hierarchy irrespective of the
      responsible payer.\n\nThe optional `billing` parameters specify how some aspects
      of the billing for the new subscription should be handled.  Rather than capturing
      payment immediately, the `accrue` parameter can be included so that the new
      subscription charges accrue until the next assessment date.  Regarding the date,
      the `align_date` parameter can be included so that the billing date of the new
      subscription matches up with the default subscription group in the customer
      hierarchy.  When choosing to align the dates, the `prorate` parameter can also
      be specified so that the new subscription charges are prorated based on the
      billing period of the default subscription group in the customer hierarchy also.\n\n###
      Subscription in a Subscription Group\n\nFor sites making use of [Relationship
      Billing](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405078794253-Introduction-to-Invoices)
      it may be desireable to create a subscription as part of a [subscription group](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405577356173)
      in order to rely on [invoice consolidation](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404980119949).
      This can be achieved through the API by passing group parameters in the Create
      Subscription request.  The `group` parameters are optional and consist of the
      required `target` and optional `billing` parameters.\n\nThe `target` parameters
      specify an existing subscription with which the newly created subscription should
      be grouped.  If the target subscription is already part of a group, the new
      subscription will become a member of the group as well.  If the target subscription
      is not part of a group, a new group will be created and both the target and
      the new subscription will become part of the group with the target as the group's
      primary subscription.\n\nThe optional `billing` parameters specify how some
      aspects of the billing for the new subscription should be handled.  Rather than
      capturing payment immediately, the `accrue` parameter can be included so that
      the new subscription charges accrue until the next assessment date.  Regarding
      the date, the `align_date` parameter can be included so that the billing date
      of the new subscription matches up with the target subscription.  When choosing
      to align the dates, the `prorate` parameter can also be specified so that the
      new subscription charges are prorated based on the billing period of the target
      subscription also.\n\n## Providing Agreement Acceptance Params\n\nIt is possible
      to provide a proof of customer's acceptance of terms and policies.\nWe will
      be storing this proof in case it might be required (i.e. chargeback).\nCurrently,
      we already keep it for subscriptions created via Public Signup Pages.\nIn order
      to create a subscription with the proof of agreement acceptance, you must provide
      additional parameters `agreement acceptance` with `ip_address` and at least
      one url to the policy that was accepted: `terms_url` or `privacy_policy_url`.
      Additional urls that can be provided: `return_refund_policy_url`, `delivery_policy_url`
      and \n`secure_checkout_policy_url`.\n\n```json\n  \"subscription\": {\n    \"product_handle\":
      \"gold-product\",\n    \"customer_attributes\": {\n      \"first_name\": \"Jane\",\n
      \     \"last_name\": \"Doe\",\n      \"email\": \"jd@chargify.test\"\n    },\n
      \   \"agreement_acceptance\": {\n      \"ip_address\": \"1.2.3.4\",\n      \"terms_url\":
      \"https://terms.url\",\n      \"privacy_policy_url\": \"https://privacy_policy.url\",\n
      \     \"return_refund_policy_url\": \"https://return_refund_policy.url\",\n
      \     \"delivery_policy_url\": \"https://delivery_policy.url\",\n      \"secure_checkout_policy_url\":
      \"https://secure_checkout_policy.url\"\n    }\n  }\n}\n```\n\n**For Maxio Payments
      subscriptions, the agreement acceptance params are required, with at least terms_url
      provided.**\n\n## Providing ACH Agreement params\n\nIt is also possible to provide
      a proof that a customer authorized ACH agreement terms.\nThe proof will be stored
      and the email will be sent to the customer with a copy of the terms (if enabled).\nIn
      order to create a subscription with the proof of authorized ACH agreement terms,
      you must provide the additional parameter `ach_agreement` with the following
      nested parameters: `agreement_terms`, `authorizer_first_name`, `authorizer_last_name`
      and `ip_address`.\nEach of them is required.\n\n```json\n  \"subscription\":
      {\n    \"product_handle\": \"gold-product\",\n    \"customer_attributes\": {\n
      \     \"first_name\": \"Jane\",\n      \"last_name\": \"Doe\",\n      \"email\":
      \"jd@chargify.test\"\n    },\n    \"bank_account_attributes\": {\n      \"bank_name\":
      \"Test Bank\",\n      \"bank_routing_number\": \"021000089\",\n      \"bank_account_number\":
      \"111111111111\",\n      \"bank_account_type\": \"checking\",\n      \"bank_account_holder_type\":
      \"business\",\n      \"payment_type\": \"bank_account\"\n    },\n    \"ach_agreement\":
      {\n      \"agreement_terms\": \"ACH agreement terms\",\n      \"authorizer_first_name\":
      \"Jane\",\n      \"authorizer_last_name\": \"Doe\",\n      \"ip_address\": \"1.2.3.4\"\n
      \   }\n  }\n```"
    requestBody:
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Create-Subscription-Request"
          examples:
            Basic:
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                    zip: '02120'
                    state: MA
                    reference: XYZ
                    phone: "(617) 111 - 0000"
                    organization: Acme
                    country: US
                    city: Boston
                    address_2:
                    address: 123 Mass Ave.
                  credit_card_attributes:
                    last_name: Smith
                    first_name: Joe
                    full_number: '4111111111111111'
                    expiration_year: '2021'
                    expiration_month: '1'
                    card_type: visa
                    billing_zip: '02120'
                    billing_state: MA
                    billing_country: US
                    billing_city: Boston
                    billing_address_2:
                    billing_address: 123 Mass Ave.
            Calendar Billing:
              value:
                subscription:
                  product_handle: gold
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                    zip: '02120'
                    state: MA
                    reference: XYZ
                    phone: "(617) 111 - 0000"
                    organization: Acme
                    country: US
                    city: Boston
                    address_2:
                    address: 123 Mass Ave.
                  calendar_billing:
                    snap_day: 1
                    calendar_billing_first_charge: immediate
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
            Components (Metered):
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe1049am@example.com
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                  components:
                  - component_id: 195268
                    unit_balance: 20
            Components (On/Off):
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                  components:
                  - component_id: 2500
                    enabled: true
            Components (Quantity-Based):
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Alysa
                    last_name: Test
                    email: alysa@example.com
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                  components:
                  - component_id: 1
                    allocated_quantity: 18
                    price_point_id: 3
            Components By Handle (Quantity-Based):
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                  components:
                  - component_id: handle:my-handle
                    price_point_id: handle:special-offer
                    allocated_quantity: 14
            With Coupon:
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                  coupon_code: SUB111
            Grouped:
              value:
                subscription:
                  product_handle: product-xyz
                  customer_id: 43693465
                  payment_profile_id: 74404848
                  group:
                    target:
                      type: customer
                      id: 43693465
                    billing:
                      align_date: true
                      prorate: false
                      accrue: false
            In Hierarchy (not Group):
              value:
                subscription:
                  product_handle: test_product
                  customer_attributes:
                    first_name: Child who pays for self
                    last_name: "(No subscription group)"
                    email: joe@example.com
                    parent_id: '23554144'
                  group: false
            Import as Canceled:
              value:
                subscription:
                  product_handle: product
                  canceled_at: '2021-02-25T12:00:00-04:00'
                  cancellation_message: Too expensive
                  reason_code: expensive
                  activated_at: '2021-01-17T12:00:00-04:00'
                  customer_attributes:
                    first_name: Joe
                    last_name: Test
                    email: joetest@example.com
                  bank_account_attributes:
                    bank_name: My Bank
                    current_vault: stripe
                    vault_token: '1234'
            Import With Future Billing Date:
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                  next_billing_at: '2020-06-01'
            Import Authorize.Net ACH:
              value:
                subscription:
                  product_handle: product
                  next_billing_at: '2020-08-29'
                  customer_attributes:
                    first_name: John
                    last_name: Doe
                    email: john.doe@example.com
                  bank_account_attributes:
                    bank_name: My Bank
                    current_vault: authorizenet
                    vault_token: '1234'
                    customer_vault_token: '5678'
            Import Stripe ACH:
              value:
                subscription:
                  product_handle: product
                  next_billing_at: '2020-08-29'
                  customer_attributes:
                    first_name: John
                    last_name: Doe
                    email: john.doe@example.com
                  bank_account_attributes:
                    bank_name: My Bank
                    current_vault: stripe_connect
                    vault_token: cus_abc123
            Metadata (Subscription-Level):
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                  metafields:
                    color: blue
                    comments: Thanks!
            Metadata (Customer-Level):
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                    metafields:
                      nickname: Boris
                      language: Spanish
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
            With Offer:
              value:
                subscription:
                  offer_id: handle:godfather
                  customer_attributes:
                    first_name: Alysa
                    last_name: Test
                    email: alysa@example.com
                  credit_card_attributes:
                    full_number: '1'
                    expiration_month: '10'
                    expiration_year: '2020'
            Prepaid Subscription:
              value:
                subscription:
                  product_handle: basic
                  customer_id: 12345
                  payment_profile_id: 6789
                  payment_collection_method: prepaid
                  prepaid_subscription_configuration:
                    initial_funding_amount_in_cents: 10000
                    replenish_to_amount_in_cents: 6000
                    auto_replenish: true
                    replenish_threshold_amount_in_cents: 5000
            With Referral Code:
              value:
                subscription:
                  product_handle: product-handle
                  ref: 1q2w3e
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
            With Custom Pricing:
              value:
                subscription:
                  product_id: string
                  custom_price:
                    handle: custom-price
                    price_in_cents: 9900
                    interval: 1
                    interval_unit: month
                  components:
                  - component_id: 20
                    allocated_quantity: 10
                    custom_price:
                      pricing_scheme: stairstep
                      prices:
                      - unit_price: '5'
                        starting_quantity: '1'
                        ending_quantity: '15'
                      - unit_price: '2'
                        starting_quantity: '16'
                  - component_id: 10
                    enabled: true
                    custom_price:
                      prices:
                      - unit_price: '1'
                        starting_quantity: '1'
            With Agreement Acceptance:
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                  credit_card_attributes:
                    chargify_token: tok_cwhvpfcnbtgkd8nfkzf9dnjn
                  agreement_acceptance:
                    ip_address: 1.2.3.4
                    terms_url: https://terms.url
                    privacy_policy_url: https://privacy_policy.url
                    return_refund_policy_url: https://return_refund_policy.url
                    delivery_policy_url: https://delivery_policy_.url
                    secure_checkout_policy_url: https://secure_checkout_policy.url
            With ACH Agreement:
              value:
                subscription:
                  product_handle: basic
                  customer_attributes:
                    first_name: Joe
                    last_name: Blow
                    email: joe@example.com
                  bank_account_attributes:
                    bank_name: Test Bank
                    bank_routing_number: '021000089'
                    bank_account_number: '111111111111'
                    bank_account_type: checking
                    bank_account_holder_type: business
                    payment_type: bank_account
                  ach_agreement:
                    agreement_terms: ACH agreement terms
                    authorizer_first_name: Jane
                    authorizer_last_name: Doe
                    ip_address: 1.2.3.4
  get:
    summary: List Subscriptions
    tags:
    - Subscriptions
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Subscription-Response"
    operationId: listSubscriptions
    x-operation-settings:
      collectParameters: true
    description: |-
      This method will return an array of subscriptions from a Site. Pay close attention to query string filters and pagination in order to control responses from the server.

      ## Search for a subscription

      Use the query strings below to search for a subscription using the criteria available. The return value will be an array.

      ## Self-Service Page token

      Self-Service Page token for the subscriptions is not returned by default. If this information is desired, the include[]=self_service_page_token parameter must be provided with the request.
    parameters:
    - "$ref": "#/components/parameters/page"
    - "$ref": "#/components/parameters/per-page"
    - name: state
      in: query
      schema:
        "$ref": "#/components/schemas/Subscription-State"
      description: The current state of the subscription
    - name: product
      in: query
      schema:
        type: integer
      description: The product id of the subscription. (Note that the product handle
        cannot be used.)
    - name: product_price_point_id
      in: query
      schema:
        type: integer
      description: The ID of the product price point. If supplied, product is required
    - name: coupon
      in: query
      schema:
        type: integer
      description: The numeric id of the coupon currently applied to the subscription.
        (This can be found in the URL when editing a coupon. Note that the coupon
        code cannot be used.)
    - name: date_field
      in: query
      schema:
        "$ref": "#/components/schemas/List-Subscriptions-Date-Field"
      description: 'The type of filter you''d like to apply to your search.  Allowed
        Values: , current_period_ends_at, current_period_starts_at, created_at, activated_at,
        canceled_at, expires_at, trial_started_at, trial_ended_at, updated_at'
    - name: start_date
      in: query
      schema:
        type: string
        format: date
      description: The start date (format YYYY-MM-DD) with which to filter the date_field.
        Returns subscriptions with a timestamp at or after midnight (12:00:00 AM)
        in your site’s time zone on the date specified.
      example: '2022-07-01'
    - name: end_date
      in: query
      schema:
        type: string
        format: date
      description: The end date (format YYYY-MM-DD) with which to filter the date_field.
        Returns subscriptions with a timestamp up to and including 11:59:59PM in your
        site’s time zone on the date specified.
      example: '2022-08-01'
    - name: start_datetime
      in: query
      schema:
        type: string
        format: date
      description: The start date and time (format YYYY-MM-DD HH:MM:SS) with which
        to filter the date_field. Returns subscriptions with a timestamp at or after
        exact time provided in query. You can specify timezone in query - otherwise
        your site's time zone will be used. If provided, this parameter will be used
        instead of start_date.
      example: '2022-07-01 09:00:05'
    - name: end_datetime
      in: query
      schema:
        type: string
        format: date-time
      description: The end date and time (format YYYY-MM-DD HH:MM:SS) with which to
        filter the date_field. Returns subscriptions with a timestamp at or before
        exact time provided in query. You can specify timezone in query - otherwise
        your site's time zone will be used. If provided, this parameter will be used
        instead of end_date.
      example: '2022-08-01 10:00:05'
    - name: metadata
      in: query
      schema:
        additionalProperties: true
      style: deepObject
      explode: true
      description: The value of the metadata field specified in the parameter
    - "$ref": "#/components/parameters/sort-direction"
    - schema:
        "$ref": "#/components/schemas/List-Subscriptions-Sort"
      in: query
      name: sort
      description: The attribute by which to sort
