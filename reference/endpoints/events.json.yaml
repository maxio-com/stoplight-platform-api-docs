---
"/events.json":
  get:
    summary: List Events
    tags:
    - Events
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: array
              description: ''
              minItems: 1
              uniqueItems: true
              items:
                type: object
                required:
                - event
                properties:
                  event:
                    type: object
                    properties:
                      id:
                        type: number
                      key:
                        type: string
                        minLength: 1
                      message:
                        type: string
                        minLength: 1
                      subscription_id:
                        type: number
                      created_at:
                        type: string
                        minLength: 1
                      event_specific_data:
                        type: object
                        properties:
                          previous_subscription_state:
                            type: string
                            minLength: 1
                          new_subscription_state:
                            type: string
                            minLength: 1
                        required:
                        - previous_subscription_state
                        - new_subscription_state
                        nullable: true
                    required:
                    - id
                    - key
                    - message
                    - subscription_id
                    - created_at
                    - event_specific_data
              x-examples:
                example-1:
                - event:
                    id: 343087780
                    key: subscription_state_change
                    message: State changed on Test subscription to Monthly Product
                      from active to past_due
                    subscription_id: 14950962
                    created_at: '2016-10-27T16:42:22-04:00'
                    event_specific_data:
                      previous_subscription_state: active
                      new_subscription_state: past_due
                - event:
                    id: 343087742
                    key: billing_date_change
                    message: Billing date changed on Test's subscription to Monthly
                      Product from 11/27/2016 to 10/27/2016
                    subscription_id: 14950962
                    created_at: '2016-10-27T16:42:19-04:00'
                    event_specific_data:
                - event:
                    id: 343085267
                    key: statement_closed
                    message: Statement 79401838 closed (but not settled) for Test's
                      subscription to ANNUAL product
                    subscription_id: 14950975
                    created_at: '2016-10-27T16:40:40-04:00'
                    event_specific_data:
            examples:
              Example:
                value:
                - event:
                    id: 343087780
                    key: subscription_state_change
                    message: State changed on Test subscription to Monthly Product
                      from active to past_due
                    subscription_id: 14950962
                    created_at: '2016-10-27T16:42:22-04:00'
                    event_specific_data:
                      previous_subscription_state: active
                      new_subscription_state: past_due
                - event:
                    id: 343087742
                    key: billing_date_change
                    message: Billing date changed on Test's subscription to Monthly
                      Product from 11/27/2016 to 10/27/2016
                    subscription_id: 14950962
                    created_at: '2016-10-27T16:42:19-04:00'
                    event_specific_data:
                - event:
                    id: 343085267
                    key: statement_closed
                    message: Statement 79401838 closed (but not settled) for Test's
                      subscription to ANNUAL product
                    subscription_id: 14950975
                    created_at: '2016-10-27T16:40:40-04:00'
                    event_specific_data:
                - event:
                    id: 4481
                    key: custom_field_value_change
                    message: Custom field (Extra support included) changed for Subscription
                      117 from 'Yes' to 'No'.
                    subscription_id: 117
                    customer_id:
                    created_at: '2022-03-24T07:55:06-04:00'
                    event_specific_data:
                      event_type: updated
                      metafield_name: Extra support included
                      metafield_id: 2
                      old_value: 'Yes'
                      new_value: 'No'
                      resource_type: Subscription
                      resource_id: 117
          application/xml:
            schema:
              type: object
          multipart/form-data:
            schema:
              type: array
              items: {}
    operationId: listEvents
    description: |-
      ## Events Intro

      Chargify Events include various activity that happens around a Site. This information is **especially** useful to track down issues that arise when subscriptions are not created due to errors.

      Within the Chargify UI, "Events" are referred to as "Site Activity".  Full documentation on how to record view Events / Site Activty in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139).

      ## List Events for a Site

      This method will retrieve a list of events for a site. Use query string filters to narrow down results. You may use the `key` filter as part of your query string to narrow down results.

      ### Legacy Filters

      The following keys are no longer supported.

      + `payment_failure_recreated`
      + `payment_success_recreated`
      + `renewal_failure_recreated`
      + `renewal_success_recreated`
      + `zferral_revenue_post_failure` - (Specific to the deprecated Zferral integration)
      + `zferral_revenue_post_success` - (Specific to the deprecated Zferral integration)

      ## Event Specific Data

      Event Specific Data

      Each event type has its own `event_specific_data` specified.

      Here’s an example event for the `subscription_product_change` event:

      ```
      {
          "event": {
              "id": 351,
              "key": "subscription_product_change",
              "message": "Product changed on Marky Mark's subscription from 'Basic' to 'Pro'",
              "subscription_id": 205,
              "event_specific_data": {
                  "new_product_id": 3,
                  "previous_product_id": 2
              },
              "created_at": "2012-01-30T10:43:31-05:00"
          }
      }
      ```

      Here’s an example event for the `subscription_state_change` event:

      ```
       {
           "event": {
               "id": 353,
               "key": "subscription_state_change",
               "message": "State changed on Marky Mark's subscription to Pro from trialing to active",
               "subscription_id": 205,
               "event_specific_data": {
                   "new_subscription_state": "active",
                   "previous_subscription_state": "trialing"
               },
               "created_at": "2012-01-30T10:43:33-05:00"
           }
       }
      ```
    parameters:
    - schema:
        type: integer
      in: query
      name: page
      description: Result records are organized in pages. By default, the first page
        of results is displayed. The page parameter specifies a page number of results
        to fetch. You can start navigating through the pages to consume the results.
        You do this by passing in a page parameter. Retrieve the next page by adding
        ?page=2 to the query string. If there are no results to return, then an empty
        result set will be returned.
    - schema:
        type: integer
        default: 20
        maximum: 200
      in: query
      name: per_page
      description: This parameter indicates how many records to fetch in each request.
        Default value is 20. The maximum allowed values is 200; any per_page value
        over 200 will be changed to 200.
    - schema:
        type: integer
      in: query
      name: since_id
    - schema:
        type: integer
      in: query
      name: max_id
    - schema:
        type: string
        enum:
        - asc
        - desc
        default: desc
      in: query
      name: direction
    - schema:
        type: string
        enum:
        - account_transaction_changed
        - billing_date_change
        - component_allocation_change
        - customer_update
        - customer_create
        - dunning_step_reached
        - expiration_date_change
        - expiring_card
        - metered_usage
        - payment_success
        - payment_success_recreated
        - payment_failure
        - payment_failure_recreated
        - refund_failure
        - refund_success
        - renewal_success
        - renewal_success_recreated
        - renewal_failure
        - signup_success
        - signup_failure
        - statement_closed
        - statement_settled
        - subscription_bank_account_update
        - subscription_deletion
        - subscription_paypal_account_update
        - subscription_product_change
        - subscription_state_change
        - trial_end_notice
        - upgrade_downgrade_success
        - upgrade_downgrade_failure
        - upcoming_renewal_notice
        - custom_field_value_change
        - subscription_prepayment_account_balance_changed
        - subscription_service_credit_account_balance_changed
        example: filter=custom_field_value_change
      in: query
      name: filter
      description: 'You can pass multiple event keys after comma. Example: /events.json?filter=signup_success,payment_success'
    - schema:
        type: string
        enum:
        - created_at
      in: query
      name: date_field
      description: The type of filter you would like to apply to your search.
    - schema:
        type: string
      in: query
      name: start_date
      description: The start date (format YYYY-MM-DD) with which to filter the date_field.
        Returns components with a timestamp at or after midnight (12:00:00 AM) in
        your site’s time zone on the date specified.
    - schema:
        type: string
      in: query
      name: end_date
      description: The end date (format YYYY-MM-DD) with which to filter the date_field.
        Returns components with a timestamp up to and including 11:59:59PM in your
        site’s time zone on the date specified.
    - schema:
        type: string
      in: query
      name: start_datetime
      description: The start date and time (format YYYY-MM-DD HH:MM:SS) with which
        to filter the date_field. Returns components with a timestamp at or after
        exact time provided in query. You can specify timezone in query - otherwise
        your site's time zone will be used. If provided, this parameter will be used
        instead of start_date.
    - schema:
        type: string
      in: query
      name: end_datetime
      description: The end date and time (format YYYY-MM-DD HH:MM:SS) with which to
        filter the date_field. Returns components with a timestamp at or before exact
        time provided in query. You can specify timezone in query - otherwise your
        site's time zone will be used. If provided, this parameter will be used instead
        of end_date.
